
EXTI_TWO_LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00001cce  00001d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800066  00800066  00001d68  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  00001d68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d61  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_1>
       8:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__vector_2>
       c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_3>
      10:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_4>
      14:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_5>
      18:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <__vector_6>
      1c:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__vector_7>
      20:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_8>
      24:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_9>
      28:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__vector_10>
      2c:	0c 94 8e 0c 	jmp	0x191c	; 0x191c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <main>
      8a:	0c 94 65 0e 	jmp	0x1cca	; 0x1cca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
      aa:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
      ac:	81 e0       	ldi	r24, 0x01	; 1
      ae:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
      b0:	8a 81       	ldd	r24, Y+2	; 0x02
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_enumSetPinDirection+0x26>
      b6:	f1 c0       	rjmp	.+482    	; 0x29a <DIO_enumSetPinDirection+0x208>
      b8:	8b 81       	ldd	r24, Y+3	; 0x03
      ba:	88 30       	cpi	r24, 0x08	; 8
      bc:	08 f0       	brcs	.+2      	; 0xc0 <DIO_enumSetPinDirection+0x2e>
      be:	ed c0       	rjmp	.+474    	; 0x29a <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
      c0:	8c 81       	ldd	r24, Y+4	; 0x04
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	09 f0       	breq	.+2      	; 0xc8 <DIO_enumSetPinDirection+0x36>
      c6:	6f c0       	rjmp	.+222    	; 0x1a6 <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
      c8:	8a 81       	ldd	r24, Y+2	; 0x02
      ca:	28 2f       	mov	r18, r24
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	38 87       	std	Y+8, r19	; 0x08
      d0:	2f 83       	std	Y+7, r18	; 0x07
      d2:	8f 81       	ldd	r24, Y+7	; 0x07
      d4:	98 85       	ldd	r25, Y+8	; 0x08
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	91 05       	cpc	r25, r1
      da:	49 f1       	breq	.+82     	; 0x12e <DIO_enumSetPinDirection+0x9c>
      dc:	2f 81       	ldd	r18, Y+7	; 0x07
      de:	38 85       	ldd	r19, Y+8	; 0x08
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	2c f4       	brge	.+10     	; 0xf0 <DIO_enumSetPinDirection+0x5e>
      e6:	8f 81       	ldd	r24, Y+7	; 0x07
      e8:	98 85       	ldd	r25, Y+8	; 0x08
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	61 f0       	breq	.+24     	; 0x106 <DIO_enumSetPinDirection+0x74>
      ee:	d6 c0       	rjmp	.+428    	; 0x29c <DIO_enumSetPinDirection+0x20a>
      f0:	2f 81       	ldd	r18, Y+7	; 0x07
      f2:	38 85       	ldd	r19, Y+8	; 0x08
      f4:	22 30       	cpi	r18, 0x02	; 2
      f6:	31 05       	cpc	r19, r1
      f8:	71 f1       	breq	.+92     	; 0x156 <DIO_enumSetPinDirection+0xc4>
      fa:	8f 81       	ldd	r24, Y+7	; 0x07
      fc:	98 85       	ldd	r25, Y+8	; 0x08
      fe:	83 30       	cpi	r24, 0x03	; 3
     100:	91 05       	cpc	r25, r1
     102:	e9 f1       	breq	.+122    	; 0x17e <DIO_enumSetPinDirection+0xec>
     104:	cb c0       	rjmp	.+406    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
     106:	aa e3       	ldi	r26, 0x3A	; 58
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	ea e3       	ldi	r30, 0x3A	; 58
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	48 2f       	mov	r20, r24
     112:	8b 81       	ldd	r24, Y+3	; 0x03
     114:	28 2f       	mov	r18, r24
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	02 2e       	mov	r0, r18
     11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_enumSetPinDirection+0x92>
     120:	88 0f       	add	r24, r24
     122:	99 1f       	adc	r25, r25
     124:	0a 94       	dec	r0
     126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_enumSetPinDirection+0x8e>
     128:	84 2b       	or	r24, r20
     12a:	8c 93       	st	X, r24
     12c:	b7 c0       	rjmp	.+366    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
     12e:	a7 e3       	ldi	r26, 0x37	; 55
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	e7 e3       	ldi	r30, 0x37	; 55
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 2e       	mov	r0, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_enumSetPinDirection+0xba>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_enumSetPinDirection+0xb6>
     150:	84 2b       	or	r24, r20
     152:	8c 93       	st	X, r24
     154:	a3 c0       	rjmp	.+326    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
     156:	a4 e3       	ldi	r26, 0x34	; 52
     158:	b0 e0       	ldi	r27, 0x00	; 0
     15a:	e4 e3       	ldi	r30, 0x34	; 52
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	80 81       	ld	r24, Z
     160:	48 2f       	mov	r20, r24
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	28 2f       	mov	r18, r24
     166:	30 e0       	ldi	r19, 0x00	; 0
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	02 2e       	mov	r0, r18
     16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_enumSetPinDirection+0xe2>
     170:	88 0f       	add	r24, r24
     172:	99 1f       	adc	r25, r25
     174:	0a 94       	dec	r0
     176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_enumSetPinDirection+0xde>
     178:	84 2b       	or	r24, r20
     17a:	8c 93       	st	X, r24
     17c:	8f c0       	rjmp	.+286    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
     17e:	a1 e3       	ldi	r26, 0x31	; 49
     180:	b0 e0       	ldi	r27, 0x00	; 0
     182:	e1 e3       	ldi	r30, 0x31	; 49
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	80 81       	ld	r24, Z
     188:	48 2f       	mov	r20, r24
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	28 2f       	mov	r18, r24
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 2e       	mov	r0, r18
     196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_enumSetPinDirection+0x10a>
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	0a 94       	dec	r0
     19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_enumSetPinDirection+0x106>
     1a0:	84 2b       	or	r24, r20
     1a2:	8c 93       	st	X, r24
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
     1a6:	8c 81       	ldd	r24, Y+4	; 0x04
     1a8:	88 23       	and	r24, r24
     1aa:	09 f0       	breq	.+2      	; 0x1ae <DIO_enumSetPinDirection+0x11c>
     1ac:	74 c0       	rjmp	.+232    	; 0x296 <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	3e 83       	std	Y+6, r19	; 0x06
     1b6:	2d 83       	std	Y+5, r18	; 0x05
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	9e 81       	ldd	r25, Y+6	; 0x06
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	91 05       	cpc	r25, r1
     1c0:	59 f1       	breq	.+86     	; 0x218 <DIO_enumSetPinDirection+0x186>
     1c2:	2d 81       	ldd	r18, Y+5	; 0x05
     1c4:	3e 81       	ldd	r19, Y+6	; 0x06
     1c6:	22 30       	cpi	r18, 0x02	; 2
     1c8:	31 05       	cpc	r19, r1
     1ca:	2c f4       	brge	.+10     	; 0x1d6 <DIO_enumSetPinDirection+0x144>
     1cc:	8d 81       	ldd	r24, Y+5	; 0x05
     1ce:	9e 81       	ldd	r25, Y+6	; 0x06
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	69 f0       	breq	.+26     	; 0x1ee <DIO_enumSetPinDirection+0x15c>
     1d4:	63 c0       	rjmp	.+198    	; 0x29c <DIO_enumSetPinDirection+0x20a>
     1d6:	2d 81       	ldd	r18, Y+5	; 0x05
     1d8:	3e 81       	ldd	r19, Y+6	; 0x06
     1da:	22 30       	cpi	r18, 0x02	; 2
     1dc:	31 05       	cpc	r19, r1
     1de:	89 f1       	breq	.+98     	; 0x242 <DIO_enumSetPinDirection+0x1b0>
     1e0:	8d 81       	ldd	r24, Y+5	; 0x05
     1e2:	9e 81       	ldd	r25, Y+6	; 0x06
     1e4:	83 30       	cpi	r24, 0x03	; 3
     1e6:	91 05       	cpc	r25, r1
     1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_enumSetPinDirection+0x15a>
     1ea:	40 c0       	rjmp	.+128    	; 0x26c <DIO_enumSetPinDirection+0x1da>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
     1ee:	aa e3       	ldi	r26, 0x3A	; 58
     1f0:	b0 e0       	ldi	r27, 0x00	; 0
     1f2:	ea e3       	ldi	r30, 0x3A	; 58
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	48 2f       	mov	r20, r24
     1fa:	8b 81       	ldd	r24, Y+3	; 0x03
     1fc:	28 2f       	mov	r18, r24
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	02 2e       	mov	r0, r18
     206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_enumSetPinDirection+0x17a>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	0a 94       	dec	r0
     20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_enumSetPinDirection+0x176>
     210:	80 95       	com	r24
     212:	84 23       	and	r24, r20
     214:	8c 93       	st	X, r24
     216:	42 c0       	rjmp	.+132    	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
     218:	a7 e3       	ldi	r26, 0x37	; 55
     21a:	b0 e0       	ldi	r27, 0x00	; 0
     21c:	e7 e3       	ldi	r30, 0x37	; 55
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	48 2f       	mov	r20, r24
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	28 2f       	mov	r18, r24
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	02 2e       	mov	r0, r18
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_enumSetPinDirection+0x1a4>
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	0a 94       	dec	r0
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_enumSetPinDirection+0x1a0>
     23a:	80 95       	com	r24
     23c:	84 23       	and	r24, r20
     23e:	8c 93       	st	X, r24
     240:	2d c0       	rjmp	.+90     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
     242:	a4 e3       	ldi	r26, 0x34	; 52
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e4 e3       	ldi	r30, 0x34	; 52
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	48 2f       	mov	r20, r24
     24e:	8b 81       	ldd	r24, Y+3	; 0x03
     250:	28 2f       	mov	r18, r24
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	02 2e       	mov	r0, r18
     25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_enumSetPinDirection+0x1ce>
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	0a 94       	dec	r0
     262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_enumSetPinDirection+0x1ca>
     264:	80 95       	com	r24
     266:	84 23       	and	r24, r20
     268:	8c 93       	st	X, r24
     26a:	18 c0       	rjmp	.+48     	; 0x29c <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
     26c:	a1 e3       	ldi	r26, 0x31	; 49
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e1 e3       	ldi	r30, 0x31	; 49
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	48 2f       	mov	r20, r24
     278:	8b 81       	ldd	r24, Y+3	; 0x03
     27a:	28 2f       	mov	r18, r24
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 2e       	mov	r0, r18
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enumSetPinDirection+0x1f8>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enumSetPinDirection+0x1f4>
     28e:	80 95       	com	r24
     290:	84 23       	and	r24, r20
     292:	8c 93       	st	X, r24
     294:	03 c0       	rjmp	.+6      	; 0x29c <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     296:	19 82       	std	Y+1, r1	; 0x01
     298:	01 c0       	rjmp	.+2      	; 0x29c <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     29a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     29c:	89 81       	ldd	r24, Y+1	; 0x01

}
     29e:	28 96       	adiw	r28, 0x08	; 8
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	28 97       	sbiw	r28, 0x08	; 8
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	8a 83       	std	Y+2, r24	; 0x02
     2c6:	6b 83       	std	Y+3, r22	; 0x03
     2c8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	84 30       	cpi	r24, 0x04	; 4
     2d2:	08 f0       	brcs	.+2      	; 0x2d6 <DIO_enumSetPinValue+0x26>
     2d4:	f1 c0       	rjmp	.+482    	; 0x4b8 <DIO_enumSetPinValue+0x208>
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 30       	cpi	r24, 0x08	; 8
     2da:	08 f0       	brcs	.+2      	; 0x2de <DIO_enumSetPinValue+0x2e>
     2dc:	ed c0       	rjmp	.+474    	; 0x4b8 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     2de:	8c 81       	ldd	r24, Y+4	; 0x04
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_enumSetPinValue+0x36>
     2e4:	6f c0       	rjmp	.+222    	; 0x3c4 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	38 87       	std	Y+8, r19	; 0x08
     2ee:	2f 83       	std	Y+7, r18	; 0x07
     2f0:	8f 81       	ldd	r24, Y+7	; 0x07
     2f2:	98 85       	ldd	r25, Y+8	; 0x08
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	91 05       	cpc	r25, r1
     2f8:	49 f1       	breq	.+82     	; 0x34c <DIO_enumSetPinValue+0x9c>
     2fa:	2f 81       	ldd	r18, Y+7	; 0x07
     2fc:	38 85       	ldd	r19, Y+8	; 0x08
     2fe:	22 30       	cpi	r18, 0x02	; 2
     300:	31 05       	cpc	r19, r1
     302:	2c f4       	brge	.+10     	; 0x30e <DIO_enumSetPinValue+0x5e>
     304:	8f 81       	ldd	r24, Y+7	; 0x07
     306:	98 85       	ldd	r25, Y+8	; 0x08
     308:	00 97       	sbiw	r24, 0x00	; 0
     30a:	61 f0       	breq	.+24     	; 0x324 <DIO_enumSetPinValue+0x74>
     30c:	d6 c0       	rjmp	.+428    	; 0x4ba <DIO_enumSetPinValue+0x20a>
     30e:	2f 81       	ldd	r18, Y+7	; 0x07
     310:	38 85       	ldd	r19, Y+8	; 0x08
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	31 05       	cpc	r19, r1
     316:	71 f1       	breq	.+92     	; 0x374 <DIO_enumSetPinValue+0xc4>
     318:	8f 81       	ldd	r24, Y+7	; 0x07
     31a:	98 85       	ldd	r25, Y+8	; 0x08
     31c:	83 30       	cpi	r24, 0x03	; 3
     31e:	91 05       	cpc	r25, r1
     320:	e9 f1       	breq	.+122    	; 0x39c <DIO_enumSetPinValue+0xec>
     322:	cb c0       	rjmp	.+406    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
     324:	ab e3       	ldi	r26, 0x3B	; 59
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	eb e3       	ldi	r30, 0x3B	; 59
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	48 2f       	mov	r20, r24
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	28 2f       	mov	r18, r24
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	02 2e       	mov	r0, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_enumSetPinValue+0x92>
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	0a 94       	dec	r0
     344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_enumSetPinValue+0x8e>
     346:	84 2b       	or	r24, r20
     348:	8c 93       	st	X, r24
     34a:	b7 c0       	rjmp	.+366    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
     34c:	a8 e3       	ldi	r26, 0x38	; 56
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	e8 e3       	ldi	r30, 0x38	; 56
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	48 2f       	mov	r20, r24
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 2e       	mov	r0, r18
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_enumSetPinValue+0xba>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_enumSetPinValue+0xb6>
     36e:	84 2b       	or	r24, r20
     370:	8c 93       	st	X, r24
     372:	a3 c0       	rjmp	.+326    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
     374:	a5 e3       	ldi	r26, 0x35	; 53
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e5 e3       	ldi	r30, 0x35	; 53
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	80 81       	ld	r24, Z
     37e:	48 2f       	mov	r20, r24
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	02 2e       	mov	r0, r18
     38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_enumSetPinValue+0xe2>
     38e:	88 0f       	add	r24, r24
     390:	99 1f       	adc	r25, r25
     392:	0a 94       	dec	r0
     394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_enumSetPinValue+0xde>
     396:	84 2b       	or	r24, r20
     398:	8c 93       	st	X, r24
     39a:	8f c0       	rjmp	.+286    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
     39c:	a2 e3       	ldi	r26, 0x32	; 50
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e2 e3       	ldi	r30, 0x32	; 50
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	48 2f       	mov	r20, r24
     3a8:	8b 81       	ldd	r24, Y+3	; 0x03
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 2e       	mov	r0, r18
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_enumSetPinValue+0x10a>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_enumSetPinValue+0x106>
     3be:	84 2b       	or	r24, r20
     3c0:	8c 93       	st	X, r24
     3c2:	7b c0       	rjmp	.+246    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	88 23       	and	r24, r24
     3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_enumSetPinValue+0x11c>
     3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	3e 83       	std	Y+6, r19	; 0x06
     3d4:	2d 83       	std	Y+5, r18	; 0x05
     3d6:	8d 81       	ldd	r24, Y+5	; 0x05
     3d8:	9e 81       	ldd	r25, Y+6	; 0x06
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	91 05       	cpc	r25, r1
     3de:	59 f1       	breq	.+86     	; 0x436 <DIO_enumSetPinValue+0x186>
     3e0:	2d 81       	ldd	r18, Y+5	; 0x05
     3e2:	3e 81       	ldd	r19, Y+6	; 0x06
     3e4:	22 30       	cpi	r18, 0x02	; 2
     3e6:	31 05       	cpc	r19, r1
     3e8:	2c f4       	brge	.+10     	; 0x3f4 <DIO_enumSetPinValue+0x144>
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	9e 81       	ldd	r25, Y+6	; 0x06
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	69 f0       	breq	.+26     	; 0x40c <DIO_enumSetPinValue+0x15c>
     3f2:	63 c0       	rjmp	.+198    	; 0x4ba <DIO_enumSetPinValue+0x20a>
     3f4:	2d 81       	ldd	r18, Y+5	; 0x05
     3f6:	3e 81       	ldd	r19, Y+6	; 0x06
     3f8:	22 30       	cpi	r18, 0x02	; 2
     3fa:	31 05       	cpc	r19, r1
     3fc:	89 f1       	breq	.+98     	; 0x460 <DIO_enumSetPinValue+0x1b0>
     3fe:	8d 81       	ldd	r24, Y+5	; 0x05
     400:	9e 81       	ldd	r25, Y+6	; 0x06
     402:	83 30       	cpi	r24, 0x03	; 3
     404:	91 05       	cpc	r25, r1
     406:	09 f4       	brne	.+2      	; 0x40a <DIO_enumSetPinValue+0x15a>
     408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_enumSetPinValue+0x1da>
     40a:	57 c0       	rjmp	.+174    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
     40c:	ab e3       	ldi	r26, 0x3B	; 59
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	eb e3       	ldi	r30, 0x3B	; 59
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	8b 81       	ldd	r24, Y+3	; 0x03
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 2e       	mov	r0, r18
     424:	02 c0       	rjmp	.+4      	; 0x42a <DIO_enumSetPinValue+0x17a>
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	0a 94       	dec	r0
     42c:	e2 f7       	brpl	.-8      	; 0x426 <DIO_enumSetPinValue+0x176>
     42e:	80 95       	com	r24
     430:	84 23       	and	r24, r20
     432:	8c 93       	st	X, r24
     434:	42 c0       	rjmp	.+132    	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
     436:	a8 e3       	ldi	r26, 0x38	; 56
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e8 e3       	ldi	r30, 0x38	; 56
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	48 2f       	mov	r20, r24
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	28 2f       	mov	r18, r24
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	02 2e       	mov	r0, r18
     44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_enumSetPinValue+0x1a4>
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	0a 94       	dec	r0
     456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_enumSetPinValue+0x1a0>
     458:	80 95       	com	r24
     45a:	84 23       	and	r24, r20
     45c:	8c 93       	st	X, r24
     45e:	2d c0       	rjmp	.+90     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
     460:	a5 e3       	ldi	r26, 0x35	; 53
     462:	b0 e0       	ldi	r27, 0x00	; 0
     464:	e5 e3       	ldi	r30, 0x35	; 53
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	48 2f       	mov	r20, r24
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 2e       	mov	r0, r18
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_enumSetPinValue+0x1ce>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	0a 94       	dec	r0
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_enumSetPinValue+0x1ca>
     482:	80 95       	com	r24
     484:	84 23       	and	r24, r20
     486:	8c 93       	st	X, r24
     488:	18 c0       	rjmp	.+48     	; 0x4ba <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
     48a:	a2 e3       	ldi	r26, 0x32	; 50
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e2 e3       	ldi	r30, 0x32	; 50
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	48 2f       	mov	r20, r24
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_enumSetPinValue+0x1f8>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_enumSetPinValue+0x1f4>
     4ac:	80 95       	com	r24
     4ae:	84 23       	and	r24, r20
     4b0:	8c 93       	st	X, r24
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     4b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01

}
     4bc:	28 96       	adiw	r28, 0x08	; 8
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	27 97       	sbiw	r28, 0x07	; 7
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	8a 83       	std	Y+2, r24	; 0x02
     4e4:	6b 83       	std	Y+3, r22	; 0x03
     4e6:	5d 83       	std	Y+5, r21	; 0x05
     4e8:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	84 30       	cpi	r24, 0x04	; 4
     4f2:	08 f0       	brcs	.+2      	; 0x4f6 <DIO_enumGetPinValue+0x28>
     4f4:	a6 c0       	rjmp	.+332    	; 0x642 <DIO_enumGetPinValue+0x174>
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	88 30       	cpi	r24, 0x08	; 8
     4fa:	08 f0       	brcs	.+2      	; 0x4fe <DIO_enumGetPinValue+0x30>
     4fc:	a2 c0       	rjmp	.+324    	; 0x642 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	28 2f       	mov	r18, r24
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	3f 83       	std	Y+7, r19	; 0x07
     506:	2e 83       	std	Y+6, r18	; 0x06
     508:	4e 81       	ldd	r20, Y+6	; 0x06
     50a:	5f 81       	ldd	r21, Y+7	; 0x07
     50c:	41 30       	cpi	r20, 0x01	; 1
     50e:	51 05       	cpc	r21, r1
     510:	c1 f1       	breq	.+112    	; 0x582 <DIO_enumGetPinValue+0xb4>
     512:	8e 81       	ldd	r24, Y+6	; 0x06
     514:	9f 81       	ldd	r25, Y+7	; 0x07
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	91 05       	cpc	r25, r1
     51a:	34 f4       	brge	.+12     	; 0x528 <DIO_enumGetPinValue+0x5a>
     51c:	2e 81       	ldd	r18, Y+6	; 0x06
     51e:	3f 81       	ldd	r19, Y+7	; 0x07
     520:	21 15       	cp	r18, r1
     522:	31 05       	cpc	r19, r1
     524:	71 f0       	breq	.+28     	; 0x542 <DIO_enumGetPinValue+0x74>
     526:	8e c0       	rjmp	.+284    	; 0x644 <DIO_enumGetPinValue+0x176>
     528:	4e 81       	ldd	r20, Y+6	; 0x06
     52a:	5f 81       	ldd	r21, Y+7	; 0x07
     52c:	42 30       	cpi	r20, 0x02	; 2
     52e:	51 05       	cpc	r21, r1
     530:	09 f4       	brne	.+2      	; 0x534 <DIO_enumGetPinValue+0x66>
     532:	47 c0       	rjmp	.+142    	; 0x5c2 <DIO_enumGetPinValue+0xf4>
     534:	8e 81       	ldd	r24, Y+6	; 0x06
     536:	9f 81       	ldd	r25, Y+7	; 0x07
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <DIO_enumGetPinValue+0x72>
     53e:	61 c0       	rjmp	.+194    	; 0x602 <DIO_enumGetPinValue+0x134>
     540:	81 c0       	rjmp	.+258    	; 0x644 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
     542:	e9 e3       	ldi	r30, 0x39	; 57
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	48 2f       	mov	r20, r24
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	28 2f       	mov	r18, r24
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_enumGetPinValue+0x8e>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	2a 95       	dec	r18
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_enumGetPinValue+0x8a>
     560:	9a 01       	movw	r18, r20
     562:	28 23       	and	r18, r24
     564:	39 23       	and	r19, r25
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a9 01       	movw	r20, r18
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_enumGetPinValue+0xa6>
     570:	55 95       	asr	r21
     572:	47 95       	ror	r20
     574:	8a 95       	dec	r24
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_enumGetPinValue+0xa2>
     578:	ca 01       	movw	r24, r20
     57a:	ec 81       	ldd	r30, Y+4	; 0x04
     57c:	fd 81       	ldd	r31, Y+5	; 0x05
     57e:	80 83       	st	Z, r24
     580:	61 c0       	rjmp	.+194    	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
     582:	e6 e3       	ldi	r30, 0x36	; 54
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_enumGetPinValue+0xce>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	2a 95       	dec	r18
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_enumGetPinValue+0xca>
     5a0:	9a 01       	movw	r18, r20
     5a2:	28 23       	and	r18, r24
     5a4:	39 23       	and	r19, r25
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a9 01       	movw	r20, r18
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_enumGetPinValue+0xe6>
     5b0:	55 95       	asr	r21
     5b2:	47 95       	ror	r20
     5b4:	8a 95       	dec	r24
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_enumGetPinValue+0xe2>
     5b8:	ca 01       	movw	r24, r20
     5ba:	ec 81       	ldd	r30, Y+4	; 0x04
     5bc:	fd 81       	ldd	r31, Y+5	; 0x05
     5be:	80 83       	st	Z, r24
     5c0:	41 c0       	rjmp	.+130    	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
     5c2:	e3 e3       	ldi	r30, 0x33	; 51
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	48 2f       	mov	r20, r24
     5ca:	50 e0       	ldi	r21, 0x00	; 0
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	28 2f       	mov	r18, r24
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_enumGetPinValue+0x10e>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	2a 95       	dec	r18
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_enumGetPinValue+0x10a>
     5e0:	9a 01       	movw	r18, r20
     5e2:	28 23       	and	r18, r24
     5e4:	39 23       	and	r19, r25
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	88 2f       	mov	r24, r24
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_enumGetPinValue+0x126>
     5f0:	55 95       	asr	r21
     5f2:	47 95       	ror	r20
     5f4:	8a 95       	dec	r24
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_enumGetPinValue+0x122>
     5f8:	ca 01       	movw	r24, r20
     5fa:	ec 81       	ldd	r30, Y+4	; 0x04
     5fc:	fd 81       	ldd	r31, Y+5	; 0x05
     5fe:	80 83       	st	Z, r24
     600:	21 c0       	rjmp	.+66     	; 0x644 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
     602:	e0 e3       	ldi	r30, 0x30	; 48
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	80 81       	ld	r24, Z
     608:	48 2f       	mov	r20, r24
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	28 2f       	mov	r18, r24
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_enumGetPinValue+0x14e>
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	2a 95       	dec	r18
     61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_enumGetPinValue+0x14a>
     620:	9a 01       	movw	r18, r20
     622:	28 23       	and	r18, r24
     624:	39 23       	and	r19, r25
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a9 01       	movw	r20, r18
     62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_enumGetPinValue+0x166>
     630:	55 95       	asr	r21
     632:	47 95       	ror	r20
     634:	8a 95       	dec	r24
     636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_enumGetPinValue+0x162>
     638:	ca 01       	movw	r24, r20
     63a:	ec 81       	ldd	r30, Y+4	; 0x04
     63c:	fd 81       	ldd	r31, Y+5	; 0x05
     63e:	80 83       	st	Z, r24
     640:	01 c0       	rjmp	.+2      	; 0x644 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     642:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     644:	89 81       	ldd	r24, Y+1	; 0x01
}
     646:	27 96       	adiw	r28, 0x07	; 7
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	cf 91       	pop	r28
     654:	df 91       	pop	r29
     656:	08 95       	ret

00000658 <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
     658:	df 93       	push	r29
     65a:	cf 93       	push	r28
     65c:	00 d0       	rcall	.+0      	; 0x65e <DIO_enumTogglePinValue+0x6>
     65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_enumTogglePinValue+0x8>
     660:	0f 92       	push	r0
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62
     666:	8a 83       	std	Y+2, r24	; 0x02
     668:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	88 30       	cpi	r24, 0x08	; 8
     672:	08 f0       	brcs	.+2      	; 0x676 <DIO_enumTogglePinValue+0x1e>
     674:	6f c0       	rjmp	.+222    	; 0x754 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
     676:	8a 81       	ldd	r24, Y+2	; 0x02
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	3d 83       	std	Y+5, r19	; 0x05
     67e:	2c 83       	std	Y+4, r18	; 0x04
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	9d 81       	ldd	r25, Y+5	; 0x05
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	91 05       	cpc	r25, r1
     688:	49 f1       	breq	.+82     	; 0x6dc <DIO_enumTogglePinValue+0x84>
     68a:	2c 81       	ldd	r18, Y+4	; 0x04
     68c:	3d 81       	ldd	r19, Y+5	; 0x05
     68e:	22 30       	cpi	r18, 0x02	; 2
     690:	31 05       	cpc	r19, r1
     692:	2c f4       	brge	.+10     	; 0x69e <DIO_enumTogglePinValue+0x46>
     694:	8c 81       	ldd	r24, Y+4	; 0x04
     696:	9d 81       	ldd	r25, Y+5	; 0x05
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	61 f0       	breq	.+24     	; 0x6b4 <DIO_enumTogglePinValue+0x5c>
     69c:	5c c0       	rjmp	.+184    	; 0x756 <DIO_enumTogglePinValue+0xfe>
     69e:	2c 81       	ldd	r18, Y+4	; 0x04
     6a0:	3d 81       	ldd	r19, Y+5	; 0x05
     6a2:	22 30       	cpi	r18, 0x02	; 2
     6a4:	31 05       	cpc	r19, r1
     6a6:	71 f1       	breq	.+92     	; 0x704 <DIO_enumTogglePinValue+0xac>
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	91 05       	cpc	r25, r1
     6b0:	e9 f1       	breq	.+122    	; 0x72c <DIO_enumTogglePinValue+0xd4>
     6b2:	51 c0       	rjmp	.+162    	; 0x756 <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
     6b4:	ab e3       	ldi	r26, 0x3B	; 59
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	eb e3       	ldi	r30, 0x3B	; 59
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	48 2f       	mov	r20, r24
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	02 2e       	mov	r0, r18
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_enumTogglePinValue+0x7a>
     6ce:	88 0f       	add	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_enumTogglePinValue+0x76>
     6d6:	84 27       	eor	r24, r20
     6d8:	8c 93       	st	X, r24
     6da:	3d c0       	rjmp	.+122    	; 0x756 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
     6dc:	a8 e3       	ldi	r26, 0x38	; 56
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	e8 e3       	ldi	r30, 0x38	; 56
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	48 2f       	mov	r20, r24
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	28 2f       	mov	r18, r24
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	02 2e       	mov	r0, r18
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <DIO_enumTogglePinValue+0xa2>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <DIO_enumTogglePinValue+0x9e>
     6fe:	84 27       	eor	r24, r20
     700:	8c 93       	st	X, r24
     702:	29 c0       	rjmp	.+82     	; 0x756 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
     704:	a5 e3       	ldi	r26, 0x35	; 53
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	e5 e3       	ldi	r30, 0x35	; 53
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	48 2f       	mov	r20, r24
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	28 2f       	mov	r18, r24
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	02 2e       	mov	r0, r18
     71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_enumTogglePinValue+0xca>
     71e:	88 0f       	add	r24, r24
     720:	99 1f       	adc	r25, r25
     722:	0a 94       	dec	r0
     724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_enumTogglePinValue+0xc6>
     726:	84 27       	eor	r24, r20
     728:	8c 93       	st	X, r24
     72a:	15 c0       	rjmp	.+42     	; 0x756 <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
     72c:	a2 e3       	ldi	r26, 0x32	; 50
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	e2 e3       	ldi	r30, 0x32	; 50
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	48 2f       	mov	r20, r24
     738:	8b 81       	ldd	r24, Y+3	; 0x03
     73a:	28 2f       	mov	r18, r24
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	02 2e       	mov	r0, r18
     744:	02 c0       	rjmp	.+4      	; 0x74a <DIO_enumTogglePinValue+0xf2>
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	0a 94       	dec	r0
     74c:	e2 f7       	brpl	.-8      	; 0x746 <DIO_enumTogglePinValue+0xee>
     74e:	84 27       	eor	r24, r20
     750:	8c 93       	st	X, r24
     752:	01 c0       	rjmp	.+2      	; 0x756 <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
     754:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
     756:	89 81       	ldd	r24, Y+1	; 0x01
}
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	00 d0       	rcall	.+0      	; 0x76e <DIO_enumConnectPullup+0x6>
     76e:	00 d0       	rcall	.+0      	; 0x770 <DIO_enumConnectPullup+0x8>
     770:	00 d0       	rcall	.+0      	; 0x772 <DIO_enumConnectPullup+0xa>
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	8a 83       	std	Y+2, r24	; 0x02
     778:	6b 83       	std	Y+3, r22	; 0x03
     77a:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	84 30       	cpi	r24, 0x04	; 4
     784:	08 f0       	brcs	.+2      	; 0x788 <DIO_enumConnectPullup+0x20>
     786:	3e c1       	rjmp	.+636    	; 0xa04 <__stack+0x1a5>
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	88 30       	cpi	r24, 0x08	; 8
     78c:	08 f0       	brcs	.+2      	; 0x790 <DIO_enumConnectPullup+0x28>
     78e:	3a c1       	rjmp	.+628    	; 0xa04 <__stack+0x1a5>
	{
		switch(Copy_u8PORT)
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	28 2f       	mov	r18, r24
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	3e 83       	std	Y+6, r19	; 0x06
     798:	2d 83       	std	Y+5, r18	; 0x05
     79a:	8d 81       	ldd	r24, Y+5	; 0x05
     79c:	9e 81       	ldd	r25, Y+6	; 0x06
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	91 05       	cpc	r25, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <DIO_enumConnectPullup+0x3e>
     7a4:	5d c0       	rjmp	.+186    	; 0x860 <__stack+0x1>
     7a6:	2d 81       	ldd	r18, Y+5	; 0x05
     7a8:	3e 81       	ldd	r19, Y+6	; 0x06
     7aa:	22 30       	cpi	r18, 0x02	; 2
     7ac:	31 05       	cpc	r19, r1
     7ae:	2c f4       	brge	.+10     	; 0x7ba <DIO_enumConnectPullup+0x52>
     7b0:	8d 81       	ldd	r24, Y+5	; 0x05
     7b2:	9e 81       	ldd	r25, Y+6	; 0x06
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	71 f0       	breq	.+28     	; 0x7d4 <DIO_enumConnectPullup+0x6c>
     7b8:	26 c1       	rjmp	.+588    	; 0xa06 <__stack+0x1a7>
     7ba:	2d 81       	ldd	r18, Y+5	; 0x05
     7bc:	3e 81       	ldd	r19, Y+6	; 0x06
     7be:	22 30       	cpi	r18, 0x02	; 2
     7c0:	31 05       	cpc	r19, r1
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_enumConnectPullup+0x5e>
     7c4:	93 c0       	rjmp	.+294    	; 0x8ec <__stack+0x8d>
     7c6:	8d 81       	ldd	r24, Y+5	; 0x05
     7c8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	91 05       	cpc	r25, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <DIO_enumConnectPullup+0x6a>
     7d0:	d3 c0       	rjmp	.+422    	; 0x978 <__stack+0x119>
     7d2:	19 c1       	rjmp	.+562    	; 0xa06 <__stack+0x1a7>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     7d4:	8c 81       	ldd	r24, Y+4	; 0x04
     7d6:	81 30       	cpi	r24, 0x01	; 1
     7d8:	71 f5       	brne	.+92     	; 0x836 <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
     7da:	a0 e5       	ldi	r26, 0x50	; 80
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e0 e5       	ldi	r30, 0x50	; 80
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	8b 7f       	andi	r24, 0xFB	; 251
     7e6:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
     7e8:	aa e3       	ldi	r26, 0x3A	; 58
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	ea e3       	ldi	r30, 0x3A	; 58
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	48 2f       	mov	r20, r24
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_enumConnectPullup+0x9c>
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	2a 95       	dec	r18
     806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_enumConnectPullup+0x98>
     808:	80 95       	com	r24
     80a:	84 23       	and	r24, r20
     80c:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
     80e:	ab e3       	ldi	r26, 0x3B	; 59
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	eb e3       	ldi	r30, 0x3B	; 59
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	48 2f       	mov	r20, r24
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	28 2f       	mov	r18, r24
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 2e       	mov	r0, r18
     826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_enumConnectPullup+0xc4>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	0a 94       	dec	r0
     82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_enumConnectPullup+0xc0>
     830:	84 2b       	or	r24, r20
     832:	8c 93       	st	X, r24
     834:	e8 c0       	rjmp	.+464    	; 0xa06 <__stack+0x1a7>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
     836:	ab e3       	ldi	r26, 0x3B	; 59
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	eb e3       	ldi	r30, 0x3B	; 59
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	48 2f       	mov	r20, r24
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 2e       	mov	r0, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_enumConnectPullup+0xec>
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_enumConnectPullup+0xe8>
     858:	80 95       	com	r24
     85a:	84 23       	and	r24, r20
     85c:	8c 93       	st	X, r24
     85e:	d3 c0       	rjmp	.+422    	; 0xa06 <__stack+0x1a7>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     860:	8c 81       	ldd	r24, Y+4	; 0x04
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	71 f5       	brne	.+92     	; 0x8c2 <__stack+0x63>
			{
				CLR_BIT(SFIOR,PUD);
     866:	a0 e5       	ldi	r26, 0x50	; 80
     868:	b0 e0       	ldi	r27, 0x00	; 0
     86a:	e0 e5       	ldi	r30, 0x50	; 80
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	8b 7f       	andi	r24, 0xFB	; 251
     872:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
     874:	a7 e3       	ldi	r26, 0x37	; 55
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e7 e3       	ldi	r30, 0x37	; 55
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	80 81       	ld	r24, Z
     87e:	48 2f       	mov	r20, r24
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	2a 95       	dec	r18
     892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
     894:	80 95       	com	r24
     896:	84 23       	and	r24, r20
     898:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
     89a:	a8 e3       	ldi	r26, 0x38	; 56
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e8 e3       	ldi	r30, 0x38	; 56
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	80 81       	ld	r24, Z
     8a4:	48 2f       	mov	r20, r24
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 2e       	mov	r0, r18
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	0a 94       	dec	r0
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	84 2b       	or	r24, r20
     8be:	8c 93       	st	X, r24
     8c0:	a2 c0       	rjmp	.+324    	; 0xa06 <__stack+0x1a7>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
     8c2:	a8 e3       	ldi	r26, 0x38	; 56
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	e8 e3       	ldi	r30, 0x38	; 56
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	48 2f       	mov	r20, r24
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	02 2e       	mov	r0, r18
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	0a 94       	dec	r0
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	80 95       	com	r24
     8e6:	84 23       	and	r24, r20
     8e8:	8c 93       	st	X, r24
     8ea:	8d c0       	rjmp	.+282    	; 0xa06 <__stack+0x1a7>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     8ec:	8c 81       	ldd	r24, Y+4	; 0x04
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	71 f5       	brne	.+92     	; 0x94e <__stack+0xef>
			{
				CLR_BIT(SFIOR,PUD);
     8f2:	a0 e5       	ldi	r26, 0x50	; 80
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	e0 e5       	ldi	r30, 0x50	; 80
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	80 81       	ld	r24, Z
     8fc:	8b 7f       	andi	r24, 0xFB	; 251
     8fe:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
     900:	a4 e3       	ldi	r26, 0x34	; 52
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e4 e3       	ldi	r30, 0x34	; 52
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	48 2f       	mov	r20, r24
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	28 2f       	mov	r18, r24
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	2a 95       	dec	r18
     91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0xb9>
     920:	80 95       	com	r24
     922:	84 23       	and	r24, r20
     924:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
     926:	a5 e3       	ldi	r26, 0x35	; 53
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	e5 e3       	ldi	r30, 0x35	; 53
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	80 81       	ld	r24, Z
     930:	48 2f       	mov	r20, r24
     932:	8b 81       	ldd	r24, Y+3	; 0x03
     934:	28 2f       	mov	r18, r24
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	02 2e       	mov	r0, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0xe5>
     940:	88 0f       	add	r24, r24
     942:	99 1f       	adc	r25, r25
     944:	0a 94       	dec	r0
     946:	e2 f7       	brpl	.-8      	; 0x940 <__stack+0xe1>
     948:	84 2b       	or	r24, r20
     94a:	8c 93       	st	X, r24
     94c:	5c c0       	rjmp	.+184    	; 0xa06 <__stack+0x1a7>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
     94e:	a5 e3       	ldi	r26, 0x35	; 53
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e5 e3       	ldi	r30, 0x35	; 53
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	48 2f       	mov	r20, r24
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 2e       	mov	r0, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x109>
     970:	80 95       	com	r24
     972:	84 23       	and	r24, r20
     974:	8c 93       	st	X, r24
     976:	47 c0       	rjmp	.+142    	; 0xa06 <__stack+0x1a7>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
     978:	8c 81       	ldd	r24, Y+4	; 0x04
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	71 f5       	brne	.+92     	; 0x9da <__stack+0x17b>
			{
				CLR_BIT(SFIOR,PUD);
     97e:	a0 e5       	ldi	r26, 0x50	; 80
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	e0 e5       	ldi	r30, 0x50	; 80
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	8b 7f       	andi	r24, 0xFB	; 251
     98a:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
     98c:	a1 e3       	ldi	r26, 0x31	; 49
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e1 e3       	ldi	r30, 0x31	; 49
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	80 81       	ld	r24, Z
     996:	48 2f       	mov	r20, r24
     998:	8b 81       	ldd	r24, Y+3	; 0x03
     99a:	28 2f       	mov	r18, r24
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0x149>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	2a 95       	dec	r18
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <__stack+0x145>
     9ac:	80 95       	com	r24
     9ae:	84 23       	and	r24, r20
     9b0:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
     9b2:	a2 e3       	ldi	r26, 0x32	; 50
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	e2 e3       	ldi	r30, 0x32	; 50
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	48 2f       	mov	r20, r24
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	02 2e       	mov	r0, r18
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0x171>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	0a 94       	dec	r0
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <__stack+0x16d>
     9d4:	84 2b       	or	r24, r20
     9d6:	8c 93       	st	X, r24
     9d8:	16 c0       	rjmp	.+44     	; 0xa06 <__stack+0x1a7>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
     9da:	a2 e3       	ldi	r26, 0x32	; 50
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e2 e3       	ldi	r30, 0x32	; 50
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	48 2f       	mov	r20, r24
     9e6:	8b 81       	ldd	r24, Y+3	; 0x03
     9e8:	28 2f       	mov	r18, r24
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	02 2e       	mov	r0, r18
     9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0x199>
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	0a 94       	dec	r0
     9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <__stack+0x195>
     9fc:	80 95       	com	r24
     9fe:	84 23       	and	r24, r20
     a00:	8c 93       	st	X, r24
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <__stack+0x1a7>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     a04:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     a06:	89 81       	ldd	r24, Y+1	; 0x01


}
     a08:	26 96       	adiw	r28, 0x06	; 6
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	cd bf       	out	0x3d, r28	; 61
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <DIO_enumSetPortDirection+0x6>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <DIO_enumSetPortDirection+0x8>
     a22:	0f 92       	push	r0
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	8a 83       	std	Y+2, r24	; 0x02
     a2a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	84 30       	cpi	r24, 0x04	; 4
     a34:	a8 f5       	brcc	.+106    	; 0xaa0 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	3d 83       	std	Y+5, r19	; 0x05
     a3e:	2c 83       	std	Y+4, r18	; 0x04
     a40:	8c 81       	ldd	r24, Y+4	; 0x04
     a42:	9d 81       	ldd	r25, Y+5	; 0x05
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	91 05       	cpc	r25, r1
     a48:	d1 f0       	breq	.+52     	; 0xa7e <DIO_enumSetPortDirection+0x64>
     a4a:	2c 81       	ldd	r18, Y+4	; 0x04
     a4c:	3d 81       	ldd	r19, Y+5	; 0x05
     a4e:	22 30       	cpi	r18, 0x02	; 2
     a50:	31 05       	cpc	r19, r1
     a52:	2c f4       	brge	.+10     	; 0xa5e <DIO_enumSetPortDirection+0x44>
     a54:	8c 81       	ldd	r24, Y+4	; 0x04
     a56:	9d 81       	ldd	r25, Y+5	; 0x05
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	61 f0       	breq	.+24     	; 0xa74 <DIO_enumSetPortDirection+0x5a>
     a5c:	1f c0       	rjmp	.+62     	; 0xa9c <DIO_enumSetPortDirection+0x82>
     a5e:	2c 81       	ldd	r18, Y+4	; 0x04
     a60:	3d 81       	ldd	r19, Y+5	; 0x05
     a62:	22 30       	cpi	r18, 0x02	; 2
     a64:	31 05       	cpc	r19, r1
     a66:	81 f0       	breq	.+32     	; 0xa88 <DIO_enumSetPortDirection+0x6e>
     a68:	8c 81       	ldd	r24, Y+4	; 0x04
     a6a:	9d 81       	ldd	r25, Y+5	; 0x05
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	91 05       	cpc	r25, r1
     a70:	81 f0       	breq	.+32     	; 0xa92 <DIO_enumSetPortDirection+0x78>
     a72:	14 c0       	rjmp	.+40     	; 0xa9c <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
     a74:	ea e3       	ldi	r30, 0x3A	; 58
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	80 83       	st	Z, r24
     a7c:	12 c0       	rjmp	.+36     	; 0xaa2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
     a7e:	e7 e3       	ldi	r30, 0x37	; 55
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	80 83       	st	Z, r24
     a86:	0d c0       	rjmp	.+26     	; 0xaa2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
     a88:	e4 e3       	ldi	r30, 0x34	; 52
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	80 83       	st	Z, r24
     a90:	08 c0       	rjmp	.+16     	; 0xaa2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
     a92:	e1 e3       	ldi	r30, 0x31	; 49
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	8b 81       	ldd	r24, Y+3	; 0x03
     a98:	80 83       	st	Z, r24
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
     a9c:	19 82       	std	Y+1, r1	; 0x01
     a9e:	01 c0       	rjmp	.+2      	; 0xaa2 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
     aa0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	00 d0       	rcall	.+0      	; 0xaba <DIO_enumSetPortValue+0x6>
     aba:	00 d0       	rcall	.+0      	; 0xabc <DIO_enumSetPortValue+0x8>
     abc:	0f 92       	push	r0
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	8a 83       	std	Y+2, r24	; 0x02
     ac4:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	a8 f5       	brcc	.+106    	; 0xb3a <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	3d 83       	std	Y+5, r19	; 0x05
     ad8:	2c 83       	std	Y+4, r18	; 0x04
     ada:	8c 81       	ldd	r24, Y+4	; 0x04
     adc:	9d 81       	ldd	r25, Y+5	; 0x05
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	91 05       	cpc	r25, r1
     ae2:	d1 f0       	breq	.+52     	; 0xb18 <DIO_enumSetPortValue+0x64>
     ae4:	2c 81       	ldd	r18, Y+4	; 0x04
     ae6:	3d 81       	ldd	r19, Y+5	; 0x05
     ae8:	22 30       	cpi	r18, 0x02	; 2
     aea:	31 05       	cpc	r19, r1
     aec:	2c f4       	brge	.+10     	; 0xaf8 <DIO_enumSetPortValue+0x44>
     aee:	8c 81       	ldd	r24, Y+4	; 0x04
     af0:	9d 81       	ldd	r25, Y+5	; 0x05
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	61 f0       	breq	.+24     	; 0xb0e <DIO_enumSetPortValue+0x5a>
     af6:	1f c0       	rjmp	.+62     	; 0xb36 <DIO_enumSetPortValue+0x82>
     af8:	2c 81       	ldd	r18, Y+4	; 0x04
     afa:	3d 81       	ldd	r19, Y+5	; 0x05
     afc:	22 30       	cpi	r18, 0x02	; 2
     afe:	31 05       	cpc	r19, r1
     b00:	81 f0       	breq	.+32     	; 0xb22 <DIO_enumSetPortValue+0x6e>
     b02:	8c 81       	ldd	r24, Y+4	; 0x04
     b04:	9d 81       	ldd	r25, Y+5	; 0x05
     b06:	83 30       	cpi	r24, 0x03	; 3
     b08:	91 05       	cpc	r25, r1
     b0a:	81 f0       	breq	.+32     	; 0xb2c <DIO_enumSetPortValue+0x78>
     b0c:	14 c0       	rjmp	.+40     	; 0xb36 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
     b0e:	eb e3       	ldi	r30, 0x3B	; 59
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	8b 81       	ldd	r24, Y+3	; 0x03
     b14:	80 83       	st	Z, r24
     b16:	12 c0       	rjmp	.+36     	; 0xb3c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
     b18:	e8 e3       	ldi	r30, 0x38	; 56
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	80 83       	st	Z, r24
     b20:	0d c0       	rjmp	.+26     	; 0xb3c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
     b22:	e5 e3       	ldi	r30, 0x35	; 53
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	80 83       	st	Z, r24
     b2a:	08 c0       	rjmp	.+16     	; 0xb3c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
     b2c:	e2 e3       	ldi	r30, 0x32	; 50
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	80 83       	st	Z, r24
     b34:	03 c0       	rjmp	.+6      	; 0xb3c <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
     b36:	19 82       	std	Y+1, r1	; 0x01
     b38:	01 c0       	rjmp	.+2      	; 0xb3c <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
     b3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	cf 91       	pop	r28
     b4a:	df 91       	pop	r29
     b4c:	08 95       	ret

00000b4e <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	00 d0       	rcall	.+0      	; 0xb54 <DIO_enumTogglePortValue+0x6>
     b54:	00 d0       	rcall	.+0      	; 0xb56 <DIO_enumTogglePortValue+0x8>
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	08 f0       	brcs	.+2      	; 0xb68 <DIO_enumTogglePortValue+0x1a>
     b66:	3f c0       	rjmp	.+126    	; 0xbe6 <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3c 83       	std	Y+4, r19	; 0x04
     b70:	2b 83       	std	Y+3, r18	; 0x03
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	e9 f0       	breq	.+58     	; 0xbb6 <DIO_enumTogglePortValue+0x68>
     b7c:	2b 81       	ldd	r18, Y+3	; 0x03
     b7e:	3c 81       	ldd	r19, Y+4	; 0x04
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_enumTogglePortValue+0x42>
     b86:	8b 81       	ldd	r24, Y+3	; 0x03
     b88:	9c 81       	ldd	r25, Y+4	; 0x04
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_enumTogglePortValue+0x58>
     b8e:	2c c0       	rjmp	.+88     	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
     b90:	2b 81       	ldd	r18, Y+3	; 0x03
     b92:	3c 81       	ldd	r19, Y+4	; 0x04
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	b1 f0       	breq	.+44     	; 0xbc6 <DIO_enumTogglePortValue+0x78>
     b9a:	8b 81       	ldd	r24, Y+3	; 0x03
     b9c:	9c 81       	ldd	r25, Y+4	; 0x04
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	c9 f0       	breq	.+50     	; 0xbd6 <DIO_enumTogglePortValue+0x88>
     ba4:	21 c0       	rjmp	.+66     	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
     ba6:	ab e3       	ldi	r26, 0x3B	; 59
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	eb e3       	ldi	r30, 0x3B	; 59
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 95       	com	r24
     bb2:	8c 93       	st	X, r24
     bb4:	19 c0       	rjmp	.+50     	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
     bb6:	a8 e3       	ldi	r26, 0x38	; 56
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	e8 e3       	ldi	r30, 0x38	; 56
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	80 95       	com	r24
     bc2:	8c 93       	st	X, r24
     bc4:	11 c0       	rjmp	.+34     	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
     bc6:	a5 e3       	ldi	r26, 0x35	; 53
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e5 e3       	ldi	r30, 0x35	; 53
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	80 95       	com	r24
     bd2:	8c 93       	st	X, r24
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
     bd6:	a2 e3       	ldi	r26, 0x32	; 50
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e2 e3       	ldi	r30, 0x32	; 50
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 95       	com	r24
     be2:	8c 93       	st	X, r24
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     be6:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <DIO_enumGetPortValue+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <DIO_enumGetPortValue+0x8>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_enumGetPortValue+0xa>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	8a 83       	std	Y+2, r24	; 0x02
     c08:	7c 83       	std	Y+4, r23	; 0x04
     c0a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	e8 f5       	brcc	.+122    	; 0xc90 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	3e 83       	std	Y+6, r19	; 0x06
     c1e:	2d 83       	std	Y+5, r18	; 0x05
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	91 05       	cpc	r25, r1
     c28:	e1 f0       	breq	.+56     	; 0xc62 <DIO_enumGetPortValue+0x6a>
     c2a:	2d 81       	ldd	r18, Y+5	; 0x05
     c2c:	3e 81       	ldd	r19, Y+6	; 0x06
     c2e:	22 30       	cpi	r18, 0x02	; 2
     c30:	31 05       	cpc	r19, r1
     c32:	2c f4       	brge	.+10     	; 0xc3e <DIO_enumGetPortValue+0x46>
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	61 f0       	breq	.+24     	; 0xc54 <DIO_enumGetPortValue+0x5c>
     c3c:	27 c0       	rjmp	.+78     	; 0xc8c <DIO_enumGetPortValue+0x94>
     c3e:	2d 81       	ldd	r18, Y+5	; 0x05
     c40:	3e 81       	ldd	r19, Y+6	; 0x06
     c42:	22 30       	cpi	r18, 0x02	; 2
     c44:	31 05       	cpc	r19, r1
     c46:	a1 f0       	breq	.+40     	; 0xc70 <DIO_enumGetPortValue+0x78>
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	83 30       	cpi	r24, 0x03	; 3
     c4e:	91 05       	cpc	r25, r1
     c50:	b1 f0       	breq	.+44     	; 0xc7e <DIO_enumGetPortValue+0x86>
     c52:	1c c0       	rjmp	.+56     	; 0xc8c <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
     c54:	e9 e3       	ldi	r30, 0x39	; 57
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	eb 81       	ldd	r30, Y+3	; 0x03
     c5c:	fc 81       	ldd	r31, Y+4	; 0x04
     c5e:	80 83       	st	Z, r24
     c60:	18 c0       	rjmp	.+48     	; 0xc92 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
     c62:	e6 e3       	ldi	r30, 0x36	; 54
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	eb 81       	ldd	r30, Y+3	; 0x03
     c6a:	fc 81       	ldd	r31, Y+4	; 0x04
     c6c:	80 83       	st	Z, r24
     c6e:	11 c0       	rjmp	.+34     	; 0xc92 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
     c70:	e3 e3       	ldi	r30, 0x33	; 51
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	eb 81       	ldd	r30, Y+3	; 0x03
     c78:	fc 81       	ldd	r31, Y+4	; 0x04
     c7a:	80 83       	st	Z, r24
     c7c:	0a c0       	rjmp	.+20     	; 0xc92 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
     c7e:	e0 e3       	ldi	r30, 0x30	; 48
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	eb 81       	ldd	r30, Y+3	; 0x03
     c86:	fc 81       	ldd	r31, Y+4	; 0x04
     c88:	80 83       	st	Z, r24
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
     c8c:	19 82       	std	Y+1, r1	; 0x01
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     c90:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
}
     c94:	26 96       	adiw	r28, 0x06	; 6
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <DIO_voidWriteHighNibbles+0x6>
     cac:	00 d0       	rcall	.+0      	; 0xcae <DIO_voidWriteHighNibbles+0x8>
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <DIO_voidWriteHighNibbles+0x1e>
     cc2:	63 c0       	rjmp	.+198    	; 0xd8a <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	82 95       	swap	r24
     cc8:	80 7f       	andi	r24, 0xF0	; 240
     cca:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3d 83       	std	Y+5, r19	; 0x05
     cd4:	2c 83       	std	Y+4, r18	; 0x04
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	29 f1       	breq	.+74     	; 0xd2a <DIO_voidWriteHighNibbles+0x84>
     ce0:	2c 81       	ldd	r18, Y+4	; 0x04
     ce2:	3d 81       	ldd	r19, Y+5	; 0x05
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	31 05       	cpc	r19, r1
     ce8:	2c f4       	brge	.+10     	; 0xcf4 <DIO_voidWriteHighNibbles+0x4e>
     cea:	8c 81       	ldd	r24, Y+4	; 0x04
     cec:	9d 81       	ldd	r25, Y+5	; 0x05
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	61 f0       	breq	.+24     	; 0xd0a <DIO_voidWriteHighNibbles+0x64>
     cf2:	4c c0       	rjmp	.+152    	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>
     cf4:	2c 81       	ldd	r18, Y+4	; 0x04
     cf6:	3d 81       	ldd	r19, Y+5	; 0x05
     cf8:	22 30       	cpi	r18, 0x02	; 2
     cfa:	31 05       	cpc	r19, r1
     cfc:	31 f1       	breq	.+76     	; 0xd4a <DIO_voidWriteHighNibbles+0xa4>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	91 05       	cpc	r25, r1
     d06:	89 f1       	breq	.+98     	; 0xd6a <DIO_voidWriteHighNibbles+0xc4>
     d08:	41 c0       	rjmp	.+130    	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
     d0a:	ab e3       	ldi	r26, 0x3B	; 59
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e3       	ldi	r30, 0x3B	; 59
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8f 70       	andi	r24, 0x0F	; 15
     d16:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
     d18:	ab e3       	ldi	r26, 0x3B	; 59
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	eb e3       	ldi	r30, 0x3B	; 59
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	90 81       	ld	r25, Z
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	89 2b       	or	r24, r25
     d26:	8c 93       	st	X, r24
     d28:	31 c0       	rjmp	.+98     	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
     d2a:	a8 e3       	ldi	r26, 0x38	; 56
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e8 e3       	ldi	r30, 0x38	; 56
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 70       	andi	r24, 0x0F	; 15
     d36:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
     d38:	a8 e3       	ldi	r26, 0x38	; 56
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e8 e3       	ldi	r30, 0x38	; 56
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	90 81       	ld	r25, Z
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	89 2b       	or	r24, r25
     d46:	8c 93       	st	X, r24
     d48:	21 c0       	rjmp	.+66     	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
     d4a:	a5 e3       	ldi	r26, 0x35	; 53
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e5 e3       	ldi	r30, 0x35	; 53
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8f 70       	andi	r24, 0x0F	; 15
     d56:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
     d58:	a5 e3       	ldi	r26, 0x35	; 53
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e5 e3       	ldi	r30, 0x35	; 53
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	90 81       	ld	r25, Z
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	89 2b       	or	r24, r25
     d66:	8c 93       	st	X, r24
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
     d6a:	a2 e3       	ldi	r26, 0x32	; 50
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e2 e3       	ldi	r30, 0x32	; 50
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 70       	andi	r24, 0x0F	; 15
     d76:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
     d78:	a2 e3       	ldi	r26, 0x32	; 50
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e2 e3       	ldi	r30, 0x32	; 50
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	90 81       	ld	r25, Z
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	89 2b       	or	r24, r25
     d86:	8c 93       	st	X, r24
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
     d8a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     d8c:	89 81       	ldd	r24, Y+1	; 0x01

}
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <DIO_voidWriteLowNibbles+0x6>
     da4:	00 d0       	rcall	.+0      	; 0xda6 <DIO_voidWriteLowNibbles+0x8>
     da6:	0f 92       	push	r0
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	8a 83       	std	Y+2, r24	; 0x02
     dae:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	08 f0       	brcs	.+2      	; 0xdbc <DIO_voidWriteLowNibbles+0x1e>
     dba:	62 c0       	rjmp	.+196    	; 0xe80 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	8f 70       	andi	r24, 0x0F	; 15
     dc0:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3d 83       	std	Y+5, r19	; 0x05
     dca:	2c 83       	std	Y+4, r18	; 0x04
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	29 f1       	breq	.+74     	; 0xe20 <DIO_voidWriteLowNibbles+0x82>
     dd6:	2c 81       	ldd	r18, Y+4	; 0x04
     dd8:	3d 81       	ldd	r19, Y+5	; 0x05
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <DIO_voidWriteLowNibbles+0x4c>
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	9d 81       	ldd	r25, Y+5	; 0x05
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	61 f0       	breq	.+24     	; 0xe00 <DIO_voidWriteLowNibbles+0x62>
     de8:	4c c0       	rjmp	.+152    	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>
     dea:	2c 81       	ldd	r18, Y+4	; 0x04
     dec:	3d 81       	ldd	r19, Y+5	; 0x05
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	31 f1       	breq	.+76     	; 0xe40 <DIO_voidWriteLowNibbles+0xa2>
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	9d 81       	ldd	r25, Y+5	; 0x05
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	89 f1       	breq	.+98     	; 0xe60 <DIO_voidWriteLowNibbles+0xc2>
     dfe:	41 c0       	rjmp	.+130    	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
     e00:	ab e3       	ldi	r26, 0x3B	; 59
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	eb e3       	ldi	r30, 0x3B	; 59
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 7f       	andi	r24, 0xF0	; 240
     e0c:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
     e0e:	ab e3       	ldi	r26, 0x3B	; 59
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	eb e3       	ldi	r30, 0x3B	; 59
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	90 81       	ld	r25, Z
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	89 2b       	or	r24, r25
     e1c:	8c 93       	st	X, r24
     e1e:	31 c0       	rjmp	.+98     	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
     e20:	a8 e3       	ldi	r26, 0x38	; 56
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e8 e3       	ldi	r30, 0x38	; 56
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	80 7f       	andi	r24, 0xF0	; 240
     e2c:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
     e2e:	a8 e3       	ldi	r26, 0x38	; 56
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e8 e3       	ldi	r30, 0x38	; 56
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	90 81       	ld	r25, Z
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	89 2b       	or	r24, r25
     e3c:	8c 93       	st	X, r24
     e3e:	21 c0       	rjmp	.+66     	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
     e40:	a5 e3       	ldi	r26, 0x35	; 53
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e5 e3       	ldi	r30, 0x35	; 53
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	80 7f       	andi	r24, 0xF0	; 240
     e4c:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
     e4e:	a5 e3       	ldi	r26, 0x35	; 53
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e5 e3       	ldi	r30, 0x35	; 53
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	90 81       	ld	r25, Z
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	89 2b       	or	r24, r25
     e5c:	8c 93       	st	X, r24
     e5e:	11 c0       	rjmp	.+34     	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
     e60:	a2 e3       	ldi	r26, 0x32	; 50
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e2 e3       	ldi	r30, 0x32	; 50
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 7f       	andi	r24, 0xF0	; 240
     e6c:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
     e6e:	a2 e3       	ldi	r26, 0x32	; 50
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e2 e3       	ldi	r30, 0x32	; 50
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	90 81       	ld	r25, Z
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	89 2b       	or	r24, r25
     e7c:	8c 93       	st	X, r24
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
     e80:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     e82:	89 81       	ldd	r24, Y+1	; 0x01

}
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <EXTI_voidInit>:
/*
 * Breif : This Function Init THE EXTI ( Prebuild Function)
 * Parameters : Nothing
 * return : Nothing
 */
void EXTI_voidInit      ( void ){
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62

				SET_BIT( MCUCR_REG , 0 ); CLR_BIT( MCUCR_REG , 1 );

			#elif     EXTI_SENSE_MODE == EXTI_FALLING_EDGE

				CLR_BIT( MCUCR_REG , 0 ); SET_BIT( MCUCR_REG , 1 );
     e9c:	a5 e5       	ldi	r26, 0x55	; 85
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e5 e5       	ldi	r30, 0x55	; 85
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8e 7f       	andi	r24, 0xFE	; 254
     ea8:	8c 93       	st	X, r24
     eaa:	a5 e5       	ldi	r26, 0x55	; 85
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e5 e5       	ldi	r30, 0x55	; 85
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	82 60       	ori	r24, 0x02	; 2
     eb6:	8c 93       	st	X, r24
		
		#endif

	#endif

}
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <EXTI_voidSetSignalLatch>:
 * 	                                    2-  ON_CHANGE
 * 	                                    3-  FALLING_EDGE
 * 	                                    4-  RISING_EDGE
 * 	 output: Error status with type u8
 * 	*/
void EXTI_voidSetSignalLatch    ( u8 Copy_u8SenseMode , u8 Copy_u8Line ){
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <EXTI_voidSetSignalLatch+0x6>
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <EXTI_voidSetSignalLatch+0x8>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <EXTI_voidSetSignalLatch+0xa>
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	6a 83       	std	Y+2, r22	; 0x02

	/* For EXTI0 & EXTI1 */
	if( Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1 ){
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	86 30       	cpi	r24, 0x06	; 6
     ed4:	08 f4       	brcc	.+2      	; 0xed8 <EXTI_voidSetSignalLatch+0x1a>
     ed6:	d4 c0       	rjmp	.+424    	; 0x1080 <EXTI_voidSetSignalLatch+0x1c2>
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 30       	cpi	r24, 0x08	; 8
     edc:	08 f0       	brcs	.+2      	; 0xee0 <EXTI_voidSetSignalLatch+0x22>
     ede:	d0 c0       	rjmp	.+416    	; 0x1080 <EXTI_voidSetSignalLatch+0x1c2>

		Copy_u8Line = ( 6 - Copy_u8Line ) * -2 ;
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	06 97       	sbiw	r24, 0x06	; 6
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	8a 83       	std	Y+2, r24	; 0x02

		switch( Copy_u8SenseMode ){
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3e 83       	std	Y+6, r19	; 0x06
     ef6:	2d 83       	std	Y+5, r18	; 0x05
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	9e 81       	ldd	r25, Y+6	; 0x06
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <EXTI_voidSetSignalLatch+0x46>
     f02:	95 c0       	rjmp	.+298    	; 0x102e <EXTI_voidSetSignalLatch+0x170>
     f04:	2d 81       	ldd	r18, Y+5	; 0x05
     f06:	3e 81       	ldd	r19, Y+6	; 0x06
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	34 f4       	brge	.+12     	; 0xf1a <EXTI_voidSetSignalLatch+0x5c>
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	09 f4       	brne	.+2      	; 0xf18 <EXTI_voidSetSignalLatch+0x5a>
     f16:	61 c0       	rjmp	.+194    	; 0xfda <EXTI_voidSetSignalLatch+0x11c>
     f18:	d1 c0       	rjmp	.+418    	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
     f1a:	2d 81       	ldd	r18, Y+5	; 0x05
     f1c:	3e 81       	ldd	r19, Y+6	; 0x06
     f1e:	22 30       	cpi	r18, 0x02	; 2
     f20:	31 05       	cpc	r19, r1
     f22:	31 f0       	breq	.+12     	; 0xf30 <EXTI_voidSetSignalLatch+0x72>
     f24:	8d 81       	ldd	r24, Y+5	; 0x05
     f26:	9e 81       	ldd	r25, Y+6	; 0x06
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	61 f1       	breq	.+88     	; 0xf86 <EXTI_voidSetSignalLatch+0xc8>
     f2e:	c6 c0       	rjmp	.+396    	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>

		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_LOW_LEVEL    : CLR_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
     f30:	a5 e5       	ldi	r26, 0x55	; 85
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e5 e5       	ldi	r30, 0x55	; 85
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <EXTI_voidSetSignalLatch+0x8e>
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	2a 95       	dec	r18
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <EXTI_voidSetSignalLatch+0x8a>
     f50:	80 95       	com	r24
     f52:	84 23       	and	r24, r20
     f54:	8c 93       	st	X, r24
     f56:	a5 e5       	ldi	r26, 0x55	; 85
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e5 e5       	ldi	r30, 0x55	; 85
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9c 01       	movw	r18, r24
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <EXTI_voidSetSignalLatch+0xbc>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <EXTI_voidSetSignalLatch+0xb8>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	9b c0       	rjmp	.+310    	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
		case EXTI_ON_CHANGE    : SET_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
     f86:	a5 e5       	ldi	r26, 0x55	; 85
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e5       	ldi	r30, 0x55	; 85
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <EXTI_voidSetSignalLatch+0xe4>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	2a 95       	dec	r18
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <EXTI_voidSetSignalLatch+0xe0>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	a5 e5       	ldi	r26, 0x55	; 85
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e5 e5       	ldi	r30, 0x55	; 85
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	88 2f       	mov	r24, r24
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 01       	movw	r18, r24
     fbe:	2f 5f       	subi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <EXTI_voidSetSignalLatch+0x110>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <EXTI_voidSetSignalLatch+0x10c>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	71 c0       	rjmp	.+226    	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
     fda:	a5 e5       	ldi	r26, 0x55	; 85
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e5       	ldi	r30, 0x55	; 85
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <EXTI_voidSetSignalLatch+0x138>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	2a 95       	dec	r18
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <EXTI_voidSetSignalLatch+0x134>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	a5 e5       	ldi	r26, 0x55	; 85
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e5       	ldi	r30, 0x55	; 85
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9c 01       	movw	r18, r24
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <EXTI_voidSetSignalLatch+0x166>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <EXTI_voidSetSignalLatch+0x162>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	47 c0       	rjmp	.+142    	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
		case EXTI_RISING_EDGE  : SET_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 c0       	rjmp	.+4      	; 0x104a <EXTI_voidSetSignalLatch+0x18c>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	2a 95       	dec	r18
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <EXTI_voidSetSignalLatch+0x188>
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	a5 e5       	ldi	r26, 0x55	; 85
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e5       	ldi	r30, 0x55	; 85
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 01       	movw	r18, r24
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <EXTI_voidSetSignalLatch+0x1b8>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <EXTI_voidSetSignalLatch+0x1b4>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	1e c0       	rjmp	.+60     	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
	}

	/* For EXTI2 */
	else{

		switch( Copy_u8SenseMode ){
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	3c 83       	std	Y+4, r19	; 0x04
    1088:	2b 83       	std	Y+3, r18	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	31 f0       	breq	.+12     	; 0x109e <EXTI_voidSetSignalLatch+0x1e0>
    1092:	2b 81       	ldd	r18, Y+3	; 0x03
    1094:	3c 81       	ldd	r19, Y+4	; 0x04
    1096:	21 30       	cpi	r18, 0x01	; 1
    1098:	31 05       	cpc	r19, r1
    109a:	49 f0       	breq	.+18     	; 0x10ae <EXTI_voidSetSignalLatch+0x1f0>
    109c:	0f c0       	rjmp	.+30     	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
		
		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCSR_REG , 6 );  break;
    109e:	a4 e5       	ldi	r26, 0x54	; 84
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e4 e5       	ldi	r30, 0x54	; 84
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	8c 93       	st	X, r24
    10ac:	07 c0       	rjmp	.+14     	; 0x10bc <EXTI_voidSetSignalLatch+0x1fe>
		case EXTI_RISING_EDGE  : SET_BIT( MCUCSR_REG , 6 );  break;
    10ae:	a4 e5       	ldi	r26, 0x54	; 84
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e4 e5       	ldi	r30, 0x54	; 84
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	80 64       	ori	r24, 0x40	; 64
    10ba:	8c 93       	st	X, r24

		}

	}

}
    10bc:	26 96       	adiw	r28, 0x06	; 6
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <EXTI_voidDisableInterrupt>:

u8 EXTI_voidDisableInterrupt   ( u8 Copy_u8Line ){
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <EXTI_voidDisableInterrupt+0x6>
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState = OK ;
    10da:	19 82       	std	Y+1, r1	; 0x01
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	85 30       	cpi	r24, 0x05	; 5
    10e0:	c0 f0       	brcs	.+48     	; 0x1112 <EXTI_voidDisableInterrupt+0x44>
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	88 30       	cpi	r24, 0x08	; 8
    10e6:	a8 f4       	brcc	.+42     	; 0x1112 <EXTI_voidDisableInterrupt+0x44>
	{
		/* Clear The Required BIT */
		CLR_BIT( GICR_REG , Copy_u8Line );
    10e8:	ab e5       	ldi	r26, 0x5B	; 91
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	eb e5       	ldi	r30, 0x5B	; 91
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <EXTI_voidDisableInterrupt+0x38>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <EXTI_voidDisableInterrupt+0x34>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <EXTI_voidDisableInterrupt+0x48>
	}
	else 
	{
		Local_u8ErrorState = NOK ;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState ;
    1116:	89 81       	ldd	r24, Y+1	; 0x01

}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <EXTI_voidEnableInterrupt>:

u8 EXTI_voidEnableInterrupt    ( u8 Copy_u8Line ){
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <EXTI_voidEnableInterrupt+0x6>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ErrorState = OK ;
    112e:	19 82       	std	Y+1, r1	; 0x01
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	85 30       	cpi	r24, 0x05	; 5
    1134:	b8 f0       	brcs	.+46     	; 0x1164 <EXTI_voidEnableInterrupt+0x42>
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	a0 f4       	brcc	.+40     	; 0x1164 <EXTI_voidEnableInterrupt+0x42>
	{
		/* Set The Required BIT */
		SET_BIT( GICR_REG , Copy_u8Line );
    113c:	ab e5       	ldi	r26, 0x5B	; 91
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	eb e5       	ldi	r30, 0x5B	; 91
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <EXTI_voidEnableInterrupt+0x38>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <EXTI_voidEnableInterrupt+0x34>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <EXTI_voidEnableInterrupt+0x46>
	}
	else 
	{
		Local_u8ErrorState = NOK ;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState ;
    1168:	89 81       	ldd	r24, Y+1	; 0x01

}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <EXTI_voidClearFlag>:

void EXTI_voidClearFlag ( u8 Copy_u8Line ){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT( GIFR_REG , Copy_u8Line );
    1180:	aa e5       	ldi	r26, 0x5A	; 90
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	ea e5       	ldi	r30, 0x5A	; 90
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <EXTI_voidClearFlag+0x2a>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <EXTI_voidClearFlag+0x26>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24

}
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <EXTI_u8GetFlag>:

u8 EXTI_u8GetFlag( u8 Copy_u8Line ){
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	0f 92       	push	r0
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	89 83       	std	Y+1, r24	; 0x01

	return GET_BIT( GIFR_REG , Copy_u8Line );
    11ba:	ea e5       	ldi	r30, 0x5A	; 90
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <EXTI_u8GetFlag+0x26>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	2a 95       	dec	r18
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <EXTI_u8GetFlag+0x22>
    11d8:	9a 01       	movw	r18, r20
    11da:	28 23       	and	r18, r24
    11dc:	39 23       	and	r19, r25
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <EXTI_u8GetFlag+0x3e>
    11e8:	55 95       	asr	r21
    11ea:	47 95       	ror	r20
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <EXTI_u8GetFlag+0x3a>
    11f0:	ca 01       	movw	r24, r20

}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <EXTI_voidSetCallBack>:
 * Parameters : 
				=> The Adress of ISR Func (its name)
				=> EXTI Line --> [EXTI_LINE0 , EXTI_LINE1 , EXTI_LINE2]
 * return : Nothing
 */
void EXTI_voidSetCallBack( void (*Copy_pvoidCallBack)(void) , u8 Copy_u8EXTILine ){
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_voidSetCallBack+0x6>
    1200:	0f 92       	push	r0
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6b 83       	std	Y+3, r22	; 0x03

	if( Copy_pvoidCallBack != NULL ){
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	61 f0       	breq	.+24     	; 0x122c <EXTI_voidSetCallBack+0x32>

		EXTI_CallBack[Copy_u8EXTILine] = Copy_pvoidCallBack ;
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	88 2f       	mov	r24, r24
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	fc 01       	movw	r30, r24
    1220:	ea 59       	subi	r30, 0x9A	; 154
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	9a 81       	ldd	r25, Y+2	; 0x02
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24

	}

}
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <__vector_1>:


/* ISR --> Implementation */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62

	if( EXTI_CallBack[0] != NULL ){
    1262:	80 91 66 00 	lds	r24, 0x0066
    1266:	90 91 67 00 	lds	r25, 0x0067
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	41 f0       	breq	.+16     	; 0x127e <__vector_1+0x46>

		EXTI_CallBack[0](); /*  Call The Global Pointer to Func   */
    126e:	e0 91 66 00 	lds	r30, 0x0066
    1272:	f0 91 67 00 	lds	r31, 0x0067
    1276:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE0 );
    1278:	86 e0       	ldi	r24, 0x06	; 6
    127a:	0e 94 ba 08 	call	0x1174	; 0x1174 <EXTI_voidClearFlag>

	}

}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	0f 90       	pop	r0
    12a0:	1f 90       	pop	r1
    12a2:	18 95       	reti

000012a4 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    12a4:	1f 92       	push	r1
    12a6:	0f 92       	push	r0
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62

	if( EXTI_CallBack[1] != NULL ){
    12ce:	80 91 68 00 	lds	r24, 0x0068
    12d2:	90 91 69 00 	lds	r25, 0x0069
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	41 f0       	breq	.+16     	; 0x12ea <__vector_2+0x46>

		EXTI_CallBack[1]();
    12da:	e0 91 68 00 	lds	r30, 0x0068
    12de:	f0 91 69 00 	lds	r31, 0x0069
    12e2:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE1 );
    12e4:	87 e0       	ldi	r24, 0x07	; 7
    12e6:	0e 94 ba 08 	call	0x1174	; 0x1174 <EXTI_voidClearFlag>

	}

}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	df 93       	push	r29
    1334:	cf 93       	push	r28
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62

	if( EXTI_CallBack[2] != NULL ){
    133a:	80 91 6a 00 	lds	r24, 0x006A
    133e:	90 91 6b 00 	lds	r25, 0x006B
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	41 f0       	breq	.+16     	; 0x1356 <__vector_3+0x46>

		EXTI_CallBack[2]();
    1346:	e0 91 6a 00 	lds	r30, 0x006A
    134a:	f0 91 6b 00 	lds	r31, 0x006B
    134e:	09 95       	icall
		EXTI_voidClearFlag( EXTI_LINE2 );
    1350:	85 e0       	ldi	r24, 0x05	; 5
    1352:	0e 94 ba 08 	call	0x1174	; 0x1174 <EXTI_voidClearFlag>

	}

}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <GIE_VoidEnable>:
 * Breif : This Function used to enable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidEnable (void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (SREG , SREG_I) ;
    1384:	af e5       	ldi	r26, 0x5F	; 95
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ef e5       	ldi	r30, 0x5F	; 95
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	80 68       	ori	r24, 0x80	; 128
    1390:	8c 93       	st	X, r24
}
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GIE_VoidDisable>:
 * Breif : This Function used to disable General Interrupt Enable (GIE)
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidDisable (void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT (SREG , SREG_I) ;
    13a0:	af e5       	ldi	r26, 0x5F	; 95
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ef e5       	ldi	r30, 0x5F	; 95
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 77       	andi	r24, 0x7F	; 127
    13ac:	8c 93       	st	X, r24
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED )
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <LED_voidInit+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	69 83       	std	Y+1, r22	; 0x01
    13c2:	7a 83       	std	Y+2, r23	; 0x02
    13c4:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED.Port , LED.Pin , DIO_PIN_OUTPUT );
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	69 2f       	mov	r22, r25
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPinDirection>
	
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED )
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <LED_voidOn+0x6>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	69 83       	std	Y+1, r22	; 0x01
    13ec:	7a 83       	std	Y+2, r23	; 0x02
    13ee:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED.Active_State == ACTIVE_HIGH ){
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	39 f4       	brne	.+14     	; 0x1404 <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_HIGH );
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	69 2f       	mov	r22, r25
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <LED_voidOn+0x38>
		
	}else if( LED.Active_State == ACTIVE_LOW ){
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	88 23       	and	r24, r24
    1408:	31 f4       	brne	.+12     	; 0x1416 <LED_voidOn+0x38>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_LOW  );
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	69 2f       	mov	r22, r25
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
		
	}
	
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED )
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <LED_voidOff+0x6>
    1428:	0f 92       	push	r0
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	69 83       	std	Y+1, r22	; 0x01
    1430:	7a 83       	std	Y+2, r23	; 0x02
    1432:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED.Active_State == ACTIVE_HIGH ){
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	39 f4       	brne	.+14     	; 0x1448 <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_LOW  );
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	69 2f       	mov	r22, r25
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
    1446:	09 c0       	rjmp	.+18     	; 0x145a <LED_voidOff+0x38>
		
	}else if( LED.Active_State == ACTIVE_LOW ){
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 23       	and	r24, r24
    144c:	31 f4       	brne	.+12     	; 0x145a <LED_voidOff+0x38>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_HIGH  );
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	69 2f       	mov	r22, r25
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 58 01 	call	0x2b0	; 0x2b0 <DIO_enumSetPinValue>
		
	}
	
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED )
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	00 d0       	rcall	.+0      	; 0x146c <LED_voidToggle+0x6>
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED.Port , LED.Pin );
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	9a 81       	ldd	r25, Y+2	; 0x02
    147c:	69 2f       	mov	r22, r25
    147e:	0e 94 2c 03 	call	0x658	; 0x658 <DIO_enumTogglePinValue>
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <TIMER0_voidInit>:
static void (*TIMERS_pvCallBackFunc[16])(void) = {NULL} ;  /* we have 8 interrupt sources in timer  */


/*******************************************************************************************************************/
void TIMER0_voidInit(void)
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
	/*Set Configurable Modes*/
		#if TIMER0_WAVEFORM_GENERATION_MODE == TIMER_NORMAL_MODE

			/*Initialize Waveform Generation Mode as Normal Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1496:	a3 e5       	ldi	r26, 0x53	; 83
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e3 e5       	ldi	r30, 0x53	; 83
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 7b       	andi	r24, 0xBF	; 191
    14a2:	8c 93       	st	X, r24
			CLR_BIT(TCCR0 , TCCR0_WGM01) ;
    14a4:	a3 e5       	ldi	r26, 0x53	; 83
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e3 e5       	ldi	r30, 0x53	; 83
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	87 7f       	andi	r24, 0xF7	; 247
    14b0:	8c 93       	st	X, r24

			/*Set the Required Preload Value*/
			TCNT0 = TIMER0_PRELOAD_VAL ;
    14b2:	e2 e5       	ldi	r30, 0x52	; 82
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 ec       	ldi	r24, 0xC0	; 192
    14b8:	80 83       	st	Z, r24

			/*Timer0 Overflow Interrupt Enable*/
			#if TIMER0_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE0) ;
			#elif TIMER0_OVERFLOW_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_TOIE0) ;
    14ba:	a9 e5       	ldi	r26, 0x59	; 89
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e9 e5       	ldi	r30, 0x59	; 89
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	8c 93       	st	X, r24
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    14c8:	a3 e5       	ldi	r26, 0x53	; 83
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e3 e5       	ldi	r30, 0x53	; 83
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	88 7f       	andi	r24, 0xF8	; 248
    14d4:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALER ;
    14d6:	a3 e5       	ldi	r26, 0x53	; 83
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e3 e5       	ldi	r30, 0x53	; 83
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	82 60       	ori	r24, 0x02	; 2
    14e2:	8c 93       	st	X, r24
}
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	08 95       	ret

000014ea <TIMER1_voidInit>:

void TIMER1_voidInit(void)
{
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    14f2:	af e4       	ldi	r26, 0x4F	; 79
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	ef e4       	ldi	r30, 0x4F	; 79
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8e 7f       	andi	r24, 0xFE	; 254
    14fe:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1500:	af e4       	ldi	r26, 0x4F	; 79
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ef e4       	ldi	r30, 0x4F	; 79
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	82 60       	ori	r24, 0x02	; 2
    150c:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    150e:	ae e4       	ldi	r26, 0x4E	; 78
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ee e4       	ldi	r30, 0x4E	; 78
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	88 60       	ori	r24, 0x08	; 8
    151a:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    151c:	ae e4       	ldi	r26, 0x4E	; 78
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ee e4       	ldi	r30, 0x4E	; 78
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	80 61       	ori	r24, 0x10	; 16
    1528:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    152a:	ea e4       	ldi	r30, 0x4A	; 74
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	84 ef       	ldi	r24, 0xF4	; 244
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
			OCR1B = TIMER1_CTCB_VAL ;
    1536:	e8 e4       	ldi	r30, 0x48	; 72
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	11 82       	std	Z+1, r1	; 0x01
    153c:	10 82       	st	Z, r1

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    153e:	e6 e4       	ldi	r30, 0x46	; 70
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 e2       	ldi	r24, 0x20	; 32
    1544:	9e e4       	ldi	r25, 0x4E	; 78
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 64       	ori	r24, 0x40	; 64
    1556:	8c 93       	st	X, r24
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1558:	af e4       	ldi	r26, 0x4F	; 79
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ef e4       	ldi	r30, 0x4F	; 79
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8f 7b       	andi	r24, 0xBF	; 191
    1564:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1566:	af e4       	ldi	r26, 0x4F	; 79
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ef e4       	ldi	r30, 0x4F	; 79
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	8c 93       	st	X, r24
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1574:	af e4       	ldi	r26, 0x4F	; 79
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8f 7e       	andi	r24, 0xEF	; 239
    1580:	8c 93       	st	X, r24
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1582:	af e4       	ldi	r26, 0x4F	; 79
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	80 62       	ori	r24, 0x20	; 32
    158e:	8c 93       	st	X, r24
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1590:	a9 e5       	ldi	r26, 0x59	; 89
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e9 e5       	ldi	r30, 0x59	; 89
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8b 7f       	andi	r24, 0xFB	; 251
    159c:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    159e:	a9 e5       	ldi	r26, 0x59	; 89
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e9 e5       	ldi	r30, 0x59	; 89
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	8f 7e       	andi	r24, 0xEF	; 239
    15aa:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    15ac:	a9 e5       	ldi	r26, 0x59	; 89
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e9 e5       	ldi	r30, 0x59	; 89
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	87 7f       	andi	r24, 0xF7	; 247
    15b8:	8c 93       	st	X, r24
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    15ba:	a9 e5       	ldi	r26, 0x59	; 89
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 e5       	ldi	r30, 0x59	; 89
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 7d       	andi	r24, 0xDF	; 223
    15c6:	8c 93       	st	X, r24
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    15c8:	ae e4       	ldi	r26, 0x4E	; 78
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ee e4       	ldi	r30, 0x4E	; 78
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	88 7f       	andi	r24, 0xF8	; 248
    15d4:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_PRESCALER ;
    15d6:	ae e4       	ldi	r26, 0x4E	; 78
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ee e4       	ldi	r30, 0x4E	; 78
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	8c 93       	st	X, r24


}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    15f2:	a5 e4       	ldi	r26, 0x45	; 69
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e4       	ldi	r30, 0x45	; 69
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 7b       	andi	r24, 0xBF	; 191
    15fe:	8c 93       	st	X, r24
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1600:	a5 e4       	ldi	r26, 0x45	; 69
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e4       	ldi	r30, 0x45	; 69
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	88 60       	ori	r24, 0x08	; 8
    160c:	8c 93       	st	X, r24

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    160e:	e3 e4       	ldi	r30, 0x43	; 67
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8d e7       	ldi	r24, 0x7D	; 125
    1614:	80 83       	st	Z, r24

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1616:	a9 e5       	ldi	r26, 0x59	; 89
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e9 e5       	ldi	r30, 0x59	; 89
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	80 68       	ori	r24, 0x80	; 128
    1622:	8c 93       	st	X, r24
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1624:	a5 e4       	ldi	r26, 0x45	; 69
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e4       	ldi	r30, 0x45	; 69
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	88 7f       	andi	r24, 0xF8	; 248
    1630:	8c 93       	st	X, r24
	TCCR2 |= TIMER2_PRESCALER ;
    1632:	a5 e4       	ldi	r26, 0x45	; 69
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e4       	ldi	r30, 0x45	; 69
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	83 60       	ori	r24, 0x03	; 3
    163e:	8c 93       	st	X, r24
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload ;
    1652:	e2 e5       	ldi	r30, 0x52	; 82
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 83       	st	Z, r24
}
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <TIMER1_voidSetPreload+0x6>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Preload ;
    1670:	ec e4       	ldi	r30, 0x4C	; 76
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	0f 92       	push	r0
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = Copy_u8Preload ;
    1692:	e4 e4       	ldi	r30, 0x44	; 68
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	80 83       	st	Z, r24
}
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8CTC ;
    16ae:	ec e5       	ldi	r30, 0x5C	; 92
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	80 83       	st	Z, r24
}
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <TIMER1_voidSetCTCA+0x6>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    16ca:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CTCA ;
    16cc:	ea e4       	ldi	r30, 0x4A	; 74
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <TIMER1_voidSetCTCB+0x6>
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	9a 83       	std	Y+2, r25	; 0x02
    16ee:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CTCB ;
    16f0:	e8 e4       	ldi	r30, 0x48	; 72
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	0f 92       	push	r0
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8CTC ;
    1712:	e3 e4       	ldi	r30, 0x43	; 67
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	80 83       	st	Z, r24
}
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	00 d0       	rcall	.+0      	; 0x1728 <TIMER1_voidSetICR1+0x6>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16ICR1 ;
    1730:	e6 e4       	ldi	r30, 0x46	; 70
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
}
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	return TCNT0 ;
    174e:	e2 e5       	ldi	r30, 0x52	; 82
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
}
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	return TCNT1 ;
    1762:	ec e4       	ldi	r30, 0x4C	; 76
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	91 81       	ldd	r25, Z+1	; 0x01
}
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	return TCNT2 ;
    1778:	e4 e4       	ldi	r30, 0x44	; 68
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
}
    177e:	cf 91       	pop	r28
    1780:	df 91       	pop	r29
    1782:	08 95       	ret

00001784 <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	00 d0       	rcall	.+0      	; 0x178a <TIMER_voidSetPWM+0x6>
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareValue;
    1792:	ea e4       	ldi	r30, 0x4A	; 74
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	9a 81       	ldd	r25, Y+2	; 0x02
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	80 83       	st	Z, r24
}
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <TIMER_voidICUInitEnable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Hint : This func for initial state of trigger (prebuild)
*/
void TIMER_voidICUInitEnable(void)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    17b0:	ae e4       	ldi	r26, 0x4E	; 78
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ee e4       	ldi	r30, 0x4E	; 78
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 64       	ori	r24, 0x40	; 64
    17bc:	8c 93       	st	X, r24
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    17be:	a9 e5       	ldi	r26, 0x59	; 89
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e9 e5       	ldi	r30, 0x59	; 89
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	8c 93       	st	X, r24
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <TIMER_voidICUSetTriggerEdge>:
	Options :-
	 1- TIMER_u8_ICP_RAISING_EDGE
	 2- TIMER_u8_ICP_FALLING_EDGE
*/
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <TIMER_voidICUSetTriggerEdge+0x6>
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK ;
    17de:	19 82       	std	Y+1, r1	; 0x01
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	41 f4       	brne	.+16     	; 0x17f6 <TIMER_voidICUSetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    17e6:	ae e4       	ldi	r26, 0x4E	; 78
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ee e4       	ldi	r30, 0x4E	; 78
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8c 93       	st	X, r24
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	88 23       	and	r24, r24
    17fa:	41 f4       	brne	.+16     	; 0x180c <TIMER_voidICUSetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    17fc:	ae e4       	ldi	r26, 0x4E	; 78
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	ee e4       	ldi	r30, 0x4E	; 78
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8f 7b       	andi	r24, 0xBF	; 191
    1808:	8c 93       	st	X, r24
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <TIMER_voidICUSetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus = NOK ;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1810:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1824:	a9 e5       	ldi	r26, 0x59	; 89
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e9 e5       	ldi	r30, 0x59	; 89
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 62       	ori	r24, 0x20	; 32
    1830:	8c 93       	st	X, r24
}
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <TIMER_voidICUDisableInterrupt>:


//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1840:	a9 e5       	ldi	r26, 0x59	; 89
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e9 e5       	ldi	r30, 0x59	; 89
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8f 7d       	andi	r24, 0xDF	; 223
    184c:	8c 93       	st	X, r24
}
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    185c:	e6 e4       	ldi	r30, 0x46	; 70
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <TIMER_voidWDTSleep>:
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1872:	a1 e4       	ldi	r26, 0x41	; 65
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e1 e4       	ldi	r30, 0x41	; 65
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	88 7f       	andi	r24, 0xF8	; 248
    187e:	8c 93       	st	X, r24
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1880:	a1 e4       	ldi	r26, 0x41	; 65
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e1 e4       	ldi	r30, 0x41	; 65
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	86 60       	ori	r24, 0x06	; 6
    188c:	8c 93       	st	X, r24
}
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT (WDTCR , WDTCR_WDE);
    189c:	a1 e4       	ldi	r26, 0x41	; 65
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e1 e4       	ldi	r30, 0x41	; 65
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 60       	ori	r24, 0x08	; 8
    18a8:	8c 93       	st	X, r24
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <TIMER_voidWDTDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    18b8:	a1 e4       	ldi	r26, 0x41	; 65
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e1 e4       	ldi	r30, 0x41	; 65
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	88 61       	ori	r24, 0x18	; 24
    18c4:	8c 93       	st	X, r24
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    18c6:	e1 e4       	ldi	r30, 0x41	; 65
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <TIMER_u8SetCallBack>:

//----------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <TIMER_u8SetCallBack+0x6>
    18d8:	00 d0       	rcall	.+0      	; 0x18da <TIMER_u8SetCallBack+0x8>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9b 83       	std	Y+3, r25	; 0x03
    18e0:	8a 83       	std	Y+2, r24	; 0x02
    18e2:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = OK ;
    18e4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pvCallBackFunc != NULL)
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f0       	breq	.+26     	; 0x1908 <TIMER_u8SetCallBack+0x36>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	fc 01       	movw	r30, r24
    18fa:	e4 59       	subi	r30, 0x94	; 148
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	9b 81       	ldd	r25, Y+3	; 0x03
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	02 c0       	rjmp	.+4      	; 0x190c <TIMER_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER ;
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    190c:	89 81       	ldd	r24, Y+1	; 0x01
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    191c:	1f 92       	push	r1
    191e:	0f 92       	push	r0
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	0f 92       	push	r0
    1924:	11 24       	eor	r1, r1
    1926:	2f 93       	push	r18
    1928:	3f 93       	push	r19
    192a:	4f 93       	push	r20
    192c:	5f 93       	push	r21
    192e:	6f 93       	push	r22
    1930:	7f 93       	push	r23
    1932:	8f 93       	push	r24
    1934:	9f 93       	push	r25
    1936:	af 93       	push	r26
    1938:	bf 93       	push	r27
    193a:	ef 93       	push	r30
    193c:	ff 93       	push	r31
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1946:	80 91 82 00 	lds	r24, 0x0082
    194a:	90 91 83 00 	lds	r25, 0x0083
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	29 f0       	breq	.+10     	; 0x195c <__vector_11+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1952:	e0 91 82 00 	lds	r30, 0x0082
    1956:	f0 91 83 00 	lds	r31, 0x0083
    195a:	09 95       	icall
	}
}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	ff 91       	pop	r31
    1962:	ef 91       	pop	r30
    1964:	bf 91       	pop	r27
    1966:	af 91       	pop	r26
    1968:	9f 91       	pop	r25
    196a:	8f 91       	pop	r24
    196c:	7f 91       	pop	r23
    196e:	6f 91       	pop	r22
    1970:	5f 91       	pop	r21
    1972:	4f 91       	pop	r20
    1974:	3f 91       	pop	r19
    1976:	2f 91       	pop	r18
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1982:	1f 92       	push	r1
    1984:	0f 92       	push	r0
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	0f 92       	push	r0
    198a:	11 24       	eor	r1, r1
    198c:	2f 93       	push	r18
    198e:	3f 93       	push	r19
    1990:	4f 93       	push	r20
    1992:	5f 93       	push	r21
    1994:	6f 93       	push	r22
    1996:	7f 93       	push	r23
    1998:	8f 93       	push	r24
    199a:	9f 93       	push	r25
    199c:	af 93       	push	r26
    199e:	bf 93       	push	r27
    19a0:	ef 93       	push	r30
    19a2:	ff 93       	push	r31
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    19ac:	80 91 80 00 	lds	r24, 0x0080
    19b0:	90 91 81 00 	lds	r25, 0x0081
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	29 f0       	breq	.+10     	; 0x19c2 <__vector_10+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    19b8:	e0 91 80 00 	lds	r30, 0x0080
    19bc:	f0 91 81 00 	lds	r31, 0x0081
    19c0:	09 95       	icall
	}
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	ff 91       	pop	r31
    19c8:	ef 91       	pop	r30
    19ca:	bf 91       	pop	r27
    19cc:	af 91       	pop	r26
    19ce:	9f 91       	pop	r25
    19d0:	8f 91       	pop	r24
    19d2:	7f 91       	pop	r23
    19d4:	6f 91       	pop	r22
    19d6:	5f 91       	pop	r21
    19d8:	4f 91       	pop	r20
    19da:	3f 91       	pop	r19
    19dc:	2f 91       	pop	r18
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	2f 93       	push	r18
    19f4:	3f 93       	push	r19
    19f6:	4f 93       	push	r20
    19f8:	5f 93       	push	r21
    19fa:	6f 93       	push	r22
    19fc:	7f 93       	push	r23
    19fe:	8f 93       	push	r24
    1a00:	9f 93       	push	r25
    1a02:	af 93       	push	r26
    1a04:	bf 93       	push	r27
    1a06:	ef 93       	push	r30
    1a08:	ff 93       	push	r31
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1a12:	80 91 7e 00 	lds	r24, 0x007E
    1a16:	90 91 7f 00 	lds	r25, 0x007F
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	29 f0       	breq	.+10     	; 0x1a28 <__vector_9+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1a1e:	e0 91 7e 00 	lds	r30, 0x007E
    1a22:	f0 91 7f 00 	lds	r31, 0x007F
    1a26:	09 95       	icall
	}
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	7f 91       	pop	r23
    1a3a:	6f 91       	pop	r22
    1a3c:	5f 91       	pop	r21
    1a3e:	4f 91       	pop	r20
    1a40:	3f 91       	pop	r19
    1a42:	2f 91       	pop	r18
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti

00001a4e <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	2f 93       	push	r18
    1a5a:	3f 93       	push	r19
    1a5c:	4f 93       	push	r20
    1a5e:	5f 93       	push	r21
    1a60:	6f 93       	push	r22
    1a62:	7f 93       	push	r23
    1a64:	8f 93       	push	r24
    1a66:	9f 93       	push	r25
    1a68:	af 93       	push	r26
    1a6a:	bf 93       	push	r27
    1a6c:	ef 93       	push	r30
    1a6e:	ff 93       	push	r31
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1a78:	80 91 7c 00 	lds	r24, 0x007C
    1a7c:	90 91 7d 00 	lds	r25, 0x007D
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__vector_8+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1a84:	e0 91 7c 00 	lds	r30, 0x007C
    1a88:	f0 91 7d 00 	lds	r31, 0x007D
    1a8c:	09 95       	icall
	}
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1ab4:	1f 92       	push	r1
    1ab6:	0f 92       	push	r0
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	0f 92       	push	r0
    1abc:	11 24       	eor	r1, r1
    1abe:	2f 93       	push	r18
    1ac0:	3f 93       	push	r19
    1ac2:	4f 93       	push	r20
    1ac4:	5f 93       	push	r21
    1ac6:	6f 93       	push	r22
    1ac8:	7f 93       	push	r23
    1aca:	8f 93       	push	r24
    1acc:	9f 93       	push	r25
    1ace:	af 93       	push	r26
    1ad0:	bf 93       	push	r27
    1ad2:	ef 93       	push	r30
    1ad4:	ff 93       	push	r31
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1ade:	80 91 7a 00 	lds	r24, 0x007A
    1ae2:	90 91 7b 00 	lds	r25, 0x007B
    1ae6:	00 97       	sbiw	r24, 0x00	; 0
    1ae8:	29 f0       	breq	.+10     	; 0x1af4 <__vector_7+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1aea:	e0 91 7a 00 	lds	r30, 0x007A
    1aee:	f0 91 7b 00 	lds	r31, 0x007B
    1af2:	09 95       	icall
	}
}
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	ff 91       	pop	r31
    1afa:	ef 91       	pop	r30
    1afc:	bf 91       	pop	r27
    1afe:	af 91       	pop	r26
    1b00:	9f 91       	pop	r25
    1b02:	8f 91       	pop	r24
    1b04:	7f 91       	pop	r23
    1b06:	6f 91       	pop	r22
    1b08:	5f 91       	pop	r21
    1b0a:	4f 91       	pop	r20
    1b0c:	3f 91       	pop	r19
    1b0e:	2f 91       	pop	r18
    1b10:	0f 90       	pop	r0
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	0f 90       	pop	r0
    1b16:	1f 90       	pop	r1
    1b18:	18 95       	reti

00001b1a <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1b1a:	1f 92       	push	r1
    1b1c:	0f 92       	push	r0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	0f 92       	push	r0
    1b22:	11 24       	eor	r1, r1
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1b44:	80 91 78 00 	lds	r24, 0x0078
    1b48:	90 91 79 00 	lds	r25, 0x0079
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	29 f0       	breq	.+10     	; 0x1b5a <__vector_6+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1b50:	e0 91 78 00 	lds	r30, 0x0078
    1b54:	f0 91 79 00 	lds	r31, 0x0079
    1b58:	09 95       	icall
	}
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	2f 93       	push	r18
    1b8c:	3f 93       	push	r19
    1b8e:	4f 93       	push	r20
    1b90:	5f 93       	push	r21
    1b92:	6f 93       	push	r22
    1b94:	7f 93       	push	r23
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    1b9a:	af 93       	push	r26
    1b9c:	bf 93       	push	r27
    1b9e:	ef 93       	push	r30
    1ba0:	ff 93       	push	r31
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1baa:	80 91 76 00 	lds	r24, 0x0076
    1bae:	90 91 77 00 	lds	r25, 0x0077
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	29 f0       	breq	.+10     	; 0x1bc0 <__vector_5+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1bb6:	e0 91 76 00 	lds	r30, 0x0076
    1bba:	f0 91 77 00 	lds	r31, 0x0077
    1bbe:	09 95       	icall
	}
}
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	ff 91       	pop	r31
    1bc6:	ef 91       	pop	r30
    1bc8:	bf 91       	pop	r27
    1bca:	af 91       	pop	r26
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	7f 91       	pop	r23
    1bd2:	6f 91       	pop	r22
    1bd4:	5f 91       	pop	r21
    1bd6:	4f 91       	pop	r20
    1bd8:	3f 91       	pop	r19
    1bda:	2f 91       	pop	r18
    1bdc:	0f 90       	pop	r0
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	0f 90       	pop	r0
    1be2:	1f 90       	pop	r1
    1be4:	18 95       	reti

00001be6 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1c10:	80 91 74 00 	lds	r24, 0x0074
    1c14:	90 91 75 00 	lds	r25, 0x0075
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	29 f0       	breq	.+10     	; 0x1c26 <__vector_4+0x40>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1c1c:	e0 91 74 00 	lds	r30, 0x0074
    1c20:	f0 91 75 00 	lds	r31, 0x0075
    1c24:	09 95       	icall
	}
}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	bf 91       	pop	r27
    1c30:	af 91       	pop	r26
    1c32:	9f 91       	pop	r25
    1c34:	8f 91       	pop	r24
    1c36:	7f 91       	pop	r23
    1c38:	6f 91       	pop	r22
    1c3a:	5f 91       	pop	r21
    1c3c:	4f 91       	pop	r20
    1c3e:	3f 91       	pop	r19
    1c40:	2f 91       	pop	r18
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <main>:

void LED1_ON ();
void LED2_ON();

void main (void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
	LED_voidInit(LED1);
    1c54:	60 91 60 00 	lds	r22, 0x0060
    1c58:	70 91 61 00 	lds	r23, 0x0061
    1c5c:	80 91 62 00 	lds	r24, 0x0062
    1c60:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LED_voidInit>
	LED_voidInit(LED2);
    1c64:	60 91 63 00 	lds	r22, 0x0063
    1c68:	70 91 64 00 	lds	r23, 0x0064
    1c6c:	80 91 65 00 	lds	r24, 0x0065
    1c70:	0e 94 da 09 	call	0x13b4	; 0x13b4 <LED_voidInit>
	TIMER0_voidInit();
    1c74:	0e 94 47 0a 	call	0x148e	; 0x148e <TIMER0_voidInit>
	TIMER_u8SetCallBack(LED1_ON,10);
    1c78:	87 e4       	ldi	r24, 0x47	; 71
    1c7a:	9e e0       	ldi	r25, 0x0E	; 14
    1c7c:	6a e0       	ldi	r22, 0x0A	; 10
    1c7e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TIMER_u8SetCallBack>
	TIMER_u8SetCallBack(LED2_ON,4);
    1c82:	86 e5       	ldi	r24, 0x56	; 86
    1c84:	9e e0       	ldi	r25, 0x0E	; 14
    1c86:	64 e0       	ldi	r22, 0x04	; 4
    1c88:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <TIMER_u8SetCallBack>
    1c8c:	ff cf       	rjmp	.-2      	; 0x1c8c <main+0x40>

00001c8e <LED1_ON>:
TIMER_u8SetCallBack(LED1_ON,10);
TIMER_u8SetCallBack(LED2_ON,4);
}

void LED1_ON ()
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED1);
    1c96:	60 91 60 00 	lds	r22, 0x0060
    1c9a:	70 91 61 00 	lds	r23, 0x0061
    1c9e:	80 91 62 00 	lds	r24, 0x0062
    1ca2:	0e 94 33 0a 	call	0x1466	; 0x1466 <LED_voidToggle>



}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <LED2_ON>:

void LED2_ON()
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(LED2);
    1cb4:	60 91 63 00 	lds	r22, 0x0063
    1cb8:	70 91 64 00 	lds	r23, 0x0064
    1cbc:	80 91 65 00 	lds	r24, 0x0065
    1cc0:	0e 94 33 0a 	call	0x1466	; 0x1466 <LED_voidToggle>
}
    1cc4:	cf 91       	pop	r28
    1cc6:	df 91       	pop	r29
    1cc8:	08 95       	ret

00001cca <_exit>:
    1cca:	f8 94       	cli

00001ccc <__stop_program>:
    1ccc:	ff cf       	rjmp	.-2      	; 0x1ccc <__stop_program>
