
Controled_LedEnimations_bySW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00002a3c  00002ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000ac  008000ac  00002b1c  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  00002b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ed4  00000000  00000000  00004d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000097c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009928  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a383  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <main>
      8a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	28 97       	sbiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
     b5e:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	84 30       	cpi	r24, 0x04	; 4
     b68:	08 f0       	brcs	.+2      	; 0xb6c <DIO_enumSetPinDirection+0x26>
     b6a:	f1 c0       	rjmp	.+482    	; 0xd4e <DIO_enumSetPinDirection+0x208>
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	88 30       	cpi	r24, 0x08	; 8
     b70:	08 f0       	brcs	.+2      	; 0xb74 <DIO_enumSetPinDirection+0x2e>
     b72:	ed c0       	rjmp	.+474    	; 0xd4e <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <DIO_enumSetPinDirection+0x36>
     b7a:	6f c0       	rjmp	.+222    	; 0xc5a <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     b7c:	8a 81       	ldd	r24, Y+2	; 0x02
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	38 87       	std	Y+8, r19	; 0x08
     b84:	2f 83       	std	Y+7, r18	; 0x07
     b86:	8f 81       	ldd	r24, Y+7	; 0x07
     b88:	98 85       	ldd	r25, Y+8	; 0x08
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	91 05       	cpc	r25, r1
     b8e:	49 f1       	breq	.+82     	; 0xbe2 <DIO_enumSetPinDirection+0x9c>
     b90:	2f 81       	ldd	r18, Y+7	; 0x07
     b92:	38 85       	ldd	r19, Y+8	; 0x08
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	2c f4       	brge	.+10     	; 0xba4 <DIO_enumSetPinDirection+0x5e>
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	61 f0       	breq	.+24     	; 0xbba <DIO_enumSetPinDirection+0x74>
     ba2:	d6 c0       	rjmp	.+428    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     ba4:	2f 81       	ldd	r18, Y+7	; 0x07
     ba6:	38 85       	ldd	r19, Y+8	; 0x08
     ba8:	22 30       	cpi	r18, 0x02	; 2
     baa:	31 05       	cpc	r19, r1
     bac:	71 f1       	breq	.+92     	; 0xc0a <DIO_enumSetPinDirection+0xc4>
     bae:	8f 81       	ldd	r24, Y+7	; 0x07
     bb0:	98 85       	ldd	r25, Y+8	; 0x08
     bb2:	83 30       	cpi	r24, 0x03	; 3
     bb4:	91 05       	cpc	r25, r1
     bb6:	e9 f1       	breq	.+122    	; 0xc32 <DIO_enumSetPinDirection+0xec>
     bb8:	cb c0       	rjmp	.+406    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
     bba:	aa e3       	ldi	r26, 0x3A	; 58
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ea e3       	ldi	r30, 0x3A	; 58
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	02 2e       	mov	r0, r18
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_enumSetPinDirection+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	0a 94       	dec	r0
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_enumSetPinDirection+0x8e>
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	b7 c0       	rjmp	.+366    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <DIO_enumSetPinDirection+0xba>
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <DIO_enumSetPinDirection+0xb6>
     c04:	84 2b       	or	r24, r20
     c06:	8c 93       	st	X, r24
     c08:	a3 c0       	rjmp	.+326    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
     c0a:	a4 e3       	ldi	r26, 0x34	; 52
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e4 e3       	ldi	r30, 0x34	; 52
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	48 2f       	mov	r20, r24
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	28 2f       	mov	r18, r24
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 2e       	mov	r0, r18
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <DIO_enumSetPinDirection+0xe2>
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	0a 94       	dec	r0
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <DIO_enumSetPinDirection+0xde>
     c2c:	84 2b       	or	r24, r20
     c2e:	8c 93       	st	X, r24
     c30:	8f c0       	rjmp	.+286    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
     c32:	a1 e3       	ldi	r26, 0x31	; 49
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e1 e3       	ldi	r30, 0x31	; 49
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	48 2f       	mov	r20, r24
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_enumSetPinDirection+0x10a>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_enumSetPinDirection+0x106>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	7b c0       	rjmp	.+246    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <DIO_enumSetPinDirection+0x11c>
     c60:	74 c0       	rjmp	.+232    	; 0xd4a <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	28 2f       	mov	r18, r24
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	3e 83       	std	Y+6, r19	; 0x06
     c6a:	2d 83       	std	Y+5, r18	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	91 05       	cpc	r25, r1
     c74:	59 f1       	breq	.+86     	; 0xccc <DIO_enumSetPinDirection+0x186>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	2c f4       	brge	.+10     	; 0xc8a <DIO_enumSetPinDirection+0x144>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	69 f0       	breq	.+26     	; 0xca2 <DIO_enumSetPinDirection+0x15c>
     c88:	63 c0       	rjmp	.+198    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
     c8a:	2d 81       	ldd	r18, Y+5	; 0x05
     c8c:	3e 81       	ldd	r19, Y+6	; 0x06
     c8e:	22 30       	cpi	r18, 0x02	; 2
     c90:	31 05       	cpc	r19, r1
     c92:	89 f1       	breq	.+98     	; 0xcf6 <DIO_enumSetPinDirection+0x1b0>
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f4       	brne	.+2      	; 0xca0 <DIO_enumSetPinDirection+0x15a>
     c9e:	40 c0       	rjmp	.+128    	; 0xd20 <DIO_enumSetPinDirection+0x1da>
     ca0:	57 c0       	rjmp	.+174    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8b 81       	ldd	r24, Y+3	; 0x03
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_enumSetPinDirection+0x17a>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_enumSetPinDirection+0x176>
     cc4:	80 95       	com	r24
     cc6:	84 23       	and	r24, r20
     cc8:	8c 93       	st	X, r24
     cca:	42 c0       	rjmp	.+132    	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
     ccc:	a7 e3       	ldi	r26, 0x37	; 55
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e7 e3       	ldi	r30, 0x37	; 55
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	48 2f       	mov	r20, r24
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	02 2e       	mov	r0, r18
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_enumSetPinDirection+0x1a4>
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	0a 94       	dec	r0
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_enumSetPinDirection+0x1a0>
     cee:	80 95       	com	r24
     cf0:	84 23       	and	r24, r20
     cf2:	8c 93       	st	X, r24
     cf4:	2d c0       	rjmp	.+90     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
     cf6:	a4 e3       	ldi	r26, 0x34	; 52
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e4 e3       	ldi	r30, 0x34	; 52
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_enumSetPinDirection+0x1ce>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_enumSetPinDirection+0x1ca>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	18 c0       	rjmp	.+48     	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
     d20:	a1 e3       	ldi	r26, 0x31	; 49
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e1 e3       	ldi	r30, 0x31	; 49
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_enumSetPinDirection+0x1f8>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_enumSetPinDirection+0x1f4>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     d4a:	19 82       	std	Y+1, r1	; 0x01
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     d4e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     d50:	89 81       	ldd	r24, Y+1	; 0x01

}
     d52:	28 96       	adiw	r28, 0x08	; 8
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	cf 91       	pop	r28
     d60:	df 91       	pop	r29
     d62:	08 95       	ret

00000d64 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	6b 83       	std	Y+3, r22	; 0x03
     d7c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	84 30       	cpi	r24, 0x04	; 4
     d86:	08 f0       	brcs	.+2      	; 0xd8a <DIO_enumSetPinValue+0x26>
     d88:	f1 c0       	rjmp	.+482    	; 0xf6c <DIO_enumSetPinValue+0x208>
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	88 30       	cpi	r24, 0x08	; 8
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <DIO_enumSetPinValue+0x2e>
     d90:	ed c0       	rjmp	.+474    	; 0xf6c <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_enumSetPinValue+0x36>
     d98:	6f c0       	rjmp	.+222    	; 0xe78 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	38 87       	std	Y+8, r19	; 0x08
     da2:	2f 83       	std	Y+7, r18	; 0x07
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	91 05       	cpc	r25, r1
     dac:	49 f1       	breq	.+82     	; 0xe00 <DIO_enumSetPinValue+0x9c>
     dae:	2f 81       	ldd	r18, Y+7	; 0x07
     db0:	38 85       	ldd	r19, Y+8	; 0x08
     db2:	22 30       	cpi	r18, 0x02	; 2
     db4:	31 05       	cpc	r19, r1
     db6:	2c f4       	brge	.+10     	; 0xdc2 <DIO_enumSetPinValue+0x5e>
     db8:	8f 81       	ldd	r24, Y+7	; 0x07
     dba:	98 85       	ldd	r25, Y+8	; 0x08
     dbc:	00 97       	sbiw	r24, 0x00	; 0
     dbe:	61 f0       	breq	.+24     	; 0xdd8 <DIO_enumSetPinValue+0x74>
     dc0:	d6 c0       	rjmp	.+428    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     dc2:	2f 81       	ldd	r18, Y+7	; 0x07
     dc4:	38 85       	ldd	r19, Y+8	; 0x08
     dc6:	22 30       	cpi	r18, 0x02	; 2
     dc8:	31 05       	cpc	r19, r1
     dca:	71 f1       	breq	.+92     	; 0xe28 <DIO_enumSetPinValue+0xc4>
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	83 30       	cpi	r24, 0x03	; 3
     dd2:	91 05       	cpc	r25, r1
     dd4:	e9 f1       	breq	.+122    	; 0xe50 <DIO_enumSetPinValue+0xec>
     dd6:	cb c0       	rjmp	.+406    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_enumSetPinValue+0x92>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_enumSetPinValue+0x8e>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	b7 c0       	rjmp	.+366    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
     e00:	a8 e3       	ldi	r26, 0x38	; 56
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e3       	ldi	r30, 0x38	; 56
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	48 2f       	mov	r20, r24
     e0c:	8b 81       	ldd	r24, Y+3	; 0x03
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 2e       	mov	r0, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_enumSetPinValue+0xba>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	0a 94       	dec	r0
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_enumSetPinValue+0xb6>
     e22:	84 2b       	or	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	a3 c0       	rjmp	.+326    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
     e28:	a5 e3       	ldi	r26, 0x35	; 53
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e5 e3       	ldi	r30, 0x35	; 53
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_enumSetPinValue+0xe2>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_enumSetPinValue+0xde>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	8f c0       	rjmp	.+286    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
     e50:	a2 e3       	ldi	r26, 0x32	; 50
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e2 e3       	ldi	r30, 0x32	; 50
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <DIO_enumSetPinValue+0x10a>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <DIO_enumSetPinValue+0x106>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	7b c0       	rjmp	.+246    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	88 23       	and	r24, r24
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_enumSetPinValue+0x11c>
     e7e:	74 c0       	rjmp	.+232    	; 0xf68 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	3e 83       	std	Y+6, r19	; 0x06
     e88:	2d 83       	std	Y+5, r18	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <DIO_enumSetPinValue+0x186>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_enumSetPinValue+0x144>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <DIO_enumSetPinValue+0x15c>
     ea6:	63 c0       	rjmp	.+198    	; 0xf6e <DIO_enumSetPinValue+0x20a>
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <DIO_enumSetPinValue+0x1b0>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_enumSetPinValue+0x15a>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <DIO_enumSetPinValue+0x1da>
     ebe:	57 c0       	rjmp	.+174    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
     ec0:	ab e3       	ldi	r26, 0x3B	; 59
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e3       	ldi	r30, 0x3B	; 59
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_enumSetPinValue+0x17a>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_enumSetPinValue+0x176>
     ee2:	80 95       	com	r24
     ee4:	84 23       	and	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	42 c0       	rjmp	.+132    	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_enumSetPinValue+0x1a4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_enumSetPinValue+0x1a0>
     f0c:	80 95       	com	r24
     f0e:	84 23       	and	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	2d c0       	rjmp	.+90     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
     f14:	a5 e3       	ldi	r26, 0x35	; 53
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e5 e3       	ldi	r30, 0x35	; 53
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_enumSetPinValue+0x1ce>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_enumSetPinValue+0x1ca>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	18 c0       	rjmp	.+48     	; 0xf6e <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
     f3e:	a2 e3       	ldi	r26, 0x32	; 50
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e2 e3       	ldi	r30, 0x32	; 50
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_enumSetPinValue+0x1f8>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_enumSetPinValue+0x1f4>
     f60:	80 95       	com	r24
     f62:	84 23       	and	r24, r20
     f64:	8c 93       	st	X, r24
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
     f68:	19 82       	std	Y+1, r1	; 0x01
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
     f6c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01

}
     f70:	28 96       	adiw	r28, 0x08	; 8
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	27 97       	sbiw	r28, 0x07	; 7
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	6b 83       	std	Y+3, r22	; 0x03
     f9a:	5d 83       	std	Y+5, r21	; 0x05
     f9c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <DIO_enumGetPinValue+0x28>
     fa8:	a6 c0       	rjmp	.+332    	; 0x10f6 <DIO_enumGetPinValue+0x174>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <DIO_enumGetPinValue+0x30>
     fb0:	a2 c0       	rjmp	.+324    	; 0x10f6 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3f 83       	std	Y+7, r19	; 0x07
     fba:	2e 83       	std	Y+6, r18	; 0x06
     fbc:	4e 81       	ldd	r20, Y+6	; 0x06
     fbe:	5f 81       	ldd	r21, Y+7	; 0x07
     fc0:	41 30       	cpi	r20, 0x01	; 1
     fc2:	51 05       	cpc	r21, r1
     fc4:	c1 f1       	breq	.+112    	; 0x1036 <DIO_enumGetPinValue+0xb4>
     fc6:	8e 81       	ldd	r24, Y+6	; 0x06
     fc8:	9f 81       	ldd	r25, Y+7	; 0x07
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	91 05       	cpc	r25, r1
     fce:	34 f4       	brge	.+12     	; 0xfdc <DIO_enumGetPinValue+0x5a>
     fd0:	2e 81       	ldd	r18, Y+6	; 0x06
     fd2:	3f 81       	ldd	r19, Y+7	; 0x07
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	71 f0       	breq	.+28     	; 0xff6 <DIO_enumGetPinValue+0x74>
     fda:	8e c0       	rjmp	.+284    	; 0x10f8 <DIO_enumGetPinValue+0x176>
     fdc:	4e 81       	ldd	r20, Y+6	; 0x06
     fde:	5f 81       	ldd	r21, Y+7	; 0x07
     fe0:	42 30       	cpi	r20, 0x02	; 2
     fe2:	51 05       	cpc	r21, r1
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <DIO_enumGetPinValue+0x66>
     fe6:	47 c0       	rjmp	.+142    	; 0x1076 <DIO_enumGetPinValue+0xf4>
     fe8:	8e 81       	ldd	r24, Y+6	; 0x06
     fea:	9f 81       	ldd	r25, Y+7	; 0x07
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_enumGetPinValue+0x72>
     ff2:	61 c0       	rjmp	.+194    	; 0x10b6 <DIO_enumGetPinValue+0x134>
     ff4:	81 c0       	rjmp	.+258    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
     ff6:	e9 e3       	ldi	r30, 0x39	; 57
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_enumGetPinValue+0x8e>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_enumGetPinValue+0x8a>
    1014:	9a 01       	movw	r18, r20
    1016:	28 23       	and	r18, r24
    1018:	39 23       	and	r19, r25
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	88 2f       	mov	r24, r24
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a9 01       	movw	r20, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_enumGetPinValue+0xa6>
    1024:	55 95       	asr	r21
    1026:	47 95       	ror	r20
    1028:	8a 95       	dec	r24
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_enumGetPinValue+0xa2>
    102c:	ca 01       	movw	r24, r20
    102e:	ec 81       	ldd	r30, Y+4	; 0x04
    1030:	fd 81       	ldd	r31, Y+5	; 0x05
    1032:	80 83       	st	Z, r24
    1034:	61 c0       	rjmp	.+194    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    1036:	e6 e3       	ldi	r30, 0x36	; 54
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_enumGetPinValue+0xce>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	2a 95       	dec	r18
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_enumGetPinValue+0xca>
    1054:	9a 01       	movw	r18, r20
    1056:	28 23       	and	r18, r24
    1058:	39 23       	and	r19, r25
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_enumGetPinValue+0xe6>
    1064:	55 95       	asr	r21
    1066:	47 95       	ror	r20
    1068:	8a 95       	dec	r24
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_enumGetPinValue+0xe2>
    106c:	ca 01       	movw	r24, r20
    106e:	ec 81       	ldd	r30, Y+4	; 0x04
    1070:	fd 81       	ldd	r31, Y+5	; 0x05
    1072:	80 83       	st	Z, r24
    1074:	41 c0       	rjmp	.+130    	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1076:	e3 e3       	ldi	r30, 0x33	; 51
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_enumGetPinValue+0x10e>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	2a 95       	dec	r18
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_enumGetPinValue+0x10a>
    1094:	9a 01       	movw	r18, r20
    1096:	28 23       	and	r18, r24
    1098:	39 23       	and	r19, r25
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_enumGetPinValue+0x126>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_enumGetPinValue+0x122>
    10ac:	ca 01       	movw	r24, r20
    10ae:	ec 81       	ldd	r30, Y+4	; 0x04
    10b0:	fd 81       	ldd	r31, Y+5	; 0x05
    10b2:	80 83       	st	Z, r24
    10b4:	21 c0       	rjmp	.+66     	; 0x10f8 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    10b6:	e0 e3       	ldi	r30, 0x30	; 48
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	50 e0       	ldi	r21, 0x00	; 0
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <DIO_enumGetPinValue+0x14e>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	2a 95       	dec	r18
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <DIO_enumGetPinValue+0x14a>
    10d4:	9a 01       	movw	r18, r20
    10d6:	28 23       	and	r18, r24
    10d8:	39 23       	and	r19, r25
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_enumGetPinValue+0x166>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_enumGetPinValue+0x162>
    10ec:	ca 01       	movw	r24, r20
    10ee:	ec 81       	ldd	r30, Y+4	; 0x04
    10f0:	fd 81       	ldd	r31, Y+5	; 0x05
    10f2:	80 83       	st	Z, r24
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    10f6:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	27 96       	adiw	r28, 0x07	; 7
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	f8 94       	cli
    1100:	de bf       	out	0x3e, r29	; 62
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	08 95       	ret

0000110c <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    110c:	df 93       	push	r29
    110e:	cf 93       	push	r28
    1110:	00 d0       	rcall	.+0      	; 0x1112 <DIO_enumTogglePinValue+0x6>
    1112:	00 d0       	rcall	.+0      	; 0x1114 <DIO_enumTogglePinValue+0x8>
    1114:	0f 92       	push	r0
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	8a 83       	std	Y+2, r24	; 0x02
    111c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 30       	cpi	r24, 0x08	; 8
    1126:	08 f0       	brcs	.+2      	; 0x112a <DIO_enumTogglePinValue+0x1e>
    1128:	6f c0       	rjmp	.+222    	; 0x1208 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3d 83       	std	Y+5, r19	; 0x05
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	49 f1       	breq	.+82     	; 0x1190 <DIO_enumTogglePinValue+0x84>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	2c f4       	brge	.+10     	; 0x1152 <DIO_enumTogglePinValue+0x46>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	61 f0       	breq	.+24     	; 0x1168 <DIO_enumTogglePinValue+0x5c>
    1150:	5c c0       	rjmp	.+184    	; 0x120a <DIO_enumTogglePinValue+0xfe>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	71 f1       	breq	.+92     	; 0x11b8 <DIO_enumTogglePinValue+0xac>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	e9 f1       	breq	.+122    	; 0x11e0 <DIO_enumTogglePinValue+0xd4>
    1166:	51 c0       	rjmp	.+162    	; 0x120a <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    1168:	ab e3       	ldi	r26, 0x3B	; 59
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	eb e3       	ldi	r30, 0x3B	; 59
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	48 2f       	mov	r20, r24
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_enumTogglePinValue+0x7a>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_enumTogglePinValue+0x76>
    118a:	84 27       	eor	r24, r20
    118c:	8c 93       	st	X, r24
    118e:	3d c0       	rjmp	.+122    	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    1190:	a8 e3       	ldi	r26, 0x38	; 56
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e8 e3       	ldi	r30, 0x38	; 56
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_enumTogglePinValue+0xa2>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_enumTogglePinValue+0x9e>
    11b2:	84 27       	eor	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    11b8:	a5 e3       	ldi	r26, 0x35	; 53
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e3       	ldi	r30, 0x35	; 53
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_enumTogglePinValue+0xca>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_enumTogglePinValue+0xc6>
    11da:	84 27       	eor	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	15 c0       	rjmp	.+42     	; 0x120a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    11e0:	a2 e3       	ldi	r26, 0x32	; 50
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e2 e3       	ldi	r30, 0x32	; 50
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_enumTogglePinValue+0xf2>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_enumTogglePinValue+0xee>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	01 c0       	rjmp	.+2      	; 0x120a <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    1208:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_enumConnectPullup+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_enumConnectPullup+0x8>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <DIO_enumConnectPullup+0xa>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
    122e:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	08 f0       	brcs	.+2      	; 0x123c <DIO_enumConnectPullup+0x20>
    123a:	3e c1       	rjmp	.+636    	; 0x14b8 <DIO_enumConnectPullup+0x29c>
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	08 f0       	brcs	.+2      	; 0x1244 <DIO_enumConnectPullup+0x28>
    1242:	3a c1       	rjmp	.+628    	; 0x14b8 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_enumConnectPullup+0x3e>
    1258:	5d c0       	rjmp	.+186    	; 0x1314 <DIO_enumConnectPullup+0xf8>
    125a:	2d 81       	ldd	r18, Y+5	; 0x05
    125c:	3e 81       	ldd	r19, Y+6	; 0x06
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <DIO_enumConnectPullup+0x52>
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	71 f0       	breq	.+28     	; 0x1288 <DIO_enumConnectPullup+0x6c>
    126c:	26 c1       	rjmp	.+588    	; 0x14ba <DIO_enumConnectPullup+0x29e>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_enumConnectPullup+0x5e>
    1278:	93 c0       	rjmp	.+294    	; 0x13a0 <DIO_enumConnectPullup+0x184>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_enumConnectPullup+0x6a>
    1284:	d3 c0       	rjmp	.+422    	; 0x142c <DIO_enumConnectPullup+0x210>
    1286:	19 c1       	rjmp	.+562    	; 0x14ba <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	71 f5       	brne	.+92     	; 0x12ea <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    128e:	a0 e5       	ldi	r26, 0x50	; 80
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e0 e5       	ldi	r30, 0x50	; 80
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8b 7f       	andi	r24, 0xFB	; 251
    129a:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    129c:	aa e3       	ldi	r26, 0x3A	; 58
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ea e3       	ldi	r30, 0x3A	; 58
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	48 2f       	mov	r20, r24
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enumConnectPullup+0x9c>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	2a 95       	dec	r18
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enumConnectPullup+0x98>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enumConnectPullup+0xc4>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_enumConnectPullup+0xc0>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	e8 c0       	rjmp	.+464    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_enumConnectPullup+0xec>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_enumConnectPullup+0xe8>
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8c 93       	st	X, r24
    1312:	d3 c0       	rjmp	.+422    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	71 f5       	brne	.+92     	; 0x1376 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    131a:	a0 e5       	ldi	r26, 0x50	; 80
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e0 e5       	ldi	r30, 0x50	; 80
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8b 7f       	andi	r24, 0xFB	; 251
    1326:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    1328:	a7 e3       	ldi	r26, 0x37	; 55
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e7 e3       	ldi	r30, 0x37	; 55
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_enumConnectPullup+0x128>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	2a 95       	dec	r18
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_enumConnectPullup+0x124>
    1348:	80 95       	com	r24
    134a:	84 23       	and	r24, r20
    134c:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    134e:	a8 e3       	ldi	r26, 0x38	; 56
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_enumConnectPullup+0x150>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_enumConnectPullup+0x14c>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
    1374:	a2 c0       	rjmp	.+324    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_enumConnectPullup+0x178>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_enumConnectPullup+0x174>
    1398:	80 95       	com	r24
    139a:	84 23       	and	r24, r20
    139c:	8c 93       	st	X, r24
    139e:	8d c0       	rjmp	.+282    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	71 f5       	brne	.+92     	; 0x1402 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    13a6:	a0 e5       	ldi	r26, 0x50	; 80
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e0 e5       	ldi	r30, 0x50	; 80
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8b 7f       	andi	r24, 0xFB	; 251
    13b2:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    13b4:	a4 e3       	ldi	r26, 0x34	; 52
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e4 e3       	ldi	r30, 0x34	; 52
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <DIO_enumConnectPullup+0x1b4>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	2a 95       	dec	r18
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <DIO_enumConnectPullup+0x1b0>
    13d4:	80 95       	com	r24
    13d6:	84 23       	and	r24, r20
    13d8:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    13da:	a5 e3       	ldi	r26, 0x35	; 53
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e5 e3       	ldi	r30, 0x35	; 53
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_enumConnectPullup+0x1dc>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_enumConnectPullup+0x1d8>
    13fc:	84 2b       	or	r24, r20
    13fe:	8c 93       	st	X, r24
    1400:	5c c0       	rjmp	.+184    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    1402:	a5 e3       	ldi	r26, 0x35	; 53
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e5 e3       	ldi	r30, 0x35	; 53
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enumConnectPullup+0x204>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enumConnectPullup+0x200>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	47 c0       	rjmp	.+142    	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	71 f5       	brne	.+92     	; 0x148e <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    1432:	a0 e5       	ldi	r26, 0x50	; 80
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e0 e5       	ldi	r30, 0x50	; 80
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8b 7f       	andi	r24, 0xFB	; 251
    143e:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    1440:	a1 e3       	ldi	r26, 0x31	; 49
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e1 e3       	ldi	r30, 0x31	; 49
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enumConnectPullup+0x240>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	2a 95       	dec	r18
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enumConnectPullup+0x23c>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    1466:	a2 e3       	ldi	r26, 0x32	; 50
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e2 e3       	ldi	r30, 0x32	; 50
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_enumConnectPullup+0x268>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_enumConnectPullup+0x264>
    1488:	84 2b       	or	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    148e:	a2 e3       	ldi	r26, 0x32	; 50
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e2 e3       	ldi	r30, 0x32	; 50
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_enumConnectPullup+0x290>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_enumConnectPullup+0x28c>
    14b0:	80 95       	com	r24
    14b2:	84 23       	and	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	01 c0       	rjmp	.+2      	; 0x14ba <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    14b8:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    14ba:	89 81       	ldd	r24, Y+1	; 0x01


}
    14bc:	26 96       	adiw	r28, 0x06	; 6
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_enumSetPortDirection+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_enumSetPortDirection+0x8>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	a8 f5       	brcc	.+106    	; 0x1554 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3d 83       	std	Y+5, r19	; 0x05
    14f2:	2c 83       	std	Y+4, r18	; 0x04
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	9d 81       	ldd	r25, Y+5	; 0x05
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	d1 f0       	breq	.+52     	; 0x1532 <DIO_enumSetPortDirection+0x64>
    14fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1500:	3d 81       	ldd	r19, Y+5	; 0x05
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_enumSetPortDirection+0x44>
    1508:	8c 81       	ldd	r24, Y+4	; 0x04
    150a:	9d 81       	ldd	r25, Y+5	; 0x05
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <DIO_enumSetPortDirection+0x5a>
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <DIO_enumSetPortDirection+0x82>
    1512:	2c 81       	ldd	r18, Y+4	; 0x04
    1514:	3d 81       	ldd	r19, Y+5	; 0x05
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	81 f0       	breq	.+32     	; 0x153c <DIO_enumSetPortDirection+0x6e>
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	81 f0       	breq	.+32     	; 0x1546 <DIO_enumSetPortDirection+0x78>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    1528:	ea e3       	ldi	r30, 0x3A	; 58
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	80 83       	st	Z, r24
    1530:	12 c0       	rjmp	.+36     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    1532:	e7 e3       	ldi	r30, 0x37	; 55
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	80 83       	st	Z, r24
    153a:	0d c0       	rjmp	.+26     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    153c:	e4 e3       	ldi	r30, 0x34	; 52
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	80 83       	st	Z, r24
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    1546:	e1 e3       	ldi	r30, 0x31	; 49
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	80 83       	st	Z, r24
    154e:	03 c0       	rjmp	.+6      	; 0x1556 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    1550:	19 82       	std	Y+1, r1	; 0x01
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1554:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_enumSetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_enumSetPortValue+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	8a 83       	std	Y+2, r24	; 0x02
    1578:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	a8 f5       	brcc	.+106    	; 0x15ee <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	3d 83       	std	Y+5, r19	; 0x05
    158c:	2c 83       	std	Y+4, r18	; 0x04
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	91 05       	cpc	r25, r1
    1596:	d1 f0       	breq	.+52     	; 0x15cc <DIO_enumSetPortValue+0x64>
    1598:	2c 81       	ldd	r18, Y+4	; 0x04
    159a:	3d 81       	ldd	r19, Y+5	; 0x05
    159c:	22 30       	cpi	r18, 0x02	; 2
    159e:	31 05       	cpc	r19, r1
    15a0:	2c f4       	brge	.+10     	; 0x15ac <DIO_enumSetPortValue+0x44>
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	9d 81       	ldd	r25, Y+5	; 0x05
    15a6:	00 97       	sbiw	r24, 0x00	; 0
    15a8:	61 f0       	breq	.+24     	; 0x15c2 <DIO_enumSetPortValue+0x5a>
    15aa:	1f c0       	rjmp	.+62     	; 0x15ea <DIO_enumSetPortValue+0x82>
    15ac:	2c 81       	ldd	r18, Y+4	; 0x04
    15ae:	3d 81       	ldd	r19, Y+5	; 0x05
    15b0:	22 30       	cpi	r18, 0x02	; 2
    15b2:	31 05       	cpc	r19, r1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <DIO_enumSetPortValue+0x6e>
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	81 f0       	breq	.+32     	; 0x15e0 <DIO_enumSetPortValue+0x78>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    15c2:	eb e3       	ldi	r30, 0x3B	; 59
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	80 83       	st	Z, r24
    15ca:	12 c0       	rjmp	.+36     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	80 83       	st	Z, r24
    15d4:	0d c0       	rjmp	.+26     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    15d6:	e5 e3       	ldi	r30, 0x35	; 53
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	80 83       	st	Z, r24
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    15e0:	e2 e3       	ldi	r30, 0x32	; 50
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	80 83       	st	Z, r24
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    15ea:	19 82       	std	Y+1, r1	; 0x01
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    15ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <DIO_enumTogglePortValue+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <DIO_enumTogglePortValue+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	08 f0       	brcs	.+2      	; 0x161c <DIO_enumTogglePortValue+0x1a>
    161a:	3f c0       	rjmp	.+126    	; 0x169a <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3c 83       	std	Y+4, r19	; 0x04
    1624:	2b 83       	std	Y+3, r18	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	91 05       	cpc	r25, r1
    162e:	e9 f0       	breq	.+58     	; 0x166a <DIO_enumTogglePortValue+0x68>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	22 30       	cpi	r18, 0x02	; 2
    1636:	31 05       	cpc	r19, r1
    1638:	2c f4       	brge	.+10     	; 0x1644 <DIO_enumTogglePortValue+0x42>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	61 f0       	breq	.+24     	; 0x165a <DIO_enumTogglePortValue+0x58>
    1642:	2c c0       	rjmp	.+88     	; 0x169c <DIO_enumTogglePortValue+0x9a>
    1644:	2b 81       	ldd	r18, Y+3	; 0x03
    1646:	3c 81       	ldd	r19, Y+4	; 0x04
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	b1 f0       	breq	.+44     	; 0x167a <DIO_enumTogglePortValue+0x78>
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	91 05       	cpc	r25, r1
    1656:	c9 f0       	breq	.+50     	; 0x168a <DIO_enumTogglePortValue+0x88>
    1658:	21 c0       	rjmp	.+66     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    165a:	ab e3       	ldi	r26, 0x3B	; 59
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e3       	ldi	r30, 0x3B	; 59
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 95       	com	r24
    1666:	8c 93       	st	X, r24
    1668:	19 c0       	rjmp	.+50     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    166a:	a8 e3       	ldi	r26, 0x38	; 56
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e8 e3       	ldi	r30, 0x38	; 56
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 95       	com	r24
    1676:	8c 93       	st	X, r24
    1678:	11 c0       	rjmp	.+34     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    167a:	a5 e3       	ldi	r26, 0x35	; 53
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e5 e3       	ldi	r30, 0x35	; 53
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 95       	com	r24
    1686:	8c 93       	st	X, r24
    1688:	09 c0       	rjmp	.+18     	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    168a:	a2 e3       	ldi	r26, 0x32	; 50
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e2 e3       	ldi	r30, 0x32	; 50
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	80 95       	com	r24
    1696:	8c 93       	st	X, r24
    1698:	01 c0       	rjmp	.+2      	; 0x169c <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    169a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	08 95       	ret

000016ac <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <DIO_enumGetPortValue+0x6>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <DIO_enumGetPortValue+0x8>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_enumGetPortValue+0xa>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	7c 83       	std	Y+4, r23	; 0x04
    16be:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	e8 f5       	brcc	.+122    	; 0x1744 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	2d 83       	std	Y+5, r18	; 0x05
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	e1 f0       	breq	.+56     	; 0x1716 <DIO_enumGetPortValue+0x6a>
    16de:	2d 81       	ldd	r18, Y+5	; 0x05
    16e0:	3e 81       	ldd	r19, Y+6	; 0x06
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <DIO_enumGetPortValue+0x46>
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <DIO_enumGetPortValue+0x5c>
    16f0:	27 c0       	rjmp	.+78     	; 0x1740 <DIO_enumGetPortValue+0x94>
    16f2:	2d 81       	ldd	r18, Y+5	; 0x05
    16f4:	3e 81       	ldd	r19, Y+6	; 0x06
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	a1 f0       	breq	.+40     	; 0x1724 <DIO_enumGetPortValue+0x78>
    16fc:	8d 81       	ldd	r24, Y+5	; 0x05
    16fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	b1 f0       	breq	.+44     	; 0x1732 <DIO_enumGetPortValue+0x86>
    1706:	1c c0       	rjmp	.+56     	; 0x1740 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    1708:	e9 e3       	ldi	r30, 0x39	; 57
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	80 83       	st	Z, r24
    1714:	18 c0       	rjmp	.+48     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    1716:	e6 e3       	ldi	r30, 0x36	; 54
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	eb 81       	ldd	r30, Y+3	; 0x03
    171e:	fc 81       	ldd	r31, Y+4	; 0x04
    1720:	80 83       	st	Z, r24
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    1724:	e3 e3       	ldi	r30, 0x33	; 51
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	eb 81       	ldd	r30, Y+3	; 0x03
    172c:	fc 81       	ldd	r31, Y+4	; 0x04
    172e:	80 83       	st	Z, r24
    1730:	0a c0       	rjmp	.+20     	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    1732:	e0 e3       	ldi	r30, 0x30	; 48
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	eb 81       	ldd	r30, Y+3	; 0x03
    173a:	fc 81       	ldd	r31, Y+4	; 0x04
    173c:	80 83       	st	Z, r24
    173e:	03 c0       	rjmp	.+6      	; 0x1746 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    1740:	19 82       	std	Y+1, r1	; 0x01
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    1744:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	26 96       	adiw	r28, 0x06	; 6
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	cf 91       	pop	r28
    1756:	df 91       	pop	r29
    1758:	08 95       	ret

0000175a <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	00 d0       	rcall	.+0      	; 0x1760 <DIO_voidWriteHighNibbles+0x6>
    1760:	00 d0       	rcall	.+0      	; 0x1762 <DIO_voidWriteHighNibbles+0x8>
    1762:	0f 92       	push	r0
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f0       	brcs	.+2      	; 0x1778 <DIO_voidWriteHighNibbles+0x1e>
    1776:	63 c0       	rjmp	.+198    	; 0x183e <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	82 95       	swap	r24
    177c:	80 7f       	andi	r24, 0xF0	; 240
    177e:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	29 f1       	breq	.+74     	; 0x17de <DIO_voidWriteHighNibbles+0x84>
    1794:	2c 81       	ldd	r18, Y+4	; 0x04
    1796:	3d 81       	ldd	r19, Y+5	; 0x05
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_voidWriteHighNibbles+0x4e>
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_voidWriteHighNibbles+0x64>
    17a6:	4c c0       	rjmp	.+152    	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
    17a8:	2c 81       	ldd	r18, Y+4	; 0x04
    17aa:	3d 81       	ldd	r19, Y+5	; 0x05
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	31 f1       	breq	.+76     	; 0x17fe <DIO_voidWriteHighNibbles+0xa4>
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	9d 81       	ldd	r25, Y+5	; 0x05
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	89 f1       	breq	.+98     	; 0x181e <DIO_voidWriteHighNibbles+0xc4>
    17bc:	41 c0       	rjmp	.+130    	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 70       	andi	r24, 0x0F	; 15
    17ca:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    17cc:	ab e3       	ldi	r26, 0x3B	; 59
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	eb e3       	ldi	r30, 0x3B	; 59
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	90 81       	ld	r25, Z
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	89 2b       	or	r24, r25
    17da:	8c 93       	st	X, r24
    17dc:	31 c0       	rjmp	.+98     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    17de:	a8 e3       	ldi	r26, 0x38	; 56
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e8 e3       	ldi	r30, 0x38	; 56
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	8f 70       	andi	r24, 0x0F	; 15
    17ea:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    17ec:	a8 e3       	ldi	r26, 0x38	; 56
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e8 e3       	ldi	r30, 0x38	; 56
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	90 81       	ld	r25, Z
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	89 2b       	or	r24, r25
    17fa:	8c 93       	st	X, r24
    17fc:	21 c0       	rjmp	.+66     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8f 70       	andi	r24, 0x0F	; 15
    180a:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    180c:	a5 e3       	ldi	r26, 0x35	; 53
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e5 e3       	ldi	r30, 0x35	; 53
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	90 81       	ld	r25, Z
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	89 2b       	or	r24, r25
    181a:	8c 93       	st	X, r24
    181c:	11 c0       	rjmp	.+34     	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	90 81       	ld	r25, Z
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	89 2b       	or	r24, r25
    183a:	8c 93       	st	X, r24
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    183e:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1840:	89 81       	ldd	r24, Y+1	; 0x01

}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <DIO_voidWriteLowNibbles+0x6>
    1858:	00 d0       	rcall	.+0      	; 0x185a <DIO_voidWriteLowNibbles+0x8>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	84 30       	cpi	r24, 0x04	; 4
    186c:	08 f0       	brcs	.+2      	; 0x1870 <DIO_voidWriteLowNibbles+0x1e>
    186e:	62 c0       	rjmp	.+196    	; 0x1934 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	8f 70       	andi	r24, 0x0F	; 15
    1874:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3d 83       	std	Y+5, r19	; 0x05
    187e:	2c 83       	std	Y+4, r18	; 0x04
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	29 f1       	breq	.+74     	; 0x18d4 <DIO_voidWriteLowNibbles+0x82>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <DIO_voidWriteLowNibbles+0x4c>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	61 f0       	breq	.+24     	; 0x18b4 <DIO_voidWriteLowNibbles+0x62>
    189c:	4c c0       	rjmp	.+152    	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	31 f1       	breq	.+76     	; 0x18f4 <DIO_voidWriteLowNibbles+0xa2>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	89 f1       	breq	.+98     	; 0x1914 <DIO_voidWriteLowNibbles+0xc2>
    18b2:	41 c0       	rjmp	.+130    	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    18b4:	ab e3       	ldi	r26, 0x3B	; 59
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	eb e3       	ldi	r30, 0x3B	; 59
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 7f       	andi	r24, 0xF0	; 240
    18c0:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    18c2:	ab e3       	ldi	r26, 0x3B	; 59
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	eb e3       	ldi	r30, 0x3B	; 59
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	90 81       	ld	r25, Z
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	89 2b       	or	r24, r25
    18d0:	8c 93       	st	X, r24
    18d2:	31 c0       	rjmp	.+98     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    18d4:	a8 e3       	ldi	r26, 0x38	; 56
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e8 e3       	ldi	r30, 0x38	; 56
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 7f       	andi	r24, 0xF0	; 240
    18e0:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	90 81       	ld	r25, Z
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	89 2b       	or	r24, r25
    18f0:	8c 93       	st	X, r24
    18f2:	21 c0       	rjmp	.+66     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    18f4:	a5 e3       	ldi	r26, 0x35	; 53
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e3       	ldi	r30, 0x35	; 53
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 7f       	andi	r24, 0xF0	; 240
    1900:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	90 81       	ld	r25, Z
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	89 2b       	or	r24, r25
    1910:	8c 93       	st	X, r24
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    1914:	a2 e3       	ldi	r26, 0x32	; 50
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e2 e3       	ldi	r30, 0x32	; 50
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 7f       	andi	r24, 0xF0	; 240
    1920:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    1922:	a2 e3       	ldi	r26, 0x32	; 50
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e2 e3       	ldi	r30, 0x32	; 50
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	90 81       	ld	r25, Z
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	89 2b       	or	r24, r25
    1930:	8c 93       	st	X, r24
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    1934:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1936:	89 81       	ldd	r24, Y+1	; 0x01

}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED )
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <LED_voidInit+0x6>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	69 83       	std	Y+1, r22	; 0x01
    1956:	7a 83       	std	Y+2, r23	; 0x02
    1958:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED.Port , LED.Pin , DIO_PIN_OUTPUT );
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	69 2f       	mov	r22, r25
    1960:	41 e0       	ldi	r20, 0x01	; 1
    1962:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
	
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED )
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <LED_voidOn+0x6>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	69 83       	std	Y+1, r22	; 0x01
    1980:	7a 83       	std	Y+2, r23	; 0x02
    1982:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED.Active_State == ACTIVE_HIGH ){
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	39 f4       	brne	.+14     	; 0x1998 <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_HIGH );
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	9a 81       	ldd	r25, Y+2	; 0x02
    198e:	69 2f       	mov	r22, r25
    1990:	41 e0       	ldi	r20, 0x01	; 1
    1992:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <LED_voidOn+0x38>
		
	}else if( LED.Active_State == ACTIVE_LOW ){
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	88 23       	and	r24, r24
    199c:	31 f4       	brne	.+12     	; 0x19aa <LED_voidOn+0x38>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_LOW  );
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	69 2f       	mov	r22, r25
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
		
	}
	
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED )
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <LED_voidOff+0x6>
    19bc:	0f 92       	push	r0
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
	
	if( LED.Active_State == ACTIVE_HIGH ){
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	39 f4       	brne	.+14     	; 0x19dc <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_LOW  );
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	69 2f       	mov	r22, r25
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <LED_voidOff+0x38>
		
	}else if( LED.Active_State == ACTIVE_LOW ){
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 23       	and	r24, r24
    19e0:	31 f4       	brne	.+12     	; 0x19ee <LED_voidOff+0x38>
		
		DIO_enumSetPinValue( LED.Port , LED.Pin , DIO_PIN_HIGH  );
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	69 2f       	mov	r22, r25
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
		
	}
	
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED )
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <LED_voidToggle+0x6>
    1a00:	0f 92       	push	r0
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	69 83       	std	Y+1, r22	; 0x01
    1a08:	7a 83       	std	Y+2, r23	; 0x02
    1a0a:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED.Port , LED.Pin );
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a10:	69 2f       	mov	r22, r25
    1a12:	0e 94 86 08 	call	0x110c	; 0x110c <DIO_enumTogglePinValue>
}
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <SSD_voidInitialDataPort+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <SSD_voidInitialDataPort+0x8>
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	69 83       	std	Y+1, r22	; 0x01
    1a30:	7a 83       	std	Y+2, r23	; 0x02
    1a32:	8b 83       	std	Y+3, r24	; 0x03
    1a34:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	6f ef       	ldi	r22, 0xFF	; 255
    1a3a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <DIO_enumSetPortDirection>
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <SSD_voidSendNumber>:
/*
 * Breif : This Function write Number on 7 seg [ 0 : 9 ]
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <SSD_voidSendNumber+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <SSD_voidSendNumber+0x8>
    1a54:	0f 92       	push	r0
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	69 83       	std	Y+1, r22	; 0x01
    1a5c:	7a 83       	std	Y+2, r23	; 0x02
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	4d 83       	std	Y+5, r20	; 0x05

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	88 23       	and	r24, r24
    1a68:	69 f4       	brne	.+26     	; 0x1a84 <SSD_voidSendNumber+0x38>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
    1a6a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	fc 01       	movw	r30, r24
    1a74:	e8 59       	subi	r30, 0x98	; 152
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	90 81       	ld	r25, Z
    1a7a:	82 2f       	mov	r24, r18
    1a7c:	69 2f       	mov	r22, r25
    1a7e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enumSetPortValue>
    1a82:	11 c0       	rjmp	.+34     	; 0x1aa6 <SSD_voidSendNumber+0x5a>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	71 f4       	brne	.+28     	; 0x1aa6 <SSD_voidSendNumber+0x5a>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
    1a8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	fc 01       	movw	r30, r24
    1a94:	e8 59       	subi	r30, 0x98	; 152
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	80 81       	ld	r24, Z
    1a9a:	98 2f       	mov	r25, r24
    1a9c:	90 95       	com	r25
    1a9e:	82 2f       	mov	r24, r18
    1aa0:	69 2f       	mov	r22, r25
    1aa2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enumSetPortValue>

	}

}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <SSD_voidSendPart>:
 * Brief : this function write Parton 7 seg [a :g ]
 * Parameters : =>stuct has the SSD tybe ,data Port and enable (Port ,Pin)
 * return :void
 * */
void SSD_voidSendPart( SSD_Type  Copy_structConfig , u8 Copy_u8Part )
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <SSD_voidSendPart+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <SSD_voidSendPart+0x8>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	69 83       	std	Y+1, r22	; 0x01
    1ac6:	7a 83       	std	Y+2, r23	; 0x02
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
    1aca:	9c 83       	std	Y+4, r25	; 0x04
    1acc:	4d 83       	std	Y+5, r20	; 0x05
	if ( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	88 23       	and	r24, r24
    1ad2:	69 f4       	brne	.+26     	; 0x1aee <SSD_voidSendPart+0x38>

		DIO_enumSetPortValue(  Copy_structConfig.DataPort , Local_u8SSDPart[ Copy_u8Part ] );
    1ad4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	fc 01       	movw	r30, r24
    1ade:	ee 58       	subi	r30, 0x8E	; 142
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	90 81       	ld	r25, Z
    1ae4:	82 2f       	mov	r24, r18
    1ae6:	69 2f       	mov	r22, r25
    1ae8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enumSetPortValue>
    1aec:	11 c0       	rjmp	.+34     	; 0x1b10 <SSD_voidSendPart+0x5a>

	}else if ( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	71 f4       	brne	.+28     	; 0x1b10 <SSD_voidSendPart+0x5a>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDPart [ Copy_u8Part ] ) );
    1af4:	2a 81       	ldd	r18, Y+2	; 0x02
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	fc 01       	movw	r30, r24
    1afe:	ee 58       	subi	r30, 0x8E	; 142
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	98 2f       	mov	r25, r24
    1b06:	90 95       	com	r25
    1b08:	82 2f       	mov	r24, r18
    1b0a:	69 2f       	mov	r22, r25
    1b0c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_enumSetPortValue>
	}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <SSD_voidEnable+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <SSD_voidEnable+0x8>
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	69 83       	std	Y+1, r22	; 0x01
    1b2e:	7a 83       	std	Y+2, r23	; 0x02
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	88 23       	and	r24, r24
    1b38:	69 f4       	brne	.+26     	; 0x1b54 <SSD_voidEnable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	69 2f       	mov	r22, r25
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	69 2f       	mov	r22, r25
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <SSD_voidEnable+0x52>

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	61 f4       	brne	.+24     	; 0x1b72 <SSD_voidEnable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	69 2f       	mov	r22, r25
    1b60:	41 e0       	ldi	r20, 0x01	; 1
    1b62:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	69 2f       	mov	r22, r25
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>

	}

}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	08 95       	ret

00001b80 <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <SSD_voidDisable+0x6>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <SSD_voidDisable+0x8>
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	69 83       	std	Y+1, r22	; 0x01
    1b8e:	7a 83       	std	Y+2, r23	; 0x02
    1b90:	8b 83       	std	Y+3, r24	; 0x03
    1b92:	9c 83       	std	Y+4, r25	; 0x04

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	88 23       	and	r24, r24
    1b98:	69 f4       	brne	.+26     	; 0x1bb4 <SSD_voidDisable+0x34>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9e:	69 2f       	mov	r22, r25
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	69 2f       	mov	r22, r25
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <SSD_voidDisable+0x52>

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	61 f4       	brne	.+24     	; 0x1bd2 <SSD_voidDisable+0x52>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	69 2f       	mov	r22, r25
    1bc0:	41 e0       	ldi	r20, 0x01	; 1
    1bc2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	69 2f       	mov	r22, r25
    1bcc:	40 e0       	ldi	r20, 0x00	; 0
    1bce:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>

	}

}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <SW_voidInit>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch port , pin , status
* return : void 
*/
void SW_voidInit      ( SW_Type SW_Config ){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <SW_voidInit+0x6>
    1be6:	0f 92       	push	r0
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	69 83       	std	Y+1, r22	; 0x01
    1bee:	7a 83       	std	Y+2, r23	; 0x02
    1bf0:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	69 2f       	mov	r22, r25
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_enumSetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	88 23       	and	r24, r24
    1c02:	31 f4       	brne	.+12     	; 0x1c10 <SW_voidInit+0x30>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	69 2f       	mov	r22, r25
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	cf 91       	pop	r28
    1c18:	df 91       	pop	r29
    1c1a:	08 95       	ret

00001c1c <SW_EnablePullup>:
 * parameters : =>struct has the switch port ,pin ,status
 * return :void 
 * */

void SW_EnablePullup   (  SW_Type SW_Config  )
{
    1c1c:	df 93       	push	r29
    1c1e:	cf 93       	push	r28
    1c20:	00 d0       	rcall	.+0      	; 0x1c22 <SW_EnablePullup+0x6>
    1c22:	0f 92       	push	r0
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	69 83       	std	Y+1, r22	; 0x01
    1c2a:	7a 83       	std	Y+2, r23	; 0x02
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinValue(  SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH   );	
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	9a 81       	ldd	r25, Y+2	; 0x02
    1c32:	69 2f       	mov	r22, r25
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 b2 06 	call	0xd64	; 0xd64 <DIO_enumSetPinValue>
	
}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	cf 91       	pop	r28
    1c42:	df 91       	pop	r29
    1c44:	08 95       	ret

00001c46 <SW_DisablePullup>:
 * Breif :this function DISABLE internal pullup
 * parameters :struct has the switch port ,pin ,status
 *  return :void 
 * */
void SW_DisablePullup  ( SW_Type SW_Config  )
{
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <SW_DisablePullup+0x6>
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	69 83       	std	Y+1, r22	; 0x01
    1c54:	7a 83       	std	Y+2, r23	; 0x02
    1c56:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT( SFIOR,PUD );
    1c58:	a0 e5       	ldi	r26, 0x50	; 80
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e0 e5       	ldi	r30, 0x50	; 80
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	84 60       	ori	r24, 0x04	; 4
    1c64:	8c 93       	st	X, r24
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch port , pin , status
* return : switch status
*/

u8   SW_u8GetPressed ( SW_Type SW_Config ){
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <SW_u8GetPressed+0x6>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <SW_u8GetPressed+0x8>
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	6b 83       	std	Y+3, r22	; 0x03
    1c82:	7c 83       	std	Y+4, r23	; 0x04
    1c84:	8d 83       	std	Y+5, r24	; 0x05
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
    1c86:	19 82       	std	Y+1, r1	; 0x01
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    1c88:	1a 82       	std	Y+2, r1	; 0x02
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	88 23       	and	r24, r24
    1c8e:	19 f0       	breq	.+6      	; 0x1c96 <SW_u8GetPressed+0x24>
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a1 f4       	brne	.+40     	; 0x1cbe <SW_u8GetPressed+0x4c>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	9e 01       	movw	r18, r28
    1c9c:	2e 5f       	subi	r18, 0xFE	; 254
    1c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca0:	69 2f       	mov	r22, r25
    1ca2:	a9 01       	movw	r20, r18
    1ca4:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 23       	and	r24, r24
    1cac:	19 f4       	brne	.+6      	; 0x1cb4 <SW_u8GetPressed+0x42>
		{
			LOC_u8Result = SW_PRESSED ;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	81 30       	cpi	r24, 0x01	; 1
    1cb8:	c1 f4       	brne	.+48     	; 0x1cea <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1cba:	19 82       	std	Y+1, r1	; 0x01
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <SW_u8GetPressed+0x78>
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	82 30       	cpi	r24, 0x02	; 2
    1cc2:	99 f4       	brne	.+38     	; 0x1cea <SW_u8GetPressed+0x78>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	9e 01       	movw	r18, r28
    1cca:	2e 5f       	subi	r18, 0xFE	; 254
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	69 2f       	mov	r22, r25
    1cd0:	a9 01       	movw	r20, r18
    1cd2:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	88 23       	and	r24, r24
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <SW_u8GetPressed+0x6e>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	05 c0       	rjmp	.+10     	; 0x1cea <SW_u8GetPressed+0x78>
		}
		else if (LOC_u8PinVal==1)
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <SW_u8GetPressed+0x78>
		{
			LOC_u8Result = SW_PRESSED ;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
		}
	}
		
	return LOC_u8Result ;
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <main>:
SW_Type SW6  = {SW_PORTA,SW_PIN5,SW_Ext_PULL_UP};
SW_Type SW7  = {SW_PORTA,SW_PIN6,SW_Ext_PULL_UP};


void main ()
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	SSD_voidInitialDataPort(SSD);
    1d06:	80 91 7a 00 	lds	r24, 0x007A
    1d0a:	90 91 7b 00 	lds	r25, 0x007B
    1d0e:	a0 91 7c 00 	lds	r26, 0x007C
    1d12:	b0 91 7d 00 	lds	r27, 0x007D
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD);
    1d1e:	80 91 7a 00 	lds	r24, 0x007A
    1d22:	90 91 7b 00 	lds	r25, 0x007B
    1d26:	a0 91 7c 00 	lds	r26, 0x007C
    1d2a:	b0 91 7d 00 	lds	r27, 0x007D
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SSD_voidEnable>
	s8 i;
	for (i=0;i<8;i++)
    1d36:	19 82       	std	Y+1, r1	; 0x01
    1d38:	15 c0       	rjmp	.+42     	; 0x1d64 <main+0x68>
	{
		LED_voidInit(Led_arr[i]);
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	33 27       	eor	r19, r19
    1d40:	27 fd       	sbrc	r18, 7
    1d42:	30 95       	com	r19
    1d44:	c9 01       	movw	r24, r18
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	82 0f       	add	r24, r18
    1d4c:	93 1f       	adc	r25, r19
    1d4e:	fc 01       	movw	r30, r24
    1d50:	e2 58       	subi	r30, 0x82	; 130
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	0e 94 a4 0c 	call	0x1948	; 0x1948 <LED_voidInit>
void main ()
{
	SSD_voidInitialDataPort(SSD);
	SSD_voidEnable(SSD);
	s8 i;
	for (i=0;i<8;i++)
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	8f 5f       	subi	r24, 0xFF	; 255
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	88 30       	cpi	r24, 0x08	; 8
    1d68:	44 f3       	brlt	.-48     	; 0x1d3a <main+0x3e>
	{
		LED_voidInit(Led_arr[i]);
	}
	SW_voidInit(SW1);
    1d6a:	60 91 96 00 	lds	r22, 0x0096
    1d6e:	70 91 97 00 	lds	r23, 0x0097
    1d72:	80 91 98 00 	lds	r24, 0x0098
    1d76:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW2);
    1d7a:	60 91 99 00 	lds	r22, 0x0099
    1d7e:	70 91 9a 00 	lds	r23, 0x009A
    1d82:	80 91 9b 00 	lds	r24, 0x009B
    1d86:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW3);
    1d8a:	60 91 9c 00 	lds	r22, 0x009C
    1d8e:	70 91 9d 00 	lds	r23, 0x009D
    1d92:	80 91 9e 00 	lds	r24, 0x009E
    1d96:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW4);
    1d9a:	60 91 9f 00 	lds	r22, 0x009F
    1d9e:	70 91 a0 00 	lds	r23, 0x00A0
    1da2:	80 91 a1 00 	lds	r24, 0x00A1
    1da6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW5);
    1daa:	60 91 a2 00 	lds	r22, 0x00A2
    1dae:	70 91 a3 00 	lds	r23, 0x00A3
    1db2:	80 91 a4 00 	lds	r24, 0x00A4
    1db6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW6);
    1dba:	60 91 a5 00 	lds	r22, 0x00A5
    1dbe:	70 91 a6 00 	lds	r23, 0x00A6
    1dc2:	80 91 a7 00 	lds	r24, 0x00A7
    1dc6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SW_voidInit(SW7);
    1dca:	60 91 a8 00 	lds	r22, 0x00A8
    1dce:	70 91 a9 00 	lds	r23, 0x00A9
    1dd2:	80 91 aa 00 	lds	r24, 0x00AA
    1dd6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <SW_voidInit>
	SSD_voidInitialDataPort(SSD);
    1dda:	80 91 7a 00 	lds	r24, 0x007A
    1dde:	90 91 7b 00 	lds	r25, 0x007B
    1de2:	a0 91 7c 00 	lds	r26, 0x007C
    1de6:	b0 91 7d 00 	lds	r27, 0x007D
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD);
    1df2:	80 91 7a 00 	lds	r24, 0x007A
    1df6:	90 91 7b 00 	lds	r25, 0x007B
    1dfa:	a0 91 7c 00 	lds	r26, 0x007C
    1dfe:	b0 91 7d 00 	lds	r27, 0x007D
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <SSD_voidEnable>


	while (1)
	{

		if(SW_u8GetPressed(SW1))
    1e0a:	60 91 96 00 	lds	r22, 0x0096
    1e0e:	70 91 97 00 	lds	r23, 0x0097
    1e12:	80 91 98 00 	lds	r24, 0x0098
    1e16:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e1a:	88 23       	and	r24, r24
    1e1c:	11 f0       	breq	.+4      	; 0x1e22 <main+0x126>
		{
			 LEDS_voidOn();
    1e1e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LEDS_voidOn>
		}
		if (SW_u8GetPressed(SW2))
    1e22:	60 91 99 00 	lds	r22, 0x0099
    1e26:	70 91 9a 00 	lds	r23, 0x009A
    1e2a:	80 91 9b 00 	lds	r24, 0x009B
    1e2e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e32:	88 23       	and	r24, r24
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <main+0x13e>
		{
			LEDS_voidFlashing();
    1e36:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <LEDS_voidFlashing>
		}
		if (SW_u8GetPressed(SW3))
    1e3a:	60 91 9c 00 	lds	r22, 0x009C
    1e3e:	70 91 9d 00 	lds	r23, 0x009D
    1e42:	80 91 9e 00 	lds	r24, 0x009E
    1e46:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e4a:	88 23       	and	r24, r24
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <main+0x156>
		{
			 LEDS_voidFlashing();
    1e4e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <LEDS_voidFlashing>
		}
		if (SW_u8GetPressed(SW4))
    1e52:	60 91 9f 00 	lds	r22, 0x009F
    1e56:	70 91 a0 00 	lds	r23, 0x00A0
    1e5a:	80 91 a1 00 	lds	r24, 0x00A1
    1e5e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e62:	88 23       	and	r24, r24
    1e64:	11 f0       	breq	.+4      	; 0x1e6a <main+0x16e>
		{
			 LEDS_voidShiftingL();
    1e66:	0e 94 bd 10 	call	0x217a	; 0x217a <LEDS_voidShiftingL>
		}
		if (SW_u8GetPressed(SW5))
    1e6a:	60 91 a2 00 	lds	r22, 0x00A2
    1e6e:	70 91 a3 00 	lds	r23, 0x00A3
    1e72:	80 91 a4 00 	lds	r24, 0x00A4
    1e76:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e7a:	88 23       	and	r24, r24
    1e7c:	11 f0       	breq	.+4      	; 0x1e82 <main+0x186>
		{
			 LEDS_voidShiftingR();
    1e7e:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <LEDS_voidShiftingR>
		}

		if (SW_u8GetPressed(SW7))
    1e82:	60 91 a8 00 	lds	r22, 0x00A8
    1e86:	70 91 a9 00 	lds	r23, 0x00A9
    1e8a:	80 91 aa 00 	lds	r24, 0x00AA
    1e8e:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1e92:	88 23       	and	r24, r24
    1e94:	11 f0       	breq	.+4      	; 0x1e9a <main+0x19e>
		{

			 SSD_voidCount();
    1e96:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <SSD_voidCount>

		}

		if (SW_u8GetPressed(SW6))
    1e9a:	60 91 a5 00 	lds	r22, 0x00A5
    1e9e:	70 91 a6 00 	lds	r23, 0x00A6
    1ea2:	80 91 a7 00 	lds	r24, 0x00A7
    1ea6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SW_u8GetPressed>
    1eaa:	88 23       	and	r24, r24
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <main+0x1b4>
    1eae:	ad cf       	rjmp	.-166    	; 0x1e0a <main+0x10e>
		{
			 LEDS_Converging();
    1eb0:	0e 94 0b 14 	call	0x2816	; 0x2816 <LEDS_Converging>
    1eb4:	aa cf       	rjmp	.-172    	; 0x1e0a <main+0x10e>

00001eb6 <LEDS_voidOn>:
	}



void LEDS_voidOn()
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
	for(i=0;i<8;i++)
    1eca:	10 92 ac 00 	sts	0x00AC, r1
    1ece:	16 c0       	rjmp	.+44     	; 0x1efc <LEDS_voidOn+0x46>
	{
		LED_voidToggle(Led_arr[i]);
    1ed0:	80 91 ac 00 	lds	r24, 0x00AC
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	c9 01       	movw	r24, r18
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	82 0f       	add	r24, r18
    1ee0:	93 1f       	adc	r25, r19
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e2 58       	subi	r30, 0x82	; 130
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	60 81       	ld	r22, Z
    1eea:	71 81       	ldd	r23, Z+1	; 0x01
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <LED_voidToggle>



void LEDS_voidOn()
{
	for(i=0;i<8;i++)
    1ef2:	80 91 ac 00 	lds	r24, 0x00AC
    1ef6:	8f 5f       	subi	r24, 0xFF	; 255
    1ef8:	80 93 ac 00 	sts	0x00AC, r24
    1efc:	80 91 ac 00 	lds	r24, 0x00AC
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	30 f3       	brcs	.-52     	; 0x1ed0 <LEDS_voidOn+0x1a>
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	aa e7       	ldi	r26, 0x7A	; 122
    1f0a:	b3 e4       	ldi	r27, 0x43	; 67
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
    1f0e:	9c 87       	std	Y+12, r25	; 0x0c
    1f10:	ad 87       	std	Y+13, r26	; 0x0d
    1f12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4a ef       	ldi	r20, 0xFA	; 250
    1f22:	54 e4       	ldi	r21, 0x44	; 68
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8f 83       	std	Y+7, r24	; 0x07
    1f2e:	98 87       	std	Y+8, r25	; 0x08
    1f30:	a9 87       	std	Y+9, r26	; 0x09
    1f32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	40 e8       	ldi	r20, 0x80	; 128
    1f42:	5f e3       	ldi	r21, 0x3F	; 63
    1f44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f48:	88 23       	and	r24, r24
    1f4a:	2c f4       	brge	.+10     	; 0x1f56 <LEDS_voidOn+0xa0>
		__ticks = 1;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	3f c0       	rjmp	.+126    	; 0x1fd4 <LEDS_voidOn+0x11e>
	else if (__tmp > 65535)
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	3f ef       	ldi	r19, 0xFF	; 255
    1f62:	4f e7       	ldi	r20, 0x7F	; 127
    1f64:	57 e4       	ldi	r21, 0x47	; 71
    1f66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f6a:	18 16       	cp	r1, r24
    1f6c:	4c f5       	brge	.+82     	; 0x1fc0 <LEDS_voidOn+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e2       	ldi	r20, 0x20	; 32
    1f7c:	51 e4       	ldi	r21, 0x41	; 65
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	0f c0       	rjmp	.+30     	; 0x1fb6 <LEDS_voidOn+0x100>
    1f98:	88 ec       	ldi	r24, 0xC8	; 200
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	9c 83       	std	Y+4, r25	; 0x04
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LEDS_voidOn+0xee>
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	00 97       	sbiw	r24, 0x00	; 0
    1fbc:	69 f7       	brne	.-38     	; 0x1f98 <LEDS_voidOn+0xe2>
    1fbe:	14 c0       	rjmp	.+40     	; 0x1fe8 <LEDS_voidOn+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc2:	78 85       	ldd	r23, Y+8	; 0x08
    1fc4:	89 85       	ldd	r24, Y+9	; 0x09
    1fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	9e 83       	std	Y+6, r25	; 0x06
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd8:	9a 83       	std	Y+2, r25	; 0x02
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LEDS_voidOn+0x12a>
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	89 83       	std	Y+1, r24	; 0x01
	{
		LED_voidToggle(Led_arr[i]);
	}
	_delay_ms(250);
}
    1fe8:	2e 96       	adiw	r28, 0x0e	; 14
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <LEDS_voidFlashing>:


void LEDS_voidFlashing()
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    2002:	2e 97       	sbiw	r28, 0x0e	; 14
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<8;i++)
    200e:	10 92 ac 00 	sts	0x00AC, r1
    2012:	88 c0       	rjmp	.+272    	; 0x2124 <LEDS_voidFlashing+0x12a>
				{
					LED_voidOn(Led_arr[i]);
    2014:	80 91 ac 00 	lds	r24, 0x00AC
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	c9 01       	movw	r24, r18
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	82 0f       	add	r24, r18
    2024:	93 1f       	adc	r25, r19
    2026:	fc 01       	movw	r30, r24
    2028:	e2 58       	subi	r30, 0x82	; 130
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	aa e7       	ldi	r26, 0x7A	; 122
    203c:	b3 e4       	ldi	r27, 0x43	; 67
    203e:	8b 87       	std	Y+11, r24	; 0x0b
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	ad 87       	std	Y+13, r26	; 0x0d
    2044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a ef       	ldi	r20, 0xFA	; 250
    2054:	54 e4       	ldi	r21, 0x44	; 68
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8f 83       	std	Y+7, r24	; 0x07
    2060:	98 87       	std	Y+8, r25	; 0x08
    2062:	a9 87       	std	Y+9, r26	; 0x09
    2064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <LEDS_voidFlashing+0x8e>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <LEDS_voidFlashing+0x10c>
	else if (__tmp > 65535)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <LEDS_voidFlashing+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <LEDS_voidFlashing+0xee>
    20ca:	88 ec       	ldi	r24, 0xC8	; 200
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LEDS_voidFlashing+0xdc>
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <LEDS_voidFlashing+0xd0>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <LEDS_voidFlashing+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LEDS_voidFlashing+0x118>
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
}


void LEDS_voidFlashing()
{
	for (i=0;i<8;i++)
    211a:	80 91 ac 00 	lds	r24, 0x00AC
    211e:	8f 5f       	subi	r24, 0xFF	; 255
    2120:	80 93 ac 00 	sts	0x00AC, r24
    2124:	80 91 ac 00 	lds	r24, 0x00AC
    2128:	88 30       	cpi	r24, 0x08	; 8
    212a:	08 f4       	brcc	.+2      	; 0x212e <LEDS_voidFlashing+0x134>
    212c:	73 cf       	rjmp	.-282    	; 0x2014 <LEDS_voidFlashing+0x1a>
				{
					LED_voidOn(Led_arr[i]);
					_delay_ms(250);
				}
				for (i=0;i<8;i++)
    212e:	10 92 ac 00 	sts	0x00AC, r1
    2132:	16 c0       	rjmp	.+44     	; 0x2160 <LEDS_voidFlashing+0x166>
				{
					LED_voidOff(Led_arr[i]);
    2134:	80 91 ac 00 	lds	r24, 0x00AC
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	c9 01       	movw	r24, r18
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	fc 01       	movw	r30, r24
    2148:	e2 58       	subi	r30, 0x82	; 130
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_voidOff>
	for (i=0;i<8;i++)
				{
					LED_voidOn(Led_arr[i]);
					_delay_ms(250);
				}
				for (i=0;i<8;i++)
    2156:	80 91 ac 00 	lds	r24, 0x00AC
    215a:	8f 5f       	subi	r24, 0xFF	; 255
    215c:	80 93 ac 00 	sts	0x00AC, r24
    2160:	80 91 ac 00 	lds	r24, 0x00AC
    2164:	88 30       	cpi	r24, 0x08	; 8
    2166:	30 f3       	brcs	.-52     	; 0x2134 <LEDS_voidFlashing+0x13a>
				{
					LED_voidOff(Led_arr[i]);

				}
}
    2168:	2e 96       	adiw	r28, 0x0e	; 14
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LEDS_voidShiftingL>:

void LEDS_voidShiftingL()
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	6c 97       	sbiw	r28, 0x1c	; 28
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
	for ( i=0;i<8;i++)
    218e:	10 92 ac 00 	sts	0x00AC, r1
    2192:	8e c0       	rjmp	.+284    	; 0x22b0 <LEDS_voidShiftingL+0x136>
				{
					LED_voidOn(Led_arr[7-i]);
    2194:	80 91 ac 00 	lds	r24, 0x00AC
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	87 e0       	ldi	r24, 0x07	; 7
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	ac 01       	movw	r20, r24
    21a2:	42 1b       	sub	r20, r18
    21a4:	53 0b       	sbc	r21, r19
    21a6:	9a 01       	movw	r18, r20
    21a8:	c9 01       	movw	r24, r18
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	82 0f       	add	r24, r18
    21b0:	93 1f       	adc	r25, r19
    21b2:	fc 01       	movw	r30, r24
    21b4:	e2 58       	subi	r30, 0x82	; 130
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	60 81       	ld	r22, Z
    21ba:	71 81       	ldd	r23, Z+1	; 0x01
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	aa e7       	ldi	r26, 0x7A	; 122
    21c8:	b3 e4       	ldi	r27, 0x43	; 67
    21ca:	89 8f       	std	Y+25, r24	; 0x19
    21cc:	9a 8f       	std	Y+26, r25	; 0x1a
    21ce:	ab 8f       	std	Y+27, r26	; 0x1b
    21d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	69 8d       	ldd	r22, Y+25	; 0x19
    21d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8d 8b       	std	Y+21, r24	; 0x15
    21ec:	9e 8b       	std	Y+22, r25	; 0x16
    21ee:	af 8b       	std	Y+23, r26	; 0x17
    21f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f2:	6d 89       	ldd	r22, Y+21	; 0x15
    21f4:	7e 89       	ldd	r23, Y+22	; 0x16
    21f6:	8f 89       	ldd	r24, Y+23	; 0x17
    21f8:	98 8d       	ldd	r25, Y+24	; 0x18
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <LEDS_voidShiftingL+0x9a>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <LEDS_voidShiftingL+0x118>
	else if (__tmp > 65535)
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <LEDS_voidShiftingL+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	69 8d       	ldd	r22, Y+25	; 0x19
    222e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <LEDS_voidShiftingL+0xfa>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
    225e:	89 89       	ldd	r24, Y+17	; 0x11
    2260:	9a 89       	ldd	r25, Y+18	; 0x12
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LEDS_voidShiftingL+0xe8>
    2266:	9a 8b       	std	Y+18, r25	; 0x12
    2268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <LEDS_voidShiftingL+0xdc>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <LEDS_voidShiftingL+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9c 8b       	std	Y+20, r25	; 0x14
    2290:	8b 8b       	std	Y+19, r24	; 0x13
    2292:	8b 89       	ldd	r24, Y+19	; 0x13
    2294:	9c 89       	ldd	r25, Y+20	; 0x14
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	98 89       	ldd	r25, Y+16	; 0x10
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LEDS_voidShiftingL+0x124>
    22a2:	98 8b       	std	Y+16, r25	; 0x10
    22a4:	8f 87       	std	Y+15, r24	; 0x0f
				}
}

void LEDS_voidShiftingL()
{
	for ( i=0;i<8;i++)
    22a6:	80 91 ac 00 	lds	r24, 0x00AC
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	80 93 ac 00 	sts	0x00AC, r24
    22b0:	80 91 ac 00 	lds	r24, 0x00AC
    22b4:	88 30       	cpi	r24, 0x08	; 8
    22b6:	08 f4       	brcc	.+2      	; 0x22ba <LEDS_voidShiftingL+0x140>
    22b8:	6d cf       	rjmp	.-294    	; 0x2194 <LEDS_voidShiftingL+0x1a>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	aa e7       	ldi	r26, 0x7A	; 122
    22c0:	b3 e4       	ldi	r27, 0x43	; 67
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a ef       	ldi	r20, 0xFA	; 250
    22d8:	54 e4       	ldi	r21, 0x44	; 68
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LEDS_voidShiftingL+0x192>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LEDS_voidShiftingL+0x210>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LEDS_voidShiftingL+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LEDS_voidShiftingL+0x1f2>
    234e:	88 ec       	ldi	r24, 0xC8	; 200
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LEDS_voidShiftingL+0x1e0>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LEDS_voidShiftingL+0x1d4>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LEDS_voidShiftingL+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LEDS_voidShiftingL+0x21c>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
				{
					LED_voidOn(Led_arr[7-i]);
					_delay_ms(250);
				}
				_delay_ms(250);
				for ( i=0;i<8;i++)
    239e:	10 92 ac 00 	sts	0x00AC, r1
    23a2:	1c c0       	rjmp	.+56     	; 0x23dc <LEDS_voidShiftingL+0x262>
				{
					LED_voidOff(Led_arr[7-i]);
    23a4:	80 91 ac 00 	lds	r24, 0x00AC
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	87 e0       	ldi	r24, 0x07	; 7
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	ac 01       	movw	r20, r24
    23b2:	42 1b       	sub	r20, r18
    23b4:	53 0b       	sbc	r21, r19
    23b6:	9a 01       	movw	r18, r20
    23b8:	c9 01       	movw	r24, r18
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	82 0f       	add	r24, r18
    23c0:	93 1f       	adc	r25, r19
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 58       	subi	r30, 0x82	; 130
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_voidOff>
				{
					LED_voidOn(Led_arr[7-i]);
					_delay_ms(250);
				}
				_delay_ms(250);
				for ( i=0;i<8;i++)
    23d2:	80 91 ac 00 	lds	r24, 0x00AC
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	80 93 ac 00 	sts	0x00AC, r24
    23dc:	80 91 ac 00 	lds	r24, 0x00AC
    23e0:	88 30       	cpi	r24, 0x08	; 8
    23e2:	00 f3       	brcs	.-64     	; 0x23a4 <LEDS_voidShiftingL+0x22a>
				{
					LED_voidOff(Led_arr[7-i]);
				}
}
    23e4:	6c 96       	adiw	r28, 0x1c	; 28
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <LEDS_voidShiftingR>:

void LEDS_voidShiftingR()
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<8;i++)
    240a:	10 92 ac 00 	sts	0x00AC, r1
    240e:	9f c0       	rjmp	.+318    	; 0x254e <LEDS_voidShiftingR+0x158>
				{
					LED_voidOn(Led_arr[i]);
    2410:	80 91 ac 00 	lds	r24, 0x00AC
    2414:	28 2f       	mov	r18, r24
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	c9 01       	movw	r24, r18
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	fc 01       	movw	r30, r24
    2424:	e2 58       	subi	r30, 0x82	; 130
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
					LED_voidOn(Led_arr[7-i]);
    2432:	80 91 ac 00 	lds	r24, 0x00AC
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	87 e0       	ldi	r24, 0x07	; 7
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	ac 01       	movw	r20, r24
    2440:	42 1b       	sub	r20, r18
    2442:	53 0b       	sbc	r21, r19
    2444:	9a 01       	movw	r18, r20
    2446:	c9 01       	movw	r24, r18
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	82 0f       	add	r24, r18
    244e:	93 1f       	adc	r25, r19
    2450:	fc 01       	movw	r30, r24
    2452:	e2 58       	subi	r30, 0x82	; 130
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	60 81       	ld	r22, Z
    2458:	71 81       	ldd	r23, Z+1	; 0x01
    245a:	82 81       	ldd	r24, Z+2	; 0x02
    245c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	aa e7       	ldi	r26, 0x7A	; 122
    2466:	b3 e4       	ldi	r27, 0x43	; 67
    2468:	8b 87       	std	Y+11, r24	; 0x0b
    246a:	9c 87       	std	Y+12, r25	; 0x0c
    246c:	ad 87       	std	Y+13, r26	; 0x0d
    246e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a ef       	ldi	r20, 0xFA	; 250
    247e:	54 e4       	ldi	r21, 0x44	; 68
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	8f 83       	std	Y+7, r24	; 0x07
    248a:	98 87       	std	Y+8, r25	; 0x08
    248c:	a9 87       	std	Y+9, r26	; 0x09
    248e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2490:	6f 81       	ldd	r22, Y+7	; 0x07
    2492:	78 85       	ldd	r23, Y+8	; 0x08
    2494:	89 85       	ldd	r24, Y+9	; 0x09
    2496:	9a 85       	ldd	r25, Y+10	; 0x0a
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	2c f4       	brge	.+10     	; 0x24b2 <LEDS_voidShiftingR+0xbc>
		__ticks = 1;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	3f c0       	rjmp	.+126    	; 0x2530 <LEDS_voidShiftingR+0x13a>
	else if (__tmp > 65535)
    24b2:	6f 81       	ldd	r22, Y+7	; 0x07
    24b4:	78 85       	ldd	r23, Y+8	; 0x08
    24b6:	89 85       	ldd	r24, Y+9	; 0x09
    24b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	3f ef       	ldi	r19, 0xFF	; 255
    24be:	4f e7       	ldi	r20, 0x7F	; 127
    24c0:	57 e4       	ldi	r21, 0x47	; 71
    24c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	4c f5       	brge	.+82     	; 0x251c <LEDS_voidShiftingR+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    24cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	40 e2       	ldi	r20, 0x20	; 32
    24d8:	51 e4       	ldi	r21, 0x41	; 65
    24da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	bc 01       	movw	r22, r24
    24e4:	cd 01       	movw	r24, r26
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	9e 83       	std	Y+6, r25	; 0x06
    24f0:	8d 83       	std	Y+5, r24	; 0x05
    24f2:	0f c0       	rjmp	.+30     	; 0x2512 <LEDS_voidShiftingR+0x11c>
    24f4:	88 ec       	ldi	r24, 0xC8	; 200
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <LEDS_voidShiftingR+0x10a>
    2504:	9c 83       	std	Y+4, r25	; 0x04
    2506:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2508:	8d 81       	ldd	r24, Y+5	; 0x05
    250a:	9e 81       	ldd	r25, Y+6	; 0x06
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f7       	brne	.-38     	; 0x24f4 <LEDS_voidShiftingR+0xfe>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <LEDS_voidShiftingR+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251c:	6f 81       	ldd	r22, Y+7	; 0x07
    251e:	78 85       	ldd	r23, Y+8	; 0x08
    2520:	89 85       	ldd	r24, Y+9	; 0x09
    2522:	9a 85       	ldd	r25, Y+10	; 0x0a
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LEDS_voidShiftingR+0x146>
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01
				}
}

void LEDS_voidShiftingR()
{
	for (i=0;i<8;i++)
    2544:	80 91 ac 00 	lds	r24, 0x00AC
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	80 93 ac 00 	sts	0x00AC, r24
    254e:	80 91 ac 00 	lds	r24, 0x00AC
    2552:	88 30       	cpi	r24, 0x08	; 8
    2554:	08 f4       	brcc	.+2      	; 0x2558 <LEDS_voidShiftingR+0x162>
    2556:	5c cf       	rjmp	.-328    	; 0x2410 <LEDS_voidShiftingR+0x1a>
					LED_voidOn(Led_arr[i]);
					LED_voidOn(Led_arr[7-i]);
					_delay_ms(250);

				}
				for (i=0;i<8;i++)
    2558:	10 92 ac 00 	sts	0x00AC, r1
    255c:	2d c0       	rjmp	.+90     	; 0x25b8 <LEDS_voidShiftingR+0x1c2>
				{
					LED_voidOff(Led_arr[i]);
    255e:	80 91 ac 00 	lds	r24, 0x00AC
    2562:	28 2f       	mov	r18, r24
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	c9 01       	movw	r24, r18
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	fc 01       	movw	r30, r24
    2572:	e2 58       	subi	r30, 0x82	; 130
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_voidOff>
					LED_voidOff(Led_arr[7-i]);
    2580:	80 91 ac 00 	lds	r24, 0x00AC
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	87 e0       	ldi	r24, 0x07	; 7
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	ac 01       	movw	r20, r24
    258e:	42 1b       	sub	r20, r18
    2590:	53 0b       	sbc	r21, r19
    2592:	9a 01       	movw	r18, r20
    2594:	c9 01       	movw	r24, r18
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	82 0f       	add	r24, r18
    259c:	93 1f       	adc	r25, r19
    259e:	fc 01       	movw	r30, r24
    25a0:	e2 58       	subi	r30, 0x82	; 130
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_voidOff>
					LED_voidOn(Led_arr[i]);
					LED_voidOn(Led_arr[7-i]);
					_delay_ms(250);

				}
				for (i=0;i<8;i++)
    25ae:	80 91 ac 00 	lds	r24, 0x00AC
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 93 ac 00 	sts	0x00AC, r24
    25b8:	80 91 ac 00 	lds	r24, 0x00AC
    25bc:	88 30       	cpi	r24, 0x08	; 8
    25be:	78 f2       	brcs	.-98     	; 0x255e <LEDS_voidShiftingR+0x168>
					LED_voidOff(Led_arr[i]);
					LED_voidOff(Led_arr[7-i]);


				}
}
    25c0:	2e 96       	adiw	r28, 0x0e	; 14
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <SSD_voidCount>:
void SSD_voidCount()
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	6c 97       	sbiw	r28, 0x1c	; 28
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<10;i++)
    25e6:	10 92 ac 00 	sts	0x00AC, r1
    25ea:	86 c0       	rjmp	.+268    	; 0x26f8 <SSD_voidCount+0x126>
				{
					SSD_voidSendNumber(SSD,i);
    25ec:	20 91 ac 00 	lds	r18, 0x00AC
    25f0:	80 91 7a 00 	lds	r24, 0x007A
    25f4:	90 91 7b 00 	lds	r25, 0x007B
    25f8:	a0 91 7c 00 	lds	r26, 0x007C
    25fc:	b0 91 7d 00 	lds	r27, 0x007D
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	42 2f       	mov	r20, r18
    2606:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <SSD_voidSendNumber>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	aa ef       	ldi	r26, 0xFA	; 250
    2610:	b3 e4       	ldi	r27, 0x43	; 67
    2612:	89 8f       	std	Y+25, r24	; 0x19
    2614:	9a 8f       	std	Y+26, r25	; 0x1a
    2616:	ab 8f       	std	Y+27, r26	; 0x1b
    2618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261a:	69 8d       	ldd	r22, Y+25	; 0x19
    261c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	4a ef       	ldi	r20, 0xFA	; 250
    2628:	54 e4       	ldi	r21, 0x44	; 68
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	8d 8b       	std	Y+21, r24	; 0x15
    2634:	9e 8b       	std	Y+22, r25	; 0x16
    2636:	af 8b       	std	Y+23, r26	; 0x17
    2638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    263a:	6d 89       	ldd	r22, Y+21	; 0x15
    263c:	7e 89       	ldd	r23, Y+22	; 0x16
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	40 e8       	ldi	r20, 0x80	; 128
    2648:	5f e3       	ldi	r21, 0x3F	; 63
    264a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264e:	88 23       	and	r24, r24
    2650:	2c f4       	brge	.+10     	; 0x265c <SSD_voidCount+0x8a>
		__ticks = 1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9c 8b       	std	Y+20, r25	; 0x14
    2658:	8b 8b       	std	Y+19, r24	; 0x13
    265a:	3f c0       	rjmp	.+126    	; 0x26da <SSD_voidCount+0x108>
	else if (__tmp > 65535)
    265c:	6d 89       	ldd	r22, Y+21	; 0x15
    265e:	7e 89       	ldd	r23, Y+22	; 0x16
    2660:	8f 89       	ldd	r24, Y+23	; 0x17
    2662:	98 8d       	ldd	r25, Y+24	; 0x18
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	3f ef       	ldi	r19, 0xFF	; 255
    2668:	4f e7       	ldi	r20, 0x7F	; 127
    266a:	57 e4       	ldi	r21, 0x47	; 71
    266c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2670:	18 16       	cp	r1, r24
    2672:	4c f5       	brge	.+82     	; 0x26c6 <SSD_voidCount+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2674:	69 8d       	ldd	r22, Y+25	; 0x19
    2676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267c:	20 e0       	ldi	r18, 0x00	; 0
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	40 e2       	ldi	r20, 0x20	; 32
    2682:	51 e4       	ldi	r21, 0x41	; 65
    2684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9c 8b       	std	Y+20, r25	; 0x14
    269a:	8b 8b       	std	Y+19, r24	; 0x13
    269c:	0f c0       	rjmp	.+30     	; 0x26bc <SSD_voidCount+0xea>
    269e:	88 ec       	ldi	r24, 0xC8	; 200
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	9a 8b       	std	Y+18, r25	; 0x12
    26a4:	89 8b       	std	Y+17, r24	; 0x11
    26a6:	89 89       	ldd	r24, Y+17	; 0x11
    26a8:	9a 89       	ldd	r25, Y+18	; 0x12
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <SSD_voidCount+0xd8>
    26ae:	9a 8b       	std	Y+18, r25	; 0x12
    26b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	9c 8b       	std	Y+20, r25	; 0x14
    26ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26bc:	8b 89       	ldd	r24, Y+19	; 0x13
    26be:	9c 89       	ldd	r25, Y+20	; 0x14
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	69 f7       	brne	.-38     	; 0x269e <SSD_voidCount+0xcc>
    26c4:	14 c0       	rjmp	.+40     	; 0x26ee <SSD_voidCount+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c6:	6d 89       	ldd	r22, Y+21	; 0x15
    26c8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ca:	8f 89       	ldd	r24, Y+23	; 0x17
    26cc:	98 8d       	ldd	r25, Y+24	; 0x18
    26ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	9c 8b       	std	Y+20, r25	; 0x14
    26d8:	8b 8b       	std	Y+19, r24	; 0x13
    26da:	8b 89       	ldd	r24, Y+19	; 0x13
    26dc:	9c 89       	ldd	r25, Y+20	; 0x14
    26de:	98 8b       	std	Y+16, r25	; 0x10
    26e0:	8f 87       	std	Y+15, r24	; 0x0f
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	98 89       	ldd	r25, Y+16	; 0x10
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <SSD_voidCount+0x114>
    26ea:	98 8b       	std	Y+16, r25	; 0x10
    26ec:	8f 87       	std	Y+15, r24	; 0x0f

				}
}
void SSD_voidCount()
{
	for (i=0;i<10;i++)
    26ee:	80 91 ac 00 	lds	r24, 0x00AC
    26f2:	8f 5f       	subi	r24, 0xFF	; 255
    26f4:	80 93 ac 00 	sts	0x00AC, r24
    26f8:	80 91 ac 00 	lds	r24, 0x00AC
    26fc:	8a 30       	cpi	r24, 0x0A	; 10
    26fe:	08 f4       	brcc	.+2      	; 0x2702 <SSD_voidCount+0x130>
    2700:	75 cf       	rjmp	.-278    	; 0x25ec <SSD_voidCount+0x1a>
				{
					SSD_voidSendNumber(SSD,i);
					_delay_ms(500);
				}
				for (i=9;i>=0;i--)
    2702:	89 e0       	ldi	r24, 0x09	; 9
    2704:	80 93 ac 00 	sts	0x00AC, r24
				{
					SSD_voidSendNumber(SSD,i);
    2708:	20 91 ac 00 	lds	r18, 0x00AC
    270c:	80 91 7a 00 	lds	r24, 0x007A
    2710:	90 91 7b 00 	lds	r25, 0x007B
    2714:	a0 91 7c 00 	lds	r26, 0x007C
    2718:	b0 91 7d 00 	lds	r27, 0x007D
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	42 2f       	mov	r20, r18
    2722:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <SSD_voidSendNumber>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	aa ef       	ldi	r26, 0xFA	; 250
    272c:	b3 e4       	ldi	r27, 0x43	; 67
    272e:	8b 87       	std	Y+11, r24	; 0x0b
    2730:	9c 87       	std	Y+12, r25	; 0x0c
    2732:	ad 87       	std	Y+13, r26	; 0x0d
    2734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8f 83       	std	Y+7, r24	; 0x07
    2750:	98 87       	std	Y+8, r25	; 0x08
    2752:	a9 87       	std	Y+9, r26	; 0x09
    2754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <SSD_voidCount+0x1a6>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <SSD_voidCount+0x224>
	else if (__tmp > 65535)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <SSD_voidCount+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <SSD_voidCount+0x206>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <SSD_voidCount+0x1f4>
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <SSD_voidCount+0x1e8>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <SSD_voidCount+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <SSD_voidCount+0x230>
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
	for (i=0;i<10;i++)
				{
					SSD_voidSendNumber(SSD,i);
					_delay_ms(500);
				}
				for (i=9;i>=0;i--)
    280a:	80 91 ac 00 	lds	r24, 0x00AC
    280e:	81 50       	subi	r24, 0x01	; 1
    2810:	80 93 ac 00 	sts	0x00AC, r24
    2814:	79 cf       	rjmp	.-270    	; 0x2708 <SSD_voidCount+0x136>

00002816 <LEDS_Converging>:
					_delay_ms(500);
				}

}
void LEDS_Converging()
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	2e 97       	sbiw	r28, 0x0e	; 14
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
	for (i=0;i<4;i++)
    282a:	10 92 ac 00 	sts	0x00AC, r1
    282e:	a2 c0       	rjmp	.+324    	; 0x2974 <LEDS_Converging+0x15e>
				{
					LED_voidOn(Led_arr[3-i]);
    2830:	80 91 ac 00 	lds	r24, 0x00AC
    2834:	28 2f       	mov	r18, r24
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	83 e0       	ldi	r24, 0x03	; 3
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	ac 01       	movw	r20, r24
    283e:	42 1b       	sub	r20, r18
    2840:	53 0b       	sbc	r21, r19
    2842:	9a 01       	movw	r18, r20
    2844:	c9 01       	movw	r24, r18
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	82 0f       	add	r24, r18
    284c:	93 1f       	adc	r25, r19
    284e:	fc 01       	movw	r30, r24
    2850:	e2 58       	subi	r30, 0x82	; 130
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
					LED_voidOn(Led_arr[4+i]);
    285e:	80 91 ac 00 	lds	r24, 0x00AC
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c 01       	movw	r18, r24
    2868:	2c 5f       	subi	r18, 0xFC	; 252
    286a:	3f 4f       	sbci	r19, 0xFF	; 255
    286c:	c9 01       	movw	r24, r18
    286e:	88 0f       	add	r24, r24
    2870:	99 1f       	adc	r25, r25
    2872:	82 0f       	add	r24, r18
    2874:	93 1f       	adc	r25, r19
    2876:	fc 01       	movw	r30, r24
    2878:	e2 58       	subi	r30, 0x82	; 130
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	0e 94 b9 0c 	call	0x1972	; 0x1972 <LED_voidOn>
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	aa ef       	ldi	r26, 0xFA	; 250
    288c:	b3 e4       	ldi	r27, 0x43	; 67
    288e:	8b 87       	std	Y+11, r24	; 0x0b
    2890:	9c 87       	std	Y+12, r25	; 0x0c
    2892:	ad 87       	std	Y+13, r26	; 0x0d
    2894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	6b 85       	ldd	r22, Y+11	; 0x0b
    2898:	7c 85       	ldd	r23, Y+12	; 0x0c
    289a:	8d 85       	ldd	r24, Y+13	; 0x0d
    289c:	9e 85       	ldd	r25, Y+14	; 0x0e
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	4a ef       	ldi	r20, 0xFA	; 250
    28a4:	54 e4       	ldi	r21, 0x44	; 68
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	8f 83       	std	Y+7, r24	; 0x07
    28b0:	98 87       	std	Y+8, r25	; 0x08
    28b2:	a9 87       	std	Y+9, r26	; 0x09
    28b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b6:	6f 81       	ldd	r22, Y+7	; 0x07
    28b8:	78 85       	ldd	r23, Y+8	; 0x08
    28ba:	89 85       	ldd	r24, Y+9	; 0x09
    28bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e8       	ldi	r20, 0x80	; 128
    28c4:	5f e3       	ldi	r21, 0x3F	; 63
    28c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ca:	88 23       	and	r24, r24
    28cc:	2c f4       	brge	.+10     	; 0x28d8 <LEDS_Converging+0xc2>
		__ticks = 1;
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	9e 83       	std	Y+6, r25	; 0x06
    28d4:	8d 83       	std	Y+5, r24	; 0x05
    28d6:	3f c0       	rjmp	.+126    	; 0x2956 <LEDS_Converging+0x140>
	else if (__tmp > 65535)
    28d8:	6f 81       	ldd	r22, Y+7	; 0x07
    28da:	78 85       	ldd	r23, Y+8	; 0x08
    28dc:	89 85       	ldd	r24, Y+9	; 0x09
    28de:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	3f ef       	ldi	r19, 0xFF	; 255
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	57 e4       	ldi	r21, 0x47	; 71
    28e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	4c f5       	brge	.+82     	; 0x2942 <LEDS_Converging+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	40 e2       	ldi	r20, 0x20	; 32
    28fe:	51 e4       	ldi	r21, 0x41	; 65
    2900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	bc 01       	movw	r22, r24
    290a:	cd 01       	movw	r24, r26
    290c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	0f c0       	rjmp	.+30     	; 0x2938 <LEDS_Converging+0x122>
    291a:	88 ec       	ldi	r24, 0xC8	; 200
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9c 83       	std	Y+4, r25	; 0x04
    2920:	8b 83       	std	Y+3, r24	; 0x03
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <LEDS_Converging+0x110>
    292a:	9c 83       	std	Y+4, r25	; 0x04
    292c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	9e 83       	std	Y+6, r25	; 0x06
    2936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2938:	8d 81       	ldd	r24, Y+5	; 0x05
    293a:	9e 81       	ldd	r25, Y+6	; 0x06
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	69 f7       	brne	.-38     	; 0x291a <LEDS_Converging+0x104>
    2940:	14 c0       	rjmp	.+40     	; 0x296a <LEDS_Converging+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2942:	6f 81       	ldd	r22, Y+7	; 0x07
    2944:	78 85       	ldd	r23, Y+8	; 0x08
    2946:	89 85       	ldd	r24, Y+9	; 0x09
    2948:	9a 85       	ldd	r25, Y+10	; 0x0a
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	9a 83       	std	Y+2, r25	; 0x02
    295c:	89 83       	std	Y+1, r24	; 0x01
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	9a 81       	ldd	r25, Y+2	; 0x02
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LEDS_Converging+0x14c>
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
				}

}
void LEDS_Converging()
{
	for (i=0;i<4;i++)
    296a:	80 91 ac 00 	lds	r24, 0x00AC
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	80 93 ac 00 	sts	0x00AC, r24
    2974:	80 91 ac 00 	lds	r24, 0x00AC
    2978:	84 30       	cpi	r24, 0x04	; 4
    297a:	08 f4       	brcc	.+2      	; 0x297e <LEDS_Converging+0x168>
    297c:	59 cf       	rjmp	.-334    	; 0x2830 <LEDS_Converging+0x1a>
					LED_voidOn(Led_arr[3-i]);
					LED_voidOn(Led_arr[4+i]);
					_delay_ms(500);
				}

				for (i=0;i<8;i++)
    297e:	10 92 ac 00 	sts	0x00AC, r1
    2982:	16 c0       	rjmp	.+44     	; 0x29b0 <LEDS_Converging+0x19a>
				{
					LED_voidOff(Led_arr[i]);
    2984:	80 91 ac 00 	lds	r24, 0x00AC
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	c9 01       	movw	r24, r18
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	82 0f       	add	r24, r18
    2994:	93 1f       	adc	r25, r19
    2996:	fc 01       	movw	r30, r24
    2998:	e2 58       	subi	r30, 0x82	; 130
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <LED_voidOff>
					LED_voidOn(Led_arr[3-i]);
					LED_voidOn(Led_arr[4+i]);
					_delay_ms(500);
				}

				for (i=0;i<8;i++)
    29a6:	80 91 ac 00 	lds	r24, 0x00AC
    29aa:	8f 5f       	subi	r24, 0xFF	; 255
    29ac:	80 93 ac 00 	sts	0x00AC, r24
    29b0:	80 91 ac 00 	lds	r24, 0x00AC
    29b4:	88 30       	cpi	r24, 0x08	; 8
    29b6:	30 f3       	brcs	.-52     	; 0x2984 <LEDS_Converging+0x16e>
				{
					LED_voidOff(Led_arr[i]);
}
}
    29b8:	2e 96       	adiw	r28, 0x0e	; 14
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <__prologue_saves__>:
    29ca:	2f 92       	push	r2
    29cc:	3f 92       	push	r3
    29ce:	4f 92       	push	r4
    29d0:	5f 92       	push	r5
    29d2:	6f 92       	push	r6
    29d4:	7f 92       	push	r7
    29d6:	8f 92       	push	r8
    29d8:	9f 92       	push	r9
    29da:	af 92       	push	r10
    29dc:	bf 92       	push	r11
    29de:	cf 92       	push	r12
    29e0:	df 92       	push	r13
    29e2:	ef 92       	push	r14
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	ca 1b       	sub	r28, r26
    29f4:	db 0b       	sbc	r29, r27
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	de bf       	out	0x3e, r29	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	cd bf       	out	0x3d, r28	; 61
    2a00:	09 94       	ijmp

00002a02 <__epilogue_restores__>:
    2a02:	2a 88       	ldd	r2, Y+18	; 0x12
    2a04:	39 88       	ldd	r3, Y+17	; 0x11
    2a06:	48 88       	ldd	r4, Y+16	; 0x10
    2a08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a14:	b9 84       	ldd	r11, Y+9	; 0x09
    2a16:	c8 84       	ldd	r12, Y+8	; 0x08
    2a18:	df 80       	ldd	r13, Y+7	; 0x07
    2a1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a20:	1b 81       	ldd	r17, Y+3	; 0x03
    2a22:	aa 81       	ldd	r26, Y+2	; 0x02
    2a24:	b9 81       	ldd	r27, Y+1	; 0x01
    2a26:	ce 0f       	add	r28, r30
    2a28:	d1 1d       	adc	r29, r1
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	ed 01       	movw	r28, r26
    2a36:	08 95       	ret

00002a38 <_exit>:
    2a38:	f8 94       	cli

00002a3a <__stop_program>:
    2a3a:	ff cf       	rjmp	.-2      	; 0x2a3a <__stop_program>
