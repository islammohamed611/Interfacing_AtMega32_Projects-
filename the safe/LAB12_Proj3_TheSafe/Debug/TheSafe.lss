
TheSafe.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020e  00800060  00003ca2  00003d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080026e  0080026e  00003f44  2**0
                  ALLOC
  3 .stab         00006150  00000000  00000000  00003f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018bc  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000b950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  0000b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000109d  00000000  00000000  0000ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000469  00000000  00000000  0000cacd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055b  00000000  00000000  0000cf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  0000d494  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016a  00000000  00000000  0000d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a1e  00000000  00000000  0000d65e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <main>
      8a:	0c 94 4f 1e 	jmp	0x3c9e	; 0x3c9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__udivdi3>:
     190:	ae e5       	ldi	r26, 0x5E	; 94
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	6a 2e       	mov	r6, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	6a 94       	dec	r6
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__udivdi3+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__udivdi3+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	29 84       	ldd	r2, Y+9	; 0x09
     1de:	3a 84       	ldd	r3, Y+10	; 0x0a
     1e0:	4b 84       	ldd	r4, Y+11	; 0x0b
     1e2:	5c 84       	ldd	r5, Y+12	; 0x0c
     1e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     1e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     1e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     1ea:	18 89       	ldd	r17, Y+16	; 0x10
     1ec:	69 80       	ldd	r6, Y+1	; 0x01
     1ee:	7a 80       	ldd	r7, Y+2	; 0x02
     1f0:	8b 80       	ldd	r8, Y+3	; 0x03
     1f2:	9c 80       	ldd	r9, Y+4	; 0x04
     1f4:	6d a6       	std	Y+45, r6	; 0x2d
     1f6:	7e a6       	std	Y+46, r7	; 0x2e
     1f8:	8f a6       	std	Y+47, r8	; 0x2f
     1fa:	98 aa       	std	Y+48, r9	; 0x30
     1fc:	6d 80       	ldd	r6, Y+5	; 0x05
     1fe:	7e 80       	ldd	r7, Y+6	; 0x06
     200:	8f 80       	ldd	r8, Y+7	; 0x07
     202:	98 84       	ldd	r9, Y+8	; 0x08
     204:	e1 14       	cp	r14, r1
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <__udivdi3+0x80>
     20e:	b3 c3       	rjmp	.+1894   	; 0x976 <__stack+0x117>
     210:	62 14       	cp	r6, r2
     212:	73 04       	cpc	r7, r3
     214:	84 04       	cpc	r8, r4
     216:	95 04       	cpc	r9, r5
     218:	08 f0       	brcs	.+2      	; 0x21c <__udivdi3+0x8c>
     21a:	3d c1       	rjmp	.+634    	; 0x496 <__udivdi3+0x306>
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	20 16       	cp	r2, r16
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	30 06       	cpc	r3, r16
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	40 06       	cpc	r4, r16
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	50 06       	cpc	r5, r16
     22c:	88 f4       	brcc	.+34     	; 0x250 <__udivdi3+0xc0>
     22e:	1f ef       	ldi	r17, 0xFF	; 255
     230:	21 16       	cp	r2, r17
     232:	31 04       	cpc	r3, r1
     234:	41 04       	cpc	r4, r1
     236:	51 04       	cpc	r5, r1
     238:	39 f0       	breq	.+14     	; 0x248 <__udivdi3+0xb8>
     23a:	30 f0       	brcs	.+12     	; 0x248 <__udivdi3+0xb8>
     23c:	48 e0       	ldi	r20, 0x08	; 8
     23e:	e4 2e       	mov	r14, r20
     240:	f1 2c       	mov	r15, r1
     242:	01 2d       	mov	r16, r1
     244:	11 2d       	mov	r17, r1
     246:	18 c0       	rjmp	.+48     	; 0x278 <__udivdi3+0xe8>
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	87 01       	movw	r16, r14
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__udivdi3+0xe8>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	22 16       	cp	r2, r18
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	32 06       	cpc	r3, r18
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	42 06       	cpc	r4, r18
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	52 06       	cpc	r5, r18
     260:	30 f0       	brcs	.+12     	; 0x26e <__udivdi3+0xde>
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	e3 2e       	mov	r14, r19
     266:	f1 2c       	mov	r15, r1
     268:	01 2d       	mov	r16, r1
     26a:	11 2d       	mov	r17, r1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__udivdi3+0xe8>
     26e:	20 e1       	ldi	r18, 0x10	; 16
     270:	e2 2e       	mov	r14, r18
     272:	f1 2c       	mov	r15, r1
     274:	01 2d       	mov	r16, r1
     276:	11 2d       	mov	r17, r1
     278:	d2 01       	movw	r26, r4
     27a:	c1 01       	movw	r24, r2
     27c:	0e 2c       	mov	r0, r14
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__udivdi3+0xf8>
     280:	b6 95       	lsr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	d2 f7       	brpl	.-12     	; 0x280 <__udivdi3+0xf0>
     28c:	82 5f       	subi	r24, 0xF2	; 242
     28e:	9e 4f       	sbci	r25, 0xFE	; 254
     290:	dc 01       	movw	r26, r24
     292:	2c 91       	ld	r18, X
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 19       	sub	r24, r14
     29e:	9f 09       	sbc	r25, r15
     2a0:	a0 0b       	sbc	r26, r16
     2a2:	b1 0b       	sbc	r27, r17
     2a4:	7c 01       	movw	r14, r24
     2a6:	8d 01       	movw	r16, r26
     2a8:	e2 1a       	sub	r14, r18
     2aa:	f1 08       	sbc	r15, r1
     2ac:	01 09       	sbc	r16, r1
     2ae:	11 09       	sbc	r17, r1
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	01 05       	cpc	r16, r1
     2b6:	11 05       	cpc	r17, r1
     2b8:	a1 f1       	breq	.+104    	; 0x322 <__udivdi3+0x192>
     2ba:	0e 2c       	mov	r0, r14
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__udivdi3+0x136>
     2be:	22 0c       	add	r2, r2
     2c0:	33 1c       	adc	r3, r3
     2c2:	44 1c       	adc	r4, r4
     2c4:	55 1c       	adc	r5, r5
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <__udivdi3+0x12e>
     2ca:	a4 01       	movw	r20, r8
     2cc:	93 01       	movw	r18, r6
     2ce:	0e 2c       	mov	r0, r14
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__udivdi3+0x14a>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	0a 94       	dec	r0
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <__udivdi3+0x142>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	8e 19       	sub	r24, r14
     2e4:	9f 09       	sbc	r25, r15
     2e6:	6d a4       	ldd	r6, Y+45	; 0x2d
     2e8:	7e a4       	ldd	r7, Y+46	; 0x2e
     2ea:	8f a4       	ldd	r8, Y+47	; 0x2f
     2ec:	98 a8       	ldd	r9, Y+48	; 0x30
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__udivdi3+0x168>
     2f0:	96 94       	lsr	r9
     2f2:	87 94       	ror	r8
     2f4:	77 94       	ror	r7
     2f6:	67 94       	ror	r6
     2f8:	8a 95       	dec	r24
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__udivdi3+0x160>
     2fc:	62 2a       	or	r6, r18
     2fe:	73 2a       	or	r7, r19
     300:	84 2a       	or	r8, r20
     302:	95 2a       	or	r9, r21
     304:	ad a4       	ldd	r10, Y+45	; 0x2d
     306:	be a4       	ldd	r11, Y+46	; 0x2e
     308:	cf a4       	ldd	r12, Y+47	; 0x2f
     30a:	d8 a8       	ldd	r13, Y+48	; 0x30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivdi3+0x186>
     30e:	aa 0c       	add	r10, r10
     310:	bb 1c       	adc	r11, r11
     312:	cc 1c       	adc	r12, r12
     314:	dd 1c       	adc	r13, r13
     316:	ea 94       	dec	r14
     318:	d2 f7       	brpl	.-12     	; 0x30e <__udivdi3+0x17e>
     31a:	ad a6       	std	Y+45, r10	; 0x2d
     31c:	be a6       	std	Y+46, r11	; 0x2e
     31e:	cf a6       	std	Y+47, r12	; 0x2f
     320:	d8 aa       	std	Y+48, r13	; 0x30
     322:	62 01       	movw	r12, r4
     324:	ee 24       	eor	r14, r14
     326:	ff 24       	eor	r15, r15
     328:	cd aa       	std	Y+53, r12	; 0x35
     32a:	de aa       	std	Y+54, r13	; 0x36
     32c:	ef aa       	std	Y+55, r14	; 0x37
     32e:	f8 ae       	std	Y+56, r15	; 0x38
     330:	92 01       	movw	r18, r4
     332:	81 01       	movw	r16, r2
     334:	20 70       	andi	r18, 0x00	; 0
     336:	30 70       	andi	r19, 0x00	; 0
     338:	09 af       	std	Y+57, r16	; 0x39
     33a:	1a af       	std	Y+58, r17	; 0x3a
     33c:	2b af       	std	Y+59, r18	; 0x3b
     33e:	3c af       	std	Y+60, r19	; 0x3c
     340:	c4 01       	movw	r24, r8
     342:	b3 01       	movw	r22, r6
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     34c:	7b 01       	movw	r14, r22
     34e:	8c 01       	movw	r16, r24
     350:	c4 01       	movw	r24, r8
     352:	b3 01       	movw	r22, r6
     354:	2d a9       	ldd	r18, Y+53	; 0x35
     356:	3e a9       	ldd	r19, Y+54	; 0x36
     358:	4f a9       	ldd	r20, Y+55	; 0x37
     35a:	58 ad       	ldd	r21, Y+56	; 0x38
     35c:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     360:	c9 01       	movw	r24, r18
     362:	da 01       	movw	r26, r20
     364:	3c 01       	movw	r6, r24
     366:	4d 01       	movw	r8, r26
     368:	c4 01       	movw	r24, r8
     36a:	b3 01       	movw	r22, r6
     36c:	29 ad       	ldd	r18, Y+57	; 0x39
     36e:	3a ad       	ldd	r19, Y+58	; 0x3a
     370:	4b ad       	ldd	r20, Y+59	; 0x3b
     372:	5c ad       	ldd	r21, Y+60	; 0x3c
     374:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	87 01       	movw	r16, r14
     37e:	ff 24       	eor	r15, r15
     380:	ee 24       	eor	r14, r14
     382:	ad a4       	ldd	r10, Y+45	; 0x2d
     384:	be a4       	ldd	r11, Y+46	; 0x2e
     386:	cf a4       	ldd	r12, Y+47	; 0x2f
     388:	d8 a8       	ldd	r13, Y+48	; 0x30
     38a:	c6 01       	movw	r24, r12
     38c:	aa 27       	eor	r26, r26
     38e:	bb 27       	eor	r27, r27
     390:	57 01       	movw	r10, r14
     392:	68 01       	movw	r12, r16
     394:	a8 2a       	or	r10, r24
     396:	b9 2a       	or	r11, r25
     398:	ca 2a       	or	r12, r26
     39a:	db 2a       	or	r13, r27
     39c:	a2 16       	cp	r10, r18
     39e:	b3 06       	cpc	r11, r19
     3a0:	c4 06       	cpc	r12, r20
     3a2:	d5 06       	cpc	r13, r21
     3a4:	e0 f4       	brcc	.+56     	; 0x3de <__udivdi3+0x24e>
     3a6:	08 94       	sec
     3a8:	61 08       	sbc	r6, r1
     3aa:	71 08       	sbc	r7, r1
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
     3b0:	a2 0c       	add	r10, r2
     3b2:	b3 1c       	adc	r11, r3
     3b4:	c4 1c       	adc	r12, r4
     3b6:	d5 1c       	adc	r13, r5
     3b8:	a2 14       	cp	r10, r2
     3ba:	b3 04       	cpc	r11, r3
     3bc:	c4 04       	cpc	r12, r4
     3be:	d5 04       	cpc	r13, r5
     3c0:	70 f0       	brcs	.+28     	; 0x3de <__udivdi3+0x24e>
     3c2:	a2 16       	cp	r10, r18
     3c4:	b3 06       	cpc	r11, r19
     3c6:	c4 06       	cpc	r12, r20
     3c8:	d5 06       	cpc	r13, r21
     3ca:	48 f4       	brcc	.+18     	; 0x3de <__udivdi3+0x24e>
     3cc:	08 94       	sec
     3ce:	61 08       	sbc	r6, r1
     3d0:	71 08       	sbc	r7, r1
     3d2:	81 08       	sbc	r8, r1
     3d4:	91 08       	sbc	r9, r1
     3d6:	a2 0c       	add	r10, r2
     3d8:	b3 1c       	adc	r11, r3
     3da:	c4 1c       	adc	r12, r4
     3dc:	d5 1c       	adc	r13, r5
     3de:	a2 1a       	sub	r10, r18
     3e0:	b3 0a       	sbc	r11, r19
     3e2:	c4 0a       	sbc	r12, r20
     3e4:	d5 0a       	sbc	r13, r21
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	2d a9       	ldd	r18, Y+53	; 0x35
     3ec:	3e a9       	ldd	r19, Y+54	; 0x36
     3ee:	4f a9       	ldd	r20, Y+55	; 0x37
     3f0:	58 ad       	ldd	r21, Y+56	; 0x38
     3f2:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	5c 01       	movw	r10, r24
     410:	6d 01       	movw	r12, r26
     412:	c6 01       	movw	r24, r12
     414:	b5 01       	movw	r22, r10
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	8d a5       	ldd	r24, Y+45	; 0x2d
     42e:	9e a5       	ldd	r25, Y+46	; 0x2e
     430:	af a5       	ldd	r26, Y+47	; 0x2f
     432:	b8 a9       	ldd	r27, Y+48	; 0x30
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	e8 2a       	or	r14, r24
     43a:	f9 2a       	or	r15, r25
     43c:	0a 2b       	or	r16, r26
     43e:	1b 2b       	or	r17, r27
     440:	e2 16       	cp	r14, r18
     442:	f3 06       	cpc	r15, r19
     444:	04 07       	cpc	r16, r20
     446:	15 07       	cpc	r17, r21
     448:	c0 f4       	brcc	.+48     	; 0x47a <__udivdi3+0x2ea>
     44a:	08 94       	sec
     44c:	a1 08       	sbc	r10, r1
     44e:	b1 08       	sbc	r11, r1
     450:	c1 08       	sbc	r12, r1
     452:	d1 08       	sbc	r13, r1
     454:	e2 0c       	add	r14, r2
     456:	f3 1c       	adc	r15, r3
     458:	04 1d       	adc	r16, r4
     45a:	15 1d       	adc	r17, r5
     45c:	e2 14       	cp	r14, r2
     45e:	f3 04       	cpc	r15, r3
     460:	04 05       	cpc	r16, r4
     462:	15 05       	cpc	r17, r5
     464:	50 f0       	brcs	.+20     	; 0x47a <__udivdi3+0x2ea>
     466:	e2 16       	cp	r14, r18
     468:	f3 06       	cpc	r15, r19
     46a:	04 07       	cpc	r16, r20
     46c:	15 07       	cpc	r17, r21
     46e:	28 f4       	brcc	.+10     	; 0x47a <__udivdi3+0x2ea>
     470:	08 94       	sec
     472:	a1 08       	sbc	r10, r1
     474:	b1 08       	sbc	r11, r1
     476:	c1 08       	sbc	r12, r1
     478:	d1 08       	sbc	r13, r1
     47a:	d3 01       	movw	r26, r6
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	86 01       	movw	r16, r12
     482:	75 01       	movw	r14, r10
     484:	e8 2a       	or	r14, r24
     486:	f9 2a       	or	r15, r25
     488:	0a 2b       	or	r16, r26
     48a:	1b 2b       	or	r17, r27
     48c:	e9 aa       	std	Y+49, r14	; 0x31
     48e:	fa aa       	std	Y+50, r15	; 0x32
     490:	0b ab       	std	Y+51, r16	; 0x33
     492:	1c ab       	std	Y+52, r17	; 0x34
     494:	cf c4       	rjmp	.+2462   	; 0xe34 <__stack+0x5d5>
     496:	21 14       	cp	r2, r1
     498:	31 04       	cpc	r3, r1
     49a:	41 04       	cpc	r4, r1
     49c:	51 04       	cpc	r5, r1
     49e:	71 f4       	brne	.+28     	; 0x4bc <__udivdi3+0x32c>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	1c 01       	movw	r2, r24
     4ba:	2d 01       	movw	r4, r26
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	20 16       	cp	r2, r16
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	30 06       	cpc	r3, r16
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	40 06       	cpc	r4, r16
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	50 06       	cpc	r5, r16
     4cc:	88 f4       	brcc	.+34     	; 0x4f0 <__udivdi3+0x360>
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	21 16       	cp	r2, r17
     4d2:	31 04       	cpc	r3, r1
     4d4:	41 04       	cpc	r4, r1
     4d6:	51 04       	cpc	r5, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <__udivdi3+0x356>
     4da:	28 f0       	brcs	.+10     	; 0x4e6 <__udivdi3+0x356>
     4dc:	48 e0       	ldi	r20, 0x08	; 8
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__udivdi3+0x384>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <__udivdi3+0x384>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	22 16       	cp	r2, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	32 06       	cpc	r3, r18
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	42 06       	cpc	r4, r18
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	52 06       	cpc	r5, r18
     500:	28 f0       	brcs	.+10     	; 0x50c <__udivdi3+0x37c>
     502:	48 e1       	ldi	r20, 0x18	; 24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x384>
     50c:	40 e1       	ldi	r20, 0x10	; 16
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	d2 01       	movw	r26, r4
     516:	c1 01       	movw	r24, r2
     518:	04 2e       	mov	r0, r20
     51a:	04 c0       	rjmp	.+8      	; 0x524 <__udivdi3+0x394>
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0a 94       	dec	r0
     526:	d2 f7       	brpl	.-12     	; 0x51c <__udivdi3+0x38c>
     528:	82 5f       	subi	r24, 0xF2	; 242
     52a:	9e 4f       	sbci	r25, 0xFE	; 254
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	ee 2e       	mov	r14, r30
     534:	f1 2c       	mov	r15, r1
     536:	01 2d       	mov	r16, r1
     538:	11 2d       	mov	r17, r1
     53a:	d8 01       	movw	r26, r16
     53c:	c7 01       	movw	r24, r14
     53e:	84 1b       	sub	r24, r20
     540:	95 0b       	sbc	r25, r21
     542:	a6 0b       	sbc	r26, r22
     544:	b7 0b       	sbc	r27, r23
     546:	82 1b       	sub	r24, r18
     548:	91 09       	sbc	r25, r1
     54a:	a1 09       	sbc	r26, r1
     54c:	b1 09       	sbc	r27, r1
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	61 f4       	brne	.+24     	; 0x56e <__udivdi3+0x3de>
     556:	64 01       	movw	r12, r8
     558:	53 01       	movw	r10, r6
     55a:	a2 18       	sub	r10, r2
     55c:	b3 08       	sbc	r11, r3
     55e:	c4 08       	sbc	r12, r4
     560:	d5 08       	sbc	r13, r5
     562:	31 e0       	ldi	r19, 0x01	; 1
     564:	63 2e       	mov	r6, r19
     566:	71 2c       	mov	r7, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	1e c1       	rjmp	.+572    	; 0x7aa <__udivdi3+0x61a>
     56e:	6f 96       	adiw	r28, 0x1f	; 31
     570:	8f af       	std	Y+63, r24	; 0x3f
     572:	6f 97       	sbiw	r28, 0x1f	; 31
     574:	08 2e       	mov	r0, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__udivdi3+0x3f0>
     578:	22 0c       	add	r2, r2
     57a:	33 1c       	adc	r3, r3
     57c:	44 1c       	adc	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <__udivdi3+0x3e8>
     584:	ee 2d       	mov	r30, r14
     586:	e8 1b       	sub	r30, r24
     588:	64 01       	movw	r12, r8
     58a:	53 01       	movw	r10, r6
     58c:	0e 2e       	mov	r0, r30
     58e:	04 c0       	rjmp	.+8      	; 0x598 <__udivdi3+0x408>
     590:	d6 94       	lsr	r13
     592:	c7 94       	ror	r12
     594:	b7 94       	ror	r11
     596:	a7 94       	ror	r10
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <__udivdi3+0x400>
     59c:	a4 01       	movw	r20, r8
     59e:	93 01       	movw	r18, r6
     5a0:	6f 96       	adiw	r28, 0x1f	; 31
     5a2:	0f ac       	ldd	r0, Y+63	; 0x3f
     5a4:	6f 97       	sbiw	r28, 0x1f	; 31
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__udivdi3+0x420>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	0a 94       	dec	r0
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__udivdi3+0x418>
     5b4:	6d a4       	ldd	r6, Y+45	; 0x2d
     5b6:	7e a4       	ldd	r7, Y+46	; 0x2e
     5b8:	8f a4       	ldd	r8, Y+47	; 0x2f
     5ba:	98 a8       	ldd	r9, Y+48	; 0x30
     5bc:	0e 2e       	mov	r0, r30
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x438>
     5c0:	96 94       	lsr	r9
     5c2:	87 94       	ror	r8
     5c4:	77 94       	ror	r7
     5c6:	67 94       	ror	r6
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x430>
     5cc:	84 01       	movw	r16, r8
     5ce:	73 01       	movw	r14, r6
     5d0:	e2 2a       	or	r14, r18
     5d2:	f3 2a       	or	r15, r19
     5d4:	04 2b       	or	r16, r20
     5d6:	15 2b       	or	r17, r21
     5d8:	e9 a6       	std	Y+41, r14	; 0x29
     5da:	fa a6       	std	Y+42, r15	; 0x2a
     5dc:	0b a7       	std	Y+43, r16	; 0x2b
     5de:	1c a7       	std	Y+44, r17	; 0x2c
     5e0:	32 01       	movw	r6, r4
     5e2:	88 24       	eor	r8, r8
     5e4:	99 24       	eor	r9, r9
     5e6:	92 01       	movw	r18, r4
     5e8:	81 01       	movw	r16, r2
     5ea:	20 70       	andi	r18, 0x00	; 0
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0c af       	std	Y+60, r16	; 0x3c
     5f2:	1d af       	std	Y+61, r17	; 0x3d
     5f4:	2e af       	std	Y+62, r18	; 0x3e
     5f6:	3f af       	std	Y+63, r19	; 0x3f
     5f8:	21 97       	sbiw	r28, 0x01	; 1
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	a4 01       	movw	r20, r8
     600:	93 01       	movw	r18, r6
     602:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	a4 01       	movw	r20, r8
     610:	93 01       	movw	r18, r6
     612:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	25 96       	adiw	r28, 0x05	; 5
     61c:	8c af       	std	Y+60, r24	; 0x3c
     61e:	9d af       	std	Y+61, r25	; 0x3d
     620:	ae af       	std	Y+62, r26	; 0x3e
     622:	bf af       	std	Y+63, r27	; 0x3f
     624:	25 97       	sbiw	r28, 0x05	; 5
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	21 96       	adiw	r28, 0x01	; 1
     62c:	2c ad       	ldd	r18, Y+60	; 0x3c
     62e:	3d ad       	ldd	r19, Y+61	; 0x3d
     630:	4e ad       	ldd	r20, Y+62	; 0x3e
     632:	5f ad       	ldd	r21, Y+63	; 0x3f
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	87 01       	movw	r16, r14
     640:	ff 24       	eor	r15, r15
     642:	ee 24       	eor	r14, r14
     644:	a9 a4       	ldd	r10, Y+41	; 0x29
     646:	ba a4       	ldd	r11, Y+42	; 0x2a
     648:	cb a4       	ldd	r12, Y+43	; 0x2b
     64a:	dc a4       	ldd	r13, Y+44	; 0x2c
     64c:	c6 01       	movw	r24, r12
     64e:	aa 27       	eor	r26, r26
     650:	bb 27       	eor	r27, r27
     652:	5c 01       	movw	r10, r24
     654:	6d 01       	movw	r12, r26
     656:	ae 28       	or	r10, r14
     658:	bf 28       	or	r11, r15
     65a:	c0 2a       	or	r12, r16
     65c:	d1 2a       	or	r13, r17
     65e:	a2 16       	cp	r10, r18
     660:	b3 06       	cpc	r11, r19
     662:	c4 06       	cpc	r12, r20
     664:	d5 06       	cpc	r13, r21
     666:	60 f5       	brcc	.+88     	; 0x6c0 <__udivdi3+0x530>
     668:	25 96       	adiw	r28, 0x05	; 5
     66a:	6c ad       	ldd	r22, Y+60	; 0x3c
     66c:	7d ad       	ldd	r23, Y+61	; 0x3d
     66e:	8e ad       	ldd	r24, Y+62	; 0x3e
     670:	9f ad       	ldd	r25, Y+63	; 0x3f
     672:	25 97       	sbiw	r28, 0x05	; 5
     674:	61 50       	subi	r22, 0x01	; 1
     676:	70 40       	sbci	r23, 0x00	; 0
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	25 96       	adiw	r28, 0x05	; 5
     67e:	6c af       	std	Y+60, r22	; 0x3c
     680:	7d af       	std	Y+61, r23	; 0x3d
     682:	8e af       	std	Y+62, r24	; 0x3e
     684:	9f af       	std	Y+63, r25	; 0x3f
     686:	25 97       	sbiw	r28, 0x05	; 5
     688:	a2 0c       	add	r10, r2
     68a:	b3 1c       	adc	r11, r3
     68c:	c4 1c       	adc	r12, r4
     68e:	d5 1c       	adc	r13, r5
     690:	a2 14       	cp	r10, r2
     692:	b3 04       	cpc	r11, r3
     694:	c4 04       	cpc	r12, r4
     696:	d5 04       	cpc	r13, r5
     698:	98 f0       	brcs	.+38     	; 0x6c0 <__udivdi3+0x530>
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	c4 06       	cpc	r12, r20
     6a0:	d5 06       	cpc	r13, r21
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__udivdi3+0x530>
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	6c af       	std	Y+60, r22	; 0x3c
     6b0:	7d af       	std	Y+61, r23	; 0x3d
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	9f af       	std	Y+63, r25	; 0x3f
     6b6:	25 97       	sbiw	r28, 0x05	; 5
     6b8:	a2 0c       	add	r10, r2
     6ba:	b3 1c       	adc	r11, r3
     6bc:	c4 1c       	adc	r12, r4
     6be:	d5 1c       	adc	r13, r5
     6c0:	a2 1a       	sub	r10, r18
     6c2:	b3 0a       	sbc	r11, r19
     6c4:	c4 0a       	sbc	r12, r20
     6c6:	d5 0a       	sbc	r13, r21
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	a4 01       	movw	r20, r8
     6ce:	93 01       	movw	r18, r6
     6d0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     6d4:	7b 01       	movw	r14, r22
     6d6:	8c 01       	movw	r16, r24
     6d8:	c6 01       	movw	r24, r12
     6da:	b5 01       	movw	r22, r10
     6dc:	a4 01       	movw	r20, r8
     6de:	93 01       	movw	r18, r6
     6e0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     6e4:	c9 01       	movw	r24, r18
     6e6:	da 01       	movw	r26, r20
     6e8:	3c 01       	movw	r6, r24
     6ea:	4d 01       	movw	r8, r26
     6ec:	c4 01       	movw	r24, r8
     6ee:	b3 01       	movw	r22, r6
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6f4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6fa:	21 97       	sbiw	r28, 0x01	; 1
     6fc:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	87 01       	movw	r16, r14
     706:	ff 24       	eor	r15, r15
     708:	ee 24       	eor	r14, r14
     70a:	89 a5       	ldd	r24, Y+41	; 0x29
     70c:	9a a5       	ldd	r25, Y+42	; 0x2a
     70e:	ab a5       	ldd	r26, Y+43	; 0x2b
     710:	bc a5       	ldd	r27, Y+44	; 0x2c
     712:	a0 70       	andi	r26, 0x00	; 0
     714:	b0 70       	andi	r27, 0x00	; 0
     716:	57 01       	movw	r10, r14
     718:	68 01       	movw	r12, r16
     71a:	a8 2a       	or	r10, r24
     71c:	b9 2a       	or	r11, r25
     71e:	ca 2a       	or	r12, r26
     720:	db 2a       	or	r13, r27
     722:	a2 16       	cp	r10, r18
     724:	b3 06       	cpc	r11, r19
     726:	c4 06       	cpc	r12, r20
     728:	d5 06       	cpc	r13, r21
     72a:	e0 f4       	brcc	.+56     	; 0x764 <__udivdi3+0x5d4>
     72c:	08 94       	sec
     72e:	61 08       	sbc	r6, r1
     730:	71 08       	sbc	r7, r1
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	a2 0c       	add	r10, r2
     738:	b3 1c       	adc	r11, r3
     73a:	c4 1c       	adc	r12, r4
     73c:	d5 1c       	adc	r13, r5
     73e:	a2 14       	cp	r10, r2
     740:	b3 04       	cpc	r11, r3
     742:	c4 04       	cpc	r12, r4
     744:	d5 04       	cpc	r13, r5
     746:	70 f0       	brcs	.+28     	; 0x764 <__udivdi3+0x5d4>
     748:	a2 16       	cp	r10, r18
     74a:	b3 06       	cpc	r11, r19
     74c:	c4 06       	cpc	r12, r20
     74e:	d5 06       	cpc	r13, r21
     750:	48 f4       	brcc	.+18     	; 0x764 <__udivdi3+0x5d4>
     752:	08 94       	sec
     754:	61 08       	sbc	r6, r1
     756:	71 08       	sbc	r7, r1
     758:	81 08       	sbc	r8, r1
     75a:	91 08       	sbc	r9, r1
     75c:	a2 0c       	add	r10, r2
     75e:	b3 1c       	adc	r11, r3
     760:	c4 1c       	adc	r12, r4
     762:	d5 1c       	adc	r13, r5
     764:	8d a5       	ldd	r24, Y+45	; 0x2d
     766:	9e a5       	ldd	r25, Y+46	; 0x2e
     768:	af a5       	ldd	r26, Y+47	; 0x2f
     76a:	b8 a9       	ldd	r27, Y+48	; 0x30
     76c:	6f 96       	adiw	r28, 0x1f	; 31
     76e:	0f ac       	ldd	r0, Y+63	; 0x3f
     770:	6f 97       	sbiw	r28, 0x1f	; 31
     772:	04 c0       	rjmp	.+8      	; 0x77c <__udivdi3+0x5ec>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	aa 1f       	adc	r26, r26
     77a:	bb 1f       	adc	r27, r27
     77c:	0a 94       	dec	r0
     77e:	d2 f7       	brpl	.-12     	; 0x774 <__udivdi3+0x5e4>
     780:	8d a7       	std	Y+45, r24	; 0x2d
     782:	9e a7       	std	Y+46, r25	; 0x2e
     784:	af a7       	std	Y+47, r26	; 0x2f
     786:	b8 ab       	std	Y+48, r27	; 0x30
     788:	a2 1a       	sub	r10, r18
     78a:	b3 0a       	sbc	r11, r19
     78c:	c4 0a       	sbc	r12, r20
     78e:	d5 0a       	sbc	r13, r21
     790:	25 96       	adiw	r28, 0x05	; 5
     792:	ec ac       	ldd	r14, Y+60	; 0x3c
     794:	fd ac       	ldd	r15, Y+61	; 0x3d
     796:	0e ad       	ldd	r16, Y+62	; 0x3e
     798:	1f ad       	ldd	r17, Y+63	; 0x3f
     79a:	25 97       	sbiw	r28, 0x05	; 5
     79c:	d7 01       	movw	r26, r14
     79e:	99 27       	eor	r25, r25
     7a0:	88 27       	eor	r24, r24
     7a2:	68 2a       	or	r6, r24
     7a4:	79 2a       	or	r7, r25
     7a6:	8a 2a       	or	r8, r26
     7a8:	9b 2a       	or	r9, r27
     7aa:	82 01       	movw	r16, r4
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	29 96       	adiw	r28, 0x09	; 9
     7b2:	0c af       	std	Y+60, r16	; 0x3c
     7b4:	1d af       	std	Y+61, r17	; 0x3d
     7b6:	2e af       	std	Y+62, r18	; 0x3e
     7b8:	3f af       	std	Y+63, r19	; 0x3f
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	a2 01       	movw	r20, r4
     7be:	91 01       	movw	r18, r2
     7c0:	40 70       	andi	r20, 0x00	; 0
     7c2:	50 70       	andi	r21, 0x00	; 0
     7c4:	2d 96       	adiw	r28, 0x0d	; 13
     7c6:	2c af       	std	Y+60, r18	; 0x3c
     7c8:	3d af       	std	Y+61, r19	; 0x3d
     7ca:	4e af       	std	Y+62, r20	; 0x3e
     7cc:	5f af       	std	Y+63, r21	; 0x3f
     7ce:	2d 97       	sbiw	r28, 0x0d	; 13
     7d0:	c6 01       	movw	r24, r12
     7d2:	b5 01       	movw	r22, r10
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     7da:	4e ad       	ldd	r20, Y+62	; 0x3e
     7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     7e4:	7b 01       	movw	r14, r22
     7e6:	8c 01       	movw	r16, r24
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	29 96       	adiw	r28, 0x09	; 9
     7ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     7f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     7f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     7fc:	c9 01       	movw	r24, r18
     7fe:	da 01       	movw	r26, r20
     800:	61 96       	adiw	r28, 0x11	; 17
     802:	8c af       	std	Y+60, r24	; 0x3c
     804:	9d af       	std	Y+61, r25	; 0x3d
     806:	ae af       	std	Y+62, r26	; 0x3e
     808:	bf af       	std	Y+63, r27	; 0x3f
     80a:	61 97       	sbiw	r28, 0x11	; 17
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	2d 96       	adiw	r28, 0x0d	; 13
     812:	2c ad       	ldd	r18, Y+60	; 0x3c
     814:	3d ad       	ldd	r19, Y+61	; 0x3d
     816:	4e ad       	ldd	r20, Y+62	; 0x3e
     818:	5f ad       	ldd	r21, Y+63	; 0x3f
     81a:	2d 97       	sbiw	r28, 0x0d	; 13
     81c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	87 01       	movw	r16, r14
     826:	ff 24       	eor	r15, r15
     828:	ee 24       	eor	r14, r14
     82a:	ad a4       	ldd	r10, Y+45	; 0x2d
     82c:	be a4       	ldd	r11, Y+46	; 0x2e
     82e:	cf a4       	ldd	r12, Y+47	; 0x2f
     830:	d8 a8       	ldd	r13, Y+48	; 0x30
     832:	c6 01       	movw	r24, r12
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	a8 2a       	or	r10, r24
     83e:	b9 2a       	or	r11, r25
     840:	ca 2a       	or	r12, r26
     842:	db 2a       	or	r13, r27
     844:	a2 16       	cp	r10, r18
     846:	b3 06       	cpc	r11, r19
     848:	c4 06       	cpc	r12, r20
     84a:	d5 06       	cpc	r13, r21
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <__stack+0x47>
     84e:	61 96       	adiw	r28, 0x11	; 17
     850:	6c ad       	ldd	r22, Y+60	; 0x3c
     852:	7d ad       	ldd	r23, Y+61	; 0x3d
     854:	8e ad       	ldd	r24, Y+62	; 0x3e
     856:	9f ad       	ldd	r25, Y+63	; 0x3f
     858:	61 97       	sbiw	r28, 0x11	; 17
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	61 96       	adiw	r28, 0x11	; 17
     864:	6c af       	std	Y+60, r22	; 0x3c
     866:	7d af       	std	Y+61, r23	; 0x3d
     868:	8e af       	std	Y+62, r24	; 0x3e
     86a:	9f af       	std	Y+63, r25	; 0x3f
     86c:	61 97       	sbiw	r28, 0x11	; 17
     86e:	a2 0c       	add	r10, r2
     870:	b3 1c       	adc	r11, r3
     872:	c4 1c       	adc	r12, r4
     874:	d5 1c       	adc	r13, r5
     876:	a2 14       	cp	r10, r2
     878:	b3 04       	cpc	r11, r3
     87a:	c4 04       	cpc	r12, r4
     87c:	d5 04       	cpc	r13, r5
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <__stack+0x47>
     880:	a2 16       	cp	r10, r18
     882:	b3 06       	cpc	r11, r19
     884:	c4 06       	cpc	r12, r20
     886:	d5 06       	cpc	r13, r21
     888:	70 f4       	brcc	.+28     	; 0x8a6 <__stack+0x47>
     88a:	61 50       	subi	r22, 0x01	; 1
     88c:	70 40       	sbci	r23, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	61 96       	adiw	r28, 0x11	; 17
     894:	6c af       	std	Y+60, r22	; 0x3c
     896:	7d af       	std	Y+61, r23	; 0x3d
     898:	8e af       	std	Y+62, r24	; 0x3e
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	61 97       	sbiw	r28, 0x11	; 17
     89e:	a2 0c       	add	r10, r2
     8a0:	b3 1c       	adc	r11, r3
     8a2:	c4 1c       	adc	r12, r4
     8a4:	d5 1c       	adc	r13, r5
     8a6:	a2 1a       	sub	r10, r18
     8a8:	b3 0a       	sbc	r11, r19
     8aa:	c4 0a       	sbc	r12, r20
     8ac:	d5 0a       	sbc	r13, r21
     8ae:	c6 01       	movw	r24, r12
     8b0:	b5 01       	movw	r22, r10
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     8bc:	29 97       	sbiw	r28, 0x09	; 9
     8be:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	29 96       	adiw	r28, 0x09	; 9
     8cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     8d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d4:	29 97       	sbiw	r28, 0x09	; 9
     8d6:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	5c 01       	movw	r10, r24
     8e0:	6d 01       	movw	r12, r26
     8e2:	c6 01       	movw	r24, r12
     8e4:	b5 01       	movw	r22, r10
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	2d 97       	sbiw	r28, 0x0d	; 13
     8f2:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	8d a5       	ldd	r24, Y+45	; 0x2d
     902:	9e a5       	ldd	r25, Y+46	; 0x2e
     904:	af a5       	ldd	r26, Y+47	; 0x2f
     906:	b8 a9       	ldd	r27, Y+48	; 0x30
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	e8 2a       	or	r14, r24
     90e:	f9 2a       	or	r15, r25
     910:	0a 2b       	or	r16, r26
     912:	1b 2b       	or	r17, r27
     914:	e2 16       	cp	r14, r18
     916:	f3 06       	cpc	r15, r19
     918:	04 07       	cpc	r16, r20
     91a:	15 07       	cpc	r17, r21
     91c:	c0 f4       	brcc	.+48     	; 0x94e <__stack+0xef>
     91e:	08 94       	sec
     920:	a1 08       	sbc	r10, r1
     922:	b1 08       	sbc	r11, r1
     924:	c1 08       	sbc	r12, r1
     926:	d1 08       	sbc	r13, r1
     928:	e2 0c       	add	r14, r2
     92a:	f3 1c       	adc	r15, r3
     92c:	04 1d       	adc	r16, r4
     92e:	15 1d       	adc	r17, r5
     930:	e2 14       	cp	r14, r2
     932:	f3 04       	cpc	r15, r3
     934:	04 05       	cpc	r16, r4
     936:	15 05       	cpc	r17, r5
     938:	50 f0       	brcs	.+20     	; 0x94e <__stack+0xef>
     93a:	e2 16       	cp	r14, r18
     93c:	f3 06       	cpc	r15, r19
     93e:	04 07       	cpc	r16, r20
     940:	15 07       	cpc	r17, r21
     942:	28 f4       	brcc	.+10     	; 0x94e <__stack+0xef>
     944:	08 94       	sec
     946:	a1 08       	sbc	r10, r1
     948:	b1 08       	sbc	r11, r1
     94a:	c1 08       	sbc	r12, r1
     94c:	d1 08       	sbc	r13, r1
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	ec ac       	ldd	r14, Y+60	; 0x3c
     952:	fd ac       	ldd	r15, Y+61	; 0x3d
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	61 97       	sbiw	r28, 0x11	; 17
     95a:	d7 01       	movw	r26, r14
     95c:	99 27       	eor	r25, r25
     95e:	88 27       	eor	r24, r24
     960:	96 01       	movw	r18, r12
     962:	85 01       	movw	r16, r10
     964:	08 2b       	or	r16, r24
     966:	19 2b       	or	r17, r25
     968:	2a 2b       	or	r18, r26
     96a:	3b 2b       	or	r19, r27
     96c:	09 ab       	std	Y+49, r16	; 0x31
     96e:	1a ab       	std	Y+50, r17	; 0x32
     970:	2b ab       	std	Y+51, r18	; 0x33
     972:	3c ab       	std	Y+52, r19	; 0x34
     974:	62 c2       	rjmp	.+1220   	; 0xe3a <__stack+0x5db>
     976:	6e 14       	cp	r6, r14
     978:	7f 04       	cpc	r7, r15
     97a:	80 06       	cpc	r8, r16
     97c:	91 06       	cpc	r9, r17
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	51 c2       	rjmp	.+1186   	; 0xe24 <__stack+0x5c5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e2 16       	cp	r14, r18
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f2 06       	cpc	r15, r18
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	02 07       	cpc	r16, r18
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	12 07       	cpc	r17, r18
     992:	88 f4       	brcc	.+34     	; 0x9b6 <__stack+0x157>
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	e3 16       	cp	r14, r19
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <__stack+0x14d>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0x17b>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0x17b>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	e4 16       	cp	r14, r20
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	f4 06       	cpc	r15, r20
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	04 07       	cpc	r16, r20
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	14 07       	cpc	r17, r20
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0x173>
     9c8:	48 e1       	ldi	r20, 0x18	; 24
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0x17b>
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	04 2e       	mov	r0, r20
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0x18b>
     9e2:	b6 95       	lsr	r27
     9e4:	a7 95       	ror	r26
     9e6:	97 95       	ror	r25
     9e8:	87 95       	ror	r24
     9ea:	0a 94       	dec	r0
     9ec:	d2 f7       	brpl	.-12     	; 0x9e2 <__stack+0x183>
     9ee:	82 5f       	subi	r24, 0xF2	; 242
     9f0:	9e 4f       	sbci	r25, 0xFE	; 254
     9f2:	dc 01       	movw	r26, r24
     9f4:	2c 91       	ld	r18, X
     9f6:	30 e2       	ldi	r19, 0x20	; 32
     9f8:	a3 2e       	mov	r10, r19
     9fa:	b1 2c       	mov	r11, r1
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	d6 01       	movw	r26, r12
     a02:	c5 01       	movw	r24, r10
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	a6 0b       	sbc	r26, r22
     a0a:	b7 0b       	sbc	r27, r23
     a0c:	82 1b       	sub	r24, r18
     a0e:	91 09       	sbc	r25, r1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	89 f4       	brne	.+34     	; 0xa3e <__stack+0x1df>
     a1c:	e6 14       	cp	r14, r6
     a1e:	f7 04       	cpc	r15, r7
     a20:	08 05       	cpc	r16, r8
     a22:	19 05       	cpc	r17, r9
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	f2 c1       	rjmp	.+996    	; 0xe0c <__stack+0x5ad>
     a28:	6d a4       	ldd	r6, Y+45	; 0x2d
     a2a:	7e a4       	ldd	r7, Y+46	; 0x2e
     a2c:	8f a4       	ldd	r8, Y+47	; 0x2f
     a2e:	98 a8       	ldd	r9, Y+48	; 0x30
     a30:	62 14       	cp	r6, r2
     a32:	73 04       	cpc	r7, r3
     a34:	84 04       	cpc	r8, r4
     a36:	95 04       	cpc	r9, r5
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	e8 c1       	rjmp	.+976    	; 0xe0c <__stack+0x5ad>
     a3c:	f3 c1       	rjmp	.+998    	; 0xe24 <__stack+0x5c5>
     a3e:	6e 96       	adiw	r28, 0x1e	; 30
     a40:	8f af       	std	Y+63, r24	; 0x3f
     a42:	6e 97       	sbiw	r28, 0x1e	; 30
     a44:	08 2e       	mov	r0, r24
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	00 1f       	adc	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__stack+0x1e9>
     a54:	6a 2d       	mov	r22, r10
     a56:	68 1b       	sub	r22, r24
     a58:	d2 01       	movw	r26, r4
     a5a:	c1 01       	movw	r24, r2
     a5c:	06 2e       	mov	r0, r22
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
     a60:	b6 95       	lsr	r27
     a62:	a7 95       	ror	r26
     a64:	97 95       	ror	r25
     a66:	87 95       	ror	r24
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x201>
     a6c:	5c 01       	movw	r10, r24
     a6e:	6d 01       	movw	r12, r26
     a70:	ae 28       	or	r10, r14
     a72:	bf 28       	or	r11, r15
     a74:	c0 2a       	or	r12, r16
     a76:	d1 2a       	or	r13, r17
     a78:	ad a2       	std	Y+37, r10	; 0x25
     a7a:	be a2       	std	Y+38, r11	; 0x26
     a7c:	cf a2       	std	Y+39, r12	; 0x27
     a7e:	d8 a6       	std	Y+40, r13	; 0x28
     a80:	72 01       	movw	r14, r4
     a82:	61 01       	movw	r12, r2
     a84:	6e 96       	adiw	r28, 0x1e	; 30
     a86:	0f ac       	ldd	r0, Y+63	; 0x3f
     a88:	6e 97       	sbiw	r28, 0x1e	; 30
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	cc 0c       	add	r12, r12
     a8e:	dd 1c       	adc	r13, r13
     a90:	ee 1c       	adc	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	c9 a2       	std	Y+33, r12	; 0x21
     a9a:	da a2       	std	Y+34, r13	; 0x22
     a9c:	eb a2       	std	Y+35, r14	; 0x23
     a9e:	fc a2       	std	Y+36, r15	; 0x24
     aa0:	64 01       	movw	r12, r8
     aa2:	53 01       	movw	r10, r6
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	d4 01       	movw	r26, r8
     ab6:	c3 01       	movw	r24, r6
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6e 97       	sbiw	r28, 0x1e	; 30
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	ed a4       	ldd	r14, Y+45	; 0x2d
     ace:	fe a4       	ldd	r15, Y+46	; 0x2e
     ad0:	0f a5       	ldd	r16, Y+47	; 0x2f
     ad2:	18 a9       	ldd	r17, Y+48	; 0x30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x27f>
     ad6:	16 95       	lsr	r17
     ad8:	07 95       	ror	r16
     ada:	f7 94       	ror	r15
     adc:	e7 94       	ror	r14
     ade:	6a 95       	dec	r22
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__stack+0x277>
     ae2:	37 01       	movw	r6, r14
     ae4:	48 01       	movw	r8, r16
     ae6:	68 2a       	or	r6, r24
     ae8:	79 2a       	or	r7, r25
     aea:	8a 2a       	or	r8, r26
     aec:	9b 2a       	or	r9, r27
     aee:	6d 8e       	std	Y+29, r6	; 0x1d
     af0:	7e 8e       	std	Y+30, r7	; 0x1e
     af2:	8f 8e       	std	Y+31, r8	; 0x1f
     af4:	98 a2       	std	Y+32, r9	; 0x20
     af6:	ed a0       	ldd	r14, Y+37	; 0x25
     af8:	fe a0       	ldd	r15, Y+38	; 0x26
     afa:	0f a1       	ldd	r16, Y+39	; 0x27
     afc:	18 a5       	ldd	r17, Y+40	; 0x28
     afe:	38 01       	movw	r6, r16
     b00:	88 24       	eor	r8, r8
     b02:	99 24       	eor	r9, r9
     b04:	98 01       	movw	r18, r16
     b06:	87 01       	movw	r16, r14
     b08:	20 70       	andi	r18, 0x00	; 0
     b0a:	30 70       	andi	r19, 0x00	; 0
     b0c:	65 96       	adiw	r28, 0x15	; 21
     b0e:	0c af       	std	Y+60, r16	; 0x3c
     b10:	1d af       	std	Y+61, r17	; 0x3d
     b12:	2e af       	std	Y+62, r18	; 0x3e
     b14:	3f af       	std	Y+63, r19	; 0x3f
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	c6 01       	movw	r24, r12
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	93 01       	movw	r18, r6
     b20:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     b24:	7b 01       	movw	r14, r22
     b26:	8c 01       	movw	r16, r24
     b28:	c6 01       	movw	r24, r12
     b2a:	b5 01       	movw	r22, r10
     b2c:	a4 01       	movw	r20, r8
     b2e:	93 01       	movw	r18, r6
     b30:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     b34:	c9 01       	movw	r24, r18
     b36:	da 01       	movw	r26, r20
     b38:	1c 01       	movw	r2, r24
     b3a:	2d 01       	movw	r4, r26
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	65 96       	adiw	r28, 0x15	; 21
     b42:	2c ad       	ldd	r18, Y+60	; 0x3c
     b44:	3d ad       	ldd	r19, Y+61	; 0x3d
     b46:	4e ad       	ldd	r20, Y+62	; 0x3e
     b48:	5f ad       	ldd	r21, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	87 01       	movw	r16, r14
     b56:	ff 24       	eor	r15, r15
     b58:	ee 24       	eor	r14, r14
     b5a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     b5c:	be 8c       	ldd	r11, Y+30	; 0x1e
     b5e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     b60:	d8 a0       	ldd	r13, Y+32	; 0x20
     b62:	c6 01       	movw	r24, r12
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	57 01       	movw	r10, r14
     b6a:	68 01       	movw	r12, r16
     b6c:	a8 2a       	or	r10, r24
     b6e:	b9 2a       	or	r11, r25
     b70:	ca 2a       	or	r12, r26
     b72:	db 2a       	or	r13, r27
     b74:	a2 16       	cp	r10, r18
     b76:	b3 06       	cpc	r11, r19
     b78:	c4 06       	cpc	r12, r20
     b7a:	d5 06       	cpc	r13, r21
     b7c:	00 f5       	brcc	.+64     	; 0xbbe <__stack+0x35f>
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
     b84:	41 08       	sbc	r4, r1
     b86:	51 08       	sbc	r5, r1
     b88:	ed a0       	ldd	r14, Y+37	; 0x25
     b8a:	fe a0       	ldd	r15, Y+38	; 0x26
     b8c:	0f a1       	ldd	r16, Y+39	; 0x27
     b8e:	18 a5       	ldd	r17, Y+40	; 0x28
     b90:	ae 0c       	add	r10, r14
     b92:	bf 1c       	adc	r11, r15
     b94:	c0 1e       	adc	r12, r16
     b96:	d1 1e       	adc	r13, r17
     b98:	ae 14       	cp	r10, r14
     b9a:	bf 04       	cpc	r11, r15
     b9c:	c0 06       	cpc	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	70 f0       	brcs	.+28     	; 0xbbe <__stack+0x35f>
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	c4 06       	cpc	r12, r20
     ba8:	d5 06       	cpc	r13, r21
     baa:	48 f4       	brcc	.+18     	; 0xbbe <__stack+0x35f>
     bac:	08 94       	sec
     bae:	21 08       	sbc	r2, r1
     bb0:	31 08       	sbc	r3, r1
     bb2:	41 08       	sbc	r4, r1
     bb4:	51 08       	sbc	r5, r1
     bb6:	ae 0c       	add	r10, r14
     bb8:	bf 1c       	adc	r11, r15
     bba:	c0 1e       	adc	r12, r16
     bbc:	d1 1e       	adc	r13, r17
     bbe:	a2 1a       	sub	r10, r18
     bc0:	b3 0a       	sbc	r11, r19
     bc2:	c4 0a       	sbc	r12, r20
     bc4:	d5 0a       	sbc	r13, r21
     bc6:	c6 01       	movw	r24, r12
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	93 01       	movw	r18, r6
     bce:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	a4 01       	movw	r20, r8
     bdc:	93 01       	movw	r18, r6
     bde:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
     be2:	c9 01       	movw	r24, r18
     be4:	da 01       	movw	r26, r20
     be6:	3c 01       	movw	r6, r24
     be8:	4d 01       	movw	r8, r26
     bea:	c4 01       	movw	r24, r8
     bec:	b3 01       	movw	r22, r6
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	65 97       	sbiw	r28, 0x15	; 21
     bfa:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	87 01       	movw	r16, r14
     c04:	ff 24       	eor	r15, r15
     c06:	ee 24       	eor	r14, r14
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	a8 2a       	or	r10, r24
     c1a:	b9 2a       	or	r11, r25
     c1c:	ca 2a       	or	r12, r26
     c1e:	db 2a       	or	r13, r27
     c20:	a2 16       	cp	r10, r18
     c22:	b3 06       	cpc	r11, r19
     c24:	c4 06       	cpc	r12, r20
     c26:	d5 06       	cpc	r13, r21
     c28:	00 f5       	brcc	.+64     	; 0xc6a <__stack+0x40b>
     c2a:	08 94       	sec
     c2c:	61 08       	sbc	r6, r1
     c2e:	71 08       	sbc	r7, r1
     c30:	81 08       	sbc	r8, r1
     c32:	91 08       	sbc	r9, r1
     c34:	6d a1       	ldd	r22, Y+37	; 0x25
     c36:	7e a1       	ldd	r23, Y+38	; 0x26
     c38:	8f a1       	ldd	r24, Y+39	; 0x27
     c3a:	98 a5       	ldd	r25, Y+40	; 0x28
     c3c:	a6 0e       	add	r10, r22
     c3e:	b7 1e       	adc	r11, r23
     c40:	c8 1e       	adc	r12, r24
     c42:	d9 1e       	adc	r13, r25
     c44:	a6 16       	cp	r10, r22
     c46:	b7 06       	cpc	r11, r23
     c48:	c8 06       	cpc	r12, r24
     c4a:	d9 06       	cpc	r13, r25
     c4c:	70 f0       	brcs	.+28     	; 0xc6a <__stack+0x40b>
     c4e:	a2 16       	cp	r10, r18
     c50:	b3 06       	cpc	r11, r19
     c52:	c4 06       	cpc	r12, r20
     c54:	d5 06       	cpc	r13, r21
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__stack+0x40b>
     c58:	08 94       	sec
     c5a:	61 08       	sbc	r6, r1
     c5c:	71 08       	sbc	r7, r1
     c5e:	81 08       	sbc	r8, r1
     c60:	91 08       	sbc	r9, r1
     c62:	a6 0e       	add	r10, r22
     c64:	b7 1e       	adc	r11, r23
     c66:	c8 1e       	adc	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	d6 01       	movw	r26, r12
     c6c:	c5 01       	movw	r24, r10
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	a4 0b       	sbc	r26, r20
     c74:	b5 0b       	sbc	r27, r21
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
     c7e:	d1 01       	movw	r26, r2
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	64 01       	movw	r12, r8
     c86:	53 01       	movw	r10, r6
     c88:	a8 2a       	or	r10, r24
     c8a:	b9 2a       	or	r11, r25
     c8c:	ca 2a       	or	r12, r26
     c8e:	db 2a       	or	r13, r27
     c90:	a9 aa       	std	Y+49, r10	; 0x31
     c92:	ba aa       	std	Y+50, r11	; 0x32
     c94:	cb aa       	std	Y+51, r12	; 0x33
     c96:	dc aa       	std	Y+52, r13	; 0x34
     c98:	86 01       	movw	r16, r12
     c9a:	75 01       	movw	r14, r10
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	e2 22       	and	r14, r18
     ca6:	f3 22       	and	r15, r19
     ca8:	04 23       	and	r16, r20
     caa:	15 23       	and	r17, r21
     cac:	a6 01       	movw	r20, r12
     cae:	66 27       	eor	r22, r22
     cb0:	77 27       	eor	r23, r23
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	4c af       	std	Y+60, r20	; 0x3c
     cb6:	5d af       	std	Y+61, r21	; 0x3d
     cb8:	6e af       	std	Y+62, r22	; 0x3e
     cba:	7f af       	std	Y+63, r23	; 0x3f
     cbc:	6d 97       	sbiw	r28, 0x1d	; 29
     cbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     cc0:	ba a0       	ldd	r11, Y+34	; 0x22
     cc2:	cb a0       	ldd	r12, Y+35	; 0x23
     cc4:	dc a0       	ldd	r13, Y+36	; 0x24
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 22       	and	r10, r22
     cd0:	b7 22       	and	r11, r23
     cd2:	c8 22       	and	r12, r24
     cd4:	d9 22       	and	r13, r25
     cd6:	89 a1       	ldd	r24, Y+33	; 0x21
     cd8:	9a a1       	ldd	r25, Y+34	; 0x22
     cda:	ab a1       	ldd	r26, Y+35	; 0x23
     cdc:	bc a1       	ldd	r27, Y+36	; 0x24
     cde:	1d 01       	movw	r2, r26
     ce0:	44 24       	eor	r4, r4
     ce2:	55 24       	eor	r5, r5
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	95 01       	movw	r18, r10
     cec:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     cf0:	69 96       	adiw	r28, 0x19	; 25
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	69 97       	sbiw	r28, 0x19	; 25
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	a2 01       	movw	r20, r4
     d02:	91 01       	movw	r18, r2
     d04:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     d08:	3b 01       	movw	r6, r22
     d0a:	4c 01       	movw	r8, r24
     d0c:	6d 96       	adiw	r28, 0x1d	; 29
     d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d10:	7d ad       	ldd	r23, Y+61	; 0x3d
     d12:	8e ad       	ldd	r24, Y+62	; 0x3e
     d14:	9f ad       	ldd	r25, Y+63	; 0x3f
     d16:	6d 97       	sbiw	r28, 0x1d	; 29
     d18:	a6 01       	movw	r20, r12
     d1a:	95 01       	movw	r18, r10
     d1c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	6d 96       	adiw	r28, 0x1d	; 29
     d26:	6c ad       	ldd	r22, Y+60	; 0x3c
     d28:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2e:	6d 97       	sbiw	r28, 0x1d	; 29
     d30:	a2 01       	movw	r20, r4
     d32:	91 01       	movw	r18, r2
     d34:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
     d3c:	a8 01       	movw	r20, r16
     d3e:	97 01       	movw	r18, r14
     d40:	26 0d       	add	r18, r6
     d42:	37 1d       	adc	r19, r7
     d44:	48 1d       	adc	r20, r8
     d46:	59 1d       	adc	r21, r9
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c ac       	ldd	r6, Y+60	; 0x3c
     d4c:	7d ac       	ldd	r7, Y+61	; 0x3d
     d4e:	8e ac       	ldd	r8, Y+62	; 0x3e
     d50:	9f ac       	ldd	r9, Y+63	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c4 01       	movw	r24, r8
     d56:	aa 27       	eor	r26, r26
     d58:	bb 27       	eor	r27, r27
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	2e 15       	cp	r18, r14
     d64:	3f 05       	cpc	r19, r15
     d66:	40 07       	cpc	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	48 f4       	brcc	.+18     	; 0xd7e <__stack+0x51f>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	06 2f       	mov	r16, r22
     d74:	11 2d       	mov	r17, r1
     d76:	ae 0c       	add	r10, r14
     d78:	bf 1c       	adc	r11, r15
     d7a:	c0 1e       	adc	r12, r16
     d7c:	d1 1e       	adc	r13, r17
     d7e:	ca 01       	movw	r24, r20
     d80:	aa 27       	eor	r26, r26
     d82:	bb 27       	eor	r27, r27
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	6a 0d       	add	r22, r10
     d8a:	7b 1d       	adc	r23, r11
     d8c:	8c 1d       	adc	r24, r12
     d8e:	9d 1d       	adc	r25, r13
     d90:	69 8c       	ldd	r6, Y+25	; 0x19
     d92:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d94:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d96:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d98:	66 16       	cp	r6, r22
     d9a:	77 06       	cpc	r7, r23
     d9c:	88 06       	cpc	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	40 f1       	brcs	.+80     	; 0xdf2 <__stack+0x593>
     da2:	66 15       	cp	r22, r6
     da4:	77 05       	cpc	r23, r7
     da6:	88 05       	cpc	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__stack+0x5d5>
     dae:	d9 01       	movw	r26, r18
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	69 96       	adiw	r28, 0x19	; 25
     db6:	2c ad       	ldd	r18, Y+60	; 0x3c
     db8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dba:	4e ad       	ldd	r20, Y+62	; 0x3e
     dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbe:	69 97       	sbiw	r28, 0x19	; 25
     dc0:	40 70       	andi	r20, 0x00	; 0
     dc2:	50 70       	andi	r21, 0x00	; 0
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	a4 1f       	adc	r26, r20
     dca:	b5 1f       	adc	r27, r21
     dcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     dce:	3e a5       	ldd	r19, Y+46	; 0x2e
     dd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     dd2:	58 a9       	ldd	r21, Y+48	; 0x30
     dd4:	6e 96       	adiw	r28, 0x1e	; 30
     dd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd8:	6e 97       	sbiw	r28, 0x1e	; 30
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__stack+0x585>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <__stack+0x57d>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	08 f5       	brcc	.+66     	; 0xe34 <__stack+0x5d5>
     df2:	09 a9       	ldd	r16, Y+49	; 0x31
     df4:	1a a9       	ldd	r17, Y+50	; 0x32
     df6:	2b a9       	ldd	r18, Y+51	; 0x33
     df8:	3c a9       	ldd	r19, Y+52	; 0x34
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	09 ab       	std	Y+49, r16	; 0x31
     e04:	1a ab       	std	Y+50, r17	; 0x32
     e06:	2b ab       	std	Y+51, r18	; 0x33
     e08:	3c ab       	std	Y+52, r19	; 0x34
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__stack+0x5d5>
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
     e10:	43 01       	movw	r8, r6
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 ab       	std	Y+49, r18	; 0x31
     e1c:	3a ab       	std	Y+50, r19	; 0x32
     e1e:	4b ab       	std	Y+51, r20	; 0x33
     e20:	5c ab       	std	Y+52, r21	; 0x34
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x5db>
     e24:	66 24       	eor	r6, r6
     e26:	77 24       	eor	r7, r7
     e28:	43 01       	movw	r8, r6
     e2a:	19 aa       	std	Y+49, r1	; 0x31
     e2c:	1a aa       	std	Y+50, r1	; 0x32
     e2e:	1b aa       	std	Y+51, r1	; 0x33
     e30:	1c aa       	std	Y+52, r1	; 0x34
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__stack+0x5db>
     e34:	66 24       	eor	r6, r6
     e36:	77 24       	eor	r7, r7
     e38:	43 01       	movw	r8, r6
     e3a:	fe 01       	movw	r30, r28
     e3c:	71 96       	adiw	r30, 0x11	; 17
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	df 01       	movw	r26, r30
     e42:	1d 92       	st	X+, r1
     e44:	8a 95       	dec	r24
     e46:	e9 f7       	brne	.-6      	; 0xe42 <__stack+0x5e3>
     e48:	a9 a8       	ldd	r10, Y+49	; 0x31
     e4a:	ba a8       	ldd	r11, Y+50	; 0x32
     e4c:	cb a8       	ldd	r12, Y+51	; 0x33
     e4e:	dc a8       	ldd	r13, Y+52	; 0x34
     e50:	a9 8a       	std	Y+17, r10	; 0x11
     e52:	ba 8a       	std	Y+18, r11	; 0x12
     e54:	cb 8a       	std	Y+19, r12	; 0x13
     e56:	dc 8a       	std	Y+20, r13	; 0x14
     e58:	6d 8a       	std	Y+21, r6	; 0x15
     e5a:	7e 8a       	std	Y+22, r7	; 0x16
     e5c:	8f 8a       	std	Y+23, r8	; 0x17
     e5e:	98 8e       	std	Y+24, r9	; 0x18
     e60:	29 a9       	ldd	r18, Y+49	; 0x31
     e62:	3a 89       	ldd	r19, Y+18	; 0x12
     e64:	4b 89       	ldd	r20, Y+19	; 0x13
     e66:	5c 89       	ldd	r21, Y+20	; 0x14
     e68:	66 2d       	mov	r22, r6
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	c2 5a       	subi	r28, 0xA2	; 162
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	e2 e1       	ldi	r30, 0x12	; 18
     e76:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__>

00000e7a <__umoddi3>:
     e7a:	ab e5       	ldi	r26, 0x5B	; 91
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 18 1e 	jmp	0x3c30	; 0x3c30 <__prologue_saves__>
     e86:	a8 e0       	ldi	r26, 0x08	; 8
     e88:	4e 01       	movw	r8, r28
     e8a:	08 94       	sec
     e8c:	81 1c       	adc	r8, r1
     e8e:	91 1c       	adc	r9, r1
     e90:	f4 01       	movw	r30, r8
     e92:	6a 2e       	mov	r6, r26
     e94:	11 92       	st	Z+, r1
     e96:	6a 94       	dec	r6
     e98:	e9 f7       	brne	.-6      	; 0xe94 <__umoddi3+0x1a>
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	7e 83       	std	Y+6, r23	; 0x06
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	09 96       	adiw	r24, 0x09	; 9
     eae:	fc 01       	movw	r30, r24
     eb0:	11 92       	st	Z+, r1
     eb2:	aa 95       	dec	r26
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <__umoddi3+0x36>
     eb6:	a9 86       	std	Y+9, r10	; 0x09
     eb8:	ba 86       	std	Y+10, r11	; 0x0a
     eba:	cb 86       	std	Y+11, r12	; 0x0b
     ebc:	dc 86       	std	Y+12, r13	; 0x0c
     ebe:	ed 86       	std	Y+13, r14	; 0x0d
     ec0:	fe 86       	std	Y+14, r15	; 0x0e
     ec2:	0f 87       	std	Y+15, r16	; 0x0f
     ec4:	18 8b       	std	Y+16, r17	; 0x10
     ec6:	29 84       	ldd	r2, Y+9	; 0x09
     ec8:	3a 84       	ldd	r3, Y+10	; 0x0a
     eca:	4b 84       	ldd	r4, Y+11	; 0x0b
     ecc:	5c 84       	ldd	r5, Y+12	; 0x0c
     ece:	ad 84       	ldd	r10, Y+13	; 0x0d
     ed0:	be 84       	ldd	r11, Y+14	; 0x0e
     ed2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ed4:	d8 88       	ldd	r13, Y+16	; 0x10
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	4b 81       	ldd	r20, Y+3	; 0x03
     edc:	5c 81       	ldd	r21, Y+4	; 0x04
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2f af       	std	Y+63, r18	; 0x3f
     ee2:	69 97       	sbiw	r28, 0x19	; 25
     ee4:	6a 96       	adiw	r28, 0x1a	; 26
     ee6:	3f af       	std	Y+63, r19	; 0x3f
     ee8:	6a 97       	sbiw	r28, 0x1a	; 26
     eea:	6b 96       	adiw	r28, 0x1b	; 27
     eec:	4f af       	std	Y+63, r20	; 0x3f
     eee:	6b 97       	sbiw	r28, 0x1b	; 27
     ef0:	6c 96       	adiw	r28, 0x1c	; 28
     ef2:	5f af       	std	Y+63, r21	; 0x3f
     ef4:	6c 97       	sbiw	r28, 0x1c	; 28
     ef6:	6c 96       	adiw	r28, 0x1c	; 28
     ef8:	6c ac       	ldd	r6, Y+60	; 0x3c
     efa:	7d ac       	ldd	r7, Y+61	; 0x3d
     efc:	8e ac       	ldd	r8, Y+62	; 0x3e
     efe:	9f ac       	ldd	r9, Y+63	; 0x3f
     f00:	6c 97       	sbiw	r28, 0x1c	; 28
     f02:	69 aa       	std	Y+49, r6	; 0x31
     f04:	7a aa       	std	Y+50, r7	; 0x32
     f06:	8b aa       	std	Y+51, r8	; 0x33
     f08:	9c aa       	std	Y+52, r9	; 0x34
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	6d aa       	std	Y+53, r6	; 0x35
     f18:	7e aa       	std	Y+54, r7	; 0x36
     f1a:	8f aa       	std	Y+55, r8	; 0x37
     f1c:	98 ae       	std	Y+56, r9	; 0x38
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	c1 04       	cpc	r12, r1
     f24:	d1 04       	cpc	r13, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <__umoddi3+0xb0>
     f28:	04 c3       	rjmp	.+1544   	; 0x1532 <__umoddi3+0x6b8>
     f2a:	62 14       	cp	r6, r2
     f2c:	73 04       	cpc	r7, r3
     f2e:	84 04       	cpc	r8, r4
     f30:	95 04       	cpc	r9, r5
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__umoddi3+0xbc>
     f34:	00 c1       	rjmp	.+512    	; 0x1136 <__umoddi3+0x2bc>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	20 16       	cp	r2, r16
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	30 06       	cpc	r3, r16
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	40 06       	cpc	r4, r16
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	50 06       	cpc	r5, r16
     f46:	88 f4       	brcc	.+34     	; 0xf6a <__umoddi3+0xf0>
     f48:	1f ef       	ldi	r17, 0xFF	; 255
     f4a:	21 16       	cp	r2, r17
     f4c:	31 04       	cpc	r3, r1
     f4e:	41 04       	cpc	r4, r1
     f50:	51 04       	cpc	r5, r1
     f52:	39 f0       	breq	.+14     	; 0xf62 <__umoddi3+0xe8>
     f54:	30 f0       	brcs	.+12     	; 0xf62 <__umoddi3+0xe8>
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	e8 2e       	mov	r14, r24
     f5a:	f1 2c       	mov	r15, r1
     f5c:	01 2d       	mov	r16, r1
     f5e:	11 2d       	mov	r17, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__umoddi3+0x118>
     f62:	ee 24       	eor	r14, r14
     f64:	ff 24       	eor	r15, r15
     f66:	87 01       	movw	r16, r14
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__umoddi3+0x118>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	24 16       	cp	r2, r20
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	34 06       	cpc	r3, r20
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	44 06       	cpc	r4, r20
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	54 06       	cpc	r5, r20
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__umoddi3+0x10e>
     f7c:	b8 e1       	ldi	r27, 0x18	; 24
     f7e:	eb 2e       	mov	r14, r27
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__umoddi3+0x118>
     f88:	a0 e1       	ldi	r26, 0x10	; 16
     f8a:	ea 2e       	mov	r14, r26
     f8c:	f1 2c       	mov	r15, r1
     f8e:	01 2d       	mov	r16, r1
     f90:	11 2d       	mov	r17, r1
     f92:	d2 01       	movw	r26, r4
     f94:	c1 01       	movw	r24, r2
     f96:	0e 2c       	mov	r0, r14
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__umoddi3+0x128>
     f9a:	b6 95       	lsr	r27
     f9c:	a7 95       	ror	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__umoddi3+0x120>
     fa6:	82 5f       	subi	r24, 0xF2	; 242
     fa8:	9e 4f       	sbci	r25, 0xFE	; 254
     faa:	dc 01       	movw	r26, r24
     fac:	2c 91       	ld	r18, X
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8e 19       	sub	r24, r14
     fb8:	9f 09       	sbc	r25, r15
     fba:	a0 0b       	sbc	r26, r16
     fbc:	b1 0b       	sbc	r27, r17
     fbe:	5c 01       	movw	r10, r24
     fc0:	6d 01       	movw	r12, r26
     fc2:	a2 1a       	sub	r10, r18
     fc4:	b1 08       	sbc	r11, r1
     fc6:	c1 08       	sbc	r12, r1
     fc8:	d1 08       	sbc	r13, r1
     fca:	a9 ae       	std	Y+57, r10	; 0x39
     fcc:	ba ae       	std	Y+58, r11	; 0x3a
     fce:	cb ae       	std	Y+59, r12	; 0x3b
     fd0:	dc ae       	std	Y+60, r13	; 0x3c
     fd2:	a1 14       	cp	r10, r1
     fd4:	b1 04       	cpc	r11, r1
     fd6:	c1 04       	cpc	r12, r1
     fd8:	d1 04       	cpc	r13, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <__umoddi3+0x164>
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <__umoddi3+0x1e2>
     fde:	69 ad       	ldd	r22, Y+57	; 0x39
     fe0:	06 2e       	mov	r0, r22
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__umoddi3+0x172>
     fe4:	22 0c       	add	r2, r2
     fe6:	33 1c       	adc	r3, r3
     fe8:	44 1c       	adc	r4, r4
     fea:	55 1c       	adc	r5, r5
     fec:	0a 94       	dec	r0
     fee:	d2 f7       	brpl	.-12     	; 0xfe4 <__umoddi3+0x16a>
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	06 2e       	mov	r0, r22
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__umoddi3+0x186>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	0a 94       	dec	r0
    1002:	d2 f7       	brpl	.-12     	; 0xff8 <__umoddi3+0x17e>
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	8a 19       	sub	r24, r10
    100a:	9b 09       	sbc	r25, r11
    100c:	6c 96       	adiw	r28, 0x1c	; 28
    100e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1010:	dd ac       	ldd	r13, Y+61	; 0x3d
    1012:	ee ac       	ldd	r14, Y+62	; 0x3e
    1014:	ff ac       	ldd	r15, Y+63	; 0x3f
    1016:	6c 97       	sbiw	r28, 0x1c	; 28
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__umoddi3+0x1a8>
    101a:	f6 94       	lsr	r15
    101c:	e7 94       	ror	r14
    101e:	d7 94       	ror	r13
    1020:	c7 94       	ror	r12
    1022:	8a 95       	dec	r24
    1024:	d2 f7       	brpl	.-12     	; 0x101a <__umoddi3+0x1a0>
    1026:	87 01       	movw	r16, r14
    1028:	76 01       	movw	r14, r12
    102a:	e2 2a       	or	r14, r18
    102c:	f3 2a       	or	r15, r19
    102e:	04 2b       	or	r16, r20
    1030:	15 2b       	or	r17, r21
    1032:	ed aa       	std	Y+53, r14	; 0x35
    1034:	fe aa       	std	Y+54, r15	; 0x36
    1036:	0f ab       	std	Y+55, r16	; 0x37
    1038:	18 af       	std	Y+56, r17	; 0x38
    103a:	6c 96       	adiw	r28, 0x1c	; 28
    103c:	8c ad       	ldd	r24, Y+60	; 0x3c
    103e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1040:	ae ad       	ldd	r26, Y+62	; 0x3e
    1042:	bf ad       	ldd	r27, Y+63	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__umoddi3+0x1d6>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	6a 95       	dec	r22
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__umoddi3+0x1ce>
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
    105c:	32 01       	movw	r6, r4
    105e:	88 24       	eor	r8, r8
    1060:	99 24       	eor	r9, r9
    1062:	b2 01       	movw	r22, r4
    1064:	a1 01       	movw	r20, r2
    1066:	60 70       	andi	r22, 0x00	; 0
    1068:	70 70       	andi	r23, 0x00	; 0
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	4c af       	std	Y+60, r20	; 0x3c
    106e:	5d af       	std	Y+61, r21	; 0x3d
    1070:	6e af       	std	Y+62, r22	; 0x3e
    1072:	7f af       	std	Y+63, r23	; 0x3f
    1074:	21 97       	sbiw	r28, 0x01	; 1
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	a4 01       	movw	r20, r8
    1080:	93 01       	movw	r18, r6
    1082:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	a4 01       	movw	r20, r8
    1094:	93 01       	movw	r18, r6
    1096:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    109a:	ca 01       	movw	r24, r20
    109c:	b9 01       	movw	r22, r18
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
    10aa:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	87 01       	movw	r16, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	ee 24       	eor	r14, r14
    10b8:	a9 a8       	ldd	r10, Y+49	; 0x31
    10ba:	ba a8       	ldd	r11, Y+50	; 0x32
    10bc:	cb a8       	ldd	r12, Y+51	; 0x33
    10be:	dc a8       	ldd	r13, Y+52	; 0x34
    10c0:	c6 01       	movw	r24, r12
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	57 01       	movw	r10, r14
    10c8:	68 01       	movw	r12, r16
    10ca:	a8 2a       	or	r10, r24
    10cc:	b9 2a       	or	r11, r25
    10ce:	ca 2a       	or	r12, r26
    10d0:	db 2a       	or	r13, r27
    10d2:	a2 16       	cp	r10, r18
    10d4:	b3 06       	cpc	r11, r19
    10d6:	c4 06       	cpc	r12, r20
    10d8:	d5 06       	cpc	r13, r21
    10da:	90 f4       	brcc	.+36     	; 0x1100 <__umoddi3+0x286>
    10dc:	a2 0c       	add	r10, r2
    10de:	b3 1c       	adc	r11, r3
    10e0:	c4 1c       	adc	r12, r4
    10e2:	d5 1c       	adc	r13, r5
    10e4:	a2 14       	cp	r10, r2
    10e6:	b3 04       	cpc	r11, r3
    10e8:	c4 04       	cpc	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	48 f0       	brcs	.+18     	; 0x1100 <__umoddi3+0x286>
    10ee:	a2 16       	cp	r10, r18
    10f0:	b3 06       	cpc	r11, r19
    10f2:	c4 06       	cpc	r12, r20
    10f4:	d5 06       	cpc	r13, r21
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <__umoddi3+0x286>
    10f8:	a2 0c       	add	r10, r2
    10fa:	b3 1c       	adc	r11, r3
    10fc:	c4 1c       	adc	r12, r4
    10fe:	d5 1c       	adc	r13, r5
    1100:	a2 1a       	sub	r10, r18
    1102:	b3 0a       	sbc	r11, r19
    1104:	c4 0a       	sbc	r12, r20
    1106:	d5 0a       	sbc	r13, r21
    1108:	c6 01       	movw	r24, r12
    110a:	b5 01       	movw	r22, r10
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1114:	7b 01       	movw	r14, r22
    1116:	8c 01       	movw	r16, r24
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	2c ad       	ldd	r18, Y+60	; 0x3c
    112c:	3d ad       	ldd	r19, Y+61	; 0x3d
    112e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1130:	5f ad       	ldd	r21, Y+63	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	ba c1       	rjmp	.+884    	; 0x14aa <__umoddi3+0x630>
    1136:	21 14       	cp	r2, r1
    1138:	31 04       	cpc	r3, r1
    113a:	41 04       	cpc	r4, r1
    113c:	51 04       	cpc	r5, r1
    113e:	71 f4       	brne	.+28     	; 0x115c <__umoddi3+0x2e2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1154:	c9 01       	movw	r24, r18
    1156:	da 01       	movw	r26, r20
    1158:	1c 01       	movw	r2, r24
    115a:	2d 01       	movw	r4, r26
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	20 16       	cp	r2, r16
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	30 06       	cpc	r3, r16
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	40 06       	cpc	r4, r16
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	50 06       	cpc	r5, r16
    116c:	88 f4       	brcc	.+34     	; 0x1190 <__umoddi3+0x316>
    116e:	1f ef       	ldi	r17, 0xFF	; 255
    1170:	21 16       	cp	r2, r17
    1172:	31 04       	cpc	r3, r1
    1174:	41 04       	cpc	r4, r1
    1176:	51 04       	cpc	r5, r1
    1178:	39 f0       	breq	.+14     	; 0x1188 <__umoddi3+0x30e>
    117a:	30 f0       	brcs	.+12     	; 0x1188 <__umoddi3+0x30e>
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	e6 2e       	mov	r14, r22
    1180:	f1 2c       	mov	r15, r1
    1182:	01 2d       	mov	r16, r1
    1184:	11 2d       	mov	r17, r1
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <__umoddi3+0x33e>
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
    118c:	87 01       	movw	r16, r14
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <__umoddi3+0x33e>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	24 16       	cp	r2, r20
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	34 06       	cpc	r3, r20
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	44 06       	cpc	r4, r20
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	54 06       	cpc	r5, r20
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__umoddi3+0x334>
    11a2:	58 e1       	ldi	r21, 0x18	; 24
    11a4:	e5 2e       	mov	r14, r21
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__umoddi3+0x33e>
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	01 2d       	mov	r16, r1
    11b6:	11 2d       	mov	r17, r1
    11b8:	d2 01       	movw	r26, r4
    11ba:	c1 01       	movw	r24, r2
    11bc:	0e 2c       	mov	r0, r14
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x34e>
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x346>
    11cc:	82 5f       	subi	r24, 0xF2	; 242
    11ce:	9e 4f       	sbci	r25, 0xFE	; 254
    11d0:	dc 01       	movw	r26, r24
    11d2:	2c 91       	ld	r18, X
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	a3 2e       	mov	r10, r19
    11d8:	b1 2c       	mov	r11, r1
    11da:	c1 2c       	mov	r12, r1
    11dc:	d1 2c       	mov	r13, r1
    11de:	d6 01       	movw	r26, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	8e 19       	sub	r24, r14
    11e4:	9f 09       	sbc	r25, r15
    11e6:	a0 0b       	sbc	r26, r16
    11e8:	b1 0b       	sbc	r27, r17
    11ea:	7c 01       	movw	r14, r24
    11ec:	8d 01       	movw	r16, r26
    11ee:	e2 1a       	sub	r14, r18
    11f0:	f1 08       	sbc	r15, r1
    11f2:	01 09       	sbc	r16, r1
    11f4:	11 09       	sbc	r17, r1
    11f6:	e9 ae       	std	Y+57, r14	; 0x39
    11f8:	fa ae       	std	Y+58, r15	; 0x3a
    11fa:	0b af       	std	Y+59, r16	; 0x3b
    11fc:	1c af       	std	Y+60, r17	; 0x3c
    11fe:	e1 14       	cp	r14, r1
    1200:	f1 04       	cpc	r15, r1
    1202:	01 05       	cpc	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <__umoddi3+0x39c>
    1208:	64 01       	movw	r12, r8
    120a:	53 01       	movw	r10, r6
    120c:	a2 18       	sub	r10, r2
    120e:	b3 08       	sbc	r11, r3
    1210:	c4 08       	sbc	r12, r4
    1212:	d5 08       	sbc	r13, r5
    1214:	e2 c0       	rjmp	.+452    	; 0x13da <__umoddi3+0x560>
    1216:	f9 ac       	ldd	r15, Y+57	; 0x39
    1218:	68 96       	adiw	r28, 0x18	; 24
    121a:	ff ae       	std	Y+63, r15	; 0x3f
    121c:	68 97       	sbiw	r28, 0x18	; 24
    121e:	0f 2c       	mov	r0, r15
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__umoddi3+0x3b0>
    1222:	22 0c       	add	r2, r2
    1224:	33 1c       	adc	r3, r3
    1226:	44 1c       	adc	r4, r4
    1228:	55 1c       	adc	r5, r5
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <__umoddi3+0x3a8>
    122e:	8a 2d       	mov	r24, r10
    1230:	8f 19       	sub	r24, r15
    1232:	64 01       	movw	r12, r8
    1234:	53 01       	movw	r10, r6
    1236:	08 2e       	mov	r0, r24
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__umoddi3+0x3c8>
    123a:	d6 94       	lsr	r13
    123c:	c7 94       	ror	r12
    123e:	b7 94       	ror	r11
    1240:	a7 94       	ror	r10
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__umoddi3+0x3c0>
    1246:	a4 01       	movw	r20, r8
    1248:	93 01       	movw	r18, r6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__umoddi3+0x3da>
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	fa 94       	dec	r15
    1256:	d2 f7       	brpl	.-12     	; 0x124c <__umoddi3+0x3d2>
    1258:	6c 96       	adiw	r28, 0x1c	; 28
    125a:	6c ac       	ldd	r6, Y+60	; 0x3c
    125c:	7d ac       	ldd	r7, Y+61	; 0x3d
    125e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1260:	9f ac       	ldd	r9, Y+63	; 0x3f
    1262:	6c 97       	sbiw	r28, 0x1c	; 28
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__umoddi3+0x3f4>
    1266:	96 94       	lsr	r9
    1268:	87 94       	ror	r8
    126a:	77 94       	ror	r7
    126c:	67 94       	ror	r6
    126e:	8a 95       	dec	r24
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__umoddi3+0x3ec>
    1272:	84 01       	movw	r16, r8
    1274:	73 01       	movw	r14, r6
    1276:	e2 2a       	or	r14, r18
    1278:	f3 2a       	or	r15, r19
    127a:	04 2b       	or	r16, r20
    127c:	15 2b       	or	r17, r21
    127e:	ed a6       	std	Y+45, r14	; 0x2d
    1280:	fe a6       	std	Y+46, r15	; 0x2e
    1282:	0f a7       	std	Y+47, r16	; 0x2f
    1284:	18 ab       	std	Y+48, r17	; 0x30
    1286:	32 01       	movw	r6, r4
    1288:	88 24       	eor	r8, r8
    128a:	99 24       	eor	r9, r9
    128c:	b2 01       	movw	r22, r4
    128e:	a1 01       	movw	r20, r2
    1290:	60 70       	andi	r22, 0x00	; 0
    1292:	70 70       	andi	r23, 0x00	; 0
    1294:	25 96       	adiw	r28, 0x05	; 5
    1296:	4c af       	std	Y+60, r20	; 0x3c
    1298:	5d af       	std	Y+61, r21	; 0x3d
    129a:	6e af       	std	Y+62, r22	; 0x3e
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	25 97       	sbiw	r28, 0x05	; 5
    12a0:	c6 01       	movw	r24, r12
    12a2:	b5 01       	movw	r22, r10
    12a4:	a4 01       	movw	r20, r8
    12a6:	93 01       	movw	r18, r6
    12a8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	87 01       	movw	r16, r14
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	ad a4       	ldd	r10, Y+45	; 0x2d
    12dc:	be a4       	ldd	r11, Y+46	; 0x2e
    12de:	cf a4       	ldd	r12, Y+47	; 0x2f
    12e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    12e2:	c6 01       	movw	r24, r12
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 01       	movw	r12, r26
    12ec:	ae 28       	or	r10, r14
    12ee:	bf 28       	or	r11, r15
    12f0:	c0 2a       	or	r12, r16
    12f2:	d1 2a       	or	r13, r17
    12f4:	a2 16       	cp	r10, r18
    12f6:	b3 06       	cpc	r11, r19
    12f8:	c4 06       	cpc	r12, r20
    12fa:	d5 06       	cpc	r13, r21
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__umoddi3+0x4a8>
    12fe:	a2 0c       	add	r10, r2
    1300:	b3 1c       	adc	r11, r3
    1302:	c4 1c       	adc	r12, r4
    1304:	d5 1c       	adc	r13, r5
    1306:	a2 14       	cp	r10, r2
    1308:	b3 04       	cpc	r11, r3
    130a:	c4 04       	cpc	r12, r4
    130c:	d5 04       	cpc	r13, r5
    130e:	48 f0       	brcs	.+18     	; 0x1322 <__umoddi3+0x4a8>
    1310:	a2 16       	cp	r10, r18
    1312:	b3 06       	cpc	r11, r19
    1314:	c4 06       	cpc	r12, r20
    1316:	d5 06       	cpc	r13, r21
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__umoddi3+0x4a8>
    131a:	a2 0c       	add	r10, r2
    131c:	b3 1c       	adc	r11, r3
    131e:	c4 1c       	adc	r12, r4
    1320:	d5 1c       	adc	r13, r5
    1322:	a2 1a       	sub	r10, r18
    1324:	b3 0a       	sbc	r11, r19
    1326:	c4 0a       	sbc	r12, r20
    1328:	d5 0a       	sbc	r13, r21
    132a:	c6 01       	movw	r24, r12
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	93 01       	movw	r18, r6
    1332:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	a4 01       	movw	r20, r8
    1340:	93 01       	movw	r18, r6
    1342:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1346:	ca 01       	movw	r24, r20
    1348:	b9 01       	movw	r22, r18
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	2c ad       	ldd	r18, Y+60	; 0x3c
    134e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1350:	4e ad       	ldd	r20, Y+62	; 0x3e
    1352:	5f ad       	ldd	r21, Y+63	; 0x3f
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	87 01       	movw	r16, r14
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	af a5       	ldd	r26, Y+47	; 0x2f
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	a0 70       	andi	r26, 0x00	; 0
    136e:	b0 70       	andi	r27, 0x00	; 0
    1370:	57 01       	movw	r10, r14
    1372:	68 01       	movw	r12, r16
    1374:	a8 2a       	or	r10, r24
    1376:	b9 2a       	or	r11, r25
    1378:	ca 2a       	or	r12, r26
    137a:	db 2a       	or	r13, r27
    137c:	a2 16       	cp	r10, r18
    137e:	b3 06       	cpc	r11, r19
    1380:	c4 06       	cpc	r12, r20
    1382:	d5 06       	cpc	r13, r21
    1384:	90 f4       	brcc	.+36     	; 0x13aa <__umoddi3+0x530>
    1386:	a2 0c       	add	r10, r2
    1388:	b3 1c       	adc	r11, r3
    138a:	c4 1c       	adc	r12, r4
    138c:	d5 1c       	adc	r13, r5
    138e:	a2 14       	cp	r10, r2
    1390:	b3 04       	cpc	r11, r3
    1392:	c4 04       	cpc	r12, r4
    1394:	d5 04       	cpc	r13, r5
    1396:	48 f0       	brcs	.+18     	; 0x13aa <__umoddi3+0x530>
    1398:	a2 16       	cp	r10, r18
    139a:	b3 06       	cpc	r11, r19
    139c:	c4 06       	cpc	r12, r20
    139e:	d5 06       	cpc	r13, r21
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <__umoddi3+0x530>
    13a2:	a2 0c       	add	r10, r2
    13a4:	b3 1c       	adc	r11, r3
    13a6:	c4 1c       	adc	r12, r4
    13a8:	d5 1c       	adc	r13, r5
    13aa:	6c 96       	adiw	r28, 0x1c	; 28
    13ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    13ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    13b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13b4:	6c 97       	sbiw	r28, 0x1c	; 28
    13b6:	68 96       	adiw	r28, 0x18	; 24
    13b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    13ba:	68 97       	sbiw	r28, 0x18	; 24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__umoddi3+0x54c>
    13be:	ee 0c       	add	r14, r14
    13c0:	ff 1c       	adc	r15, r15
    13c2:	00 1f       	adc	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	0a 94       	dec	r0
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <__umoddi3+0x544>
    13ca:	e9 aa       	std	Y+49, r14	; 0x31
    13cc:	fa aa       	std	Y+50, r15	; 0x32
    13ce:	0b ab       	std	Y+51, r16	; 0x33
    13d0:	1c ab       	std	Y+52, r17	; 0x34
    13d2:	a2 1a       	sub	r10, r18
    13d4:	b3 0a       	sbc	r11, r19
    13d6:	c4 0a       	sbc	r12, r20
    13d8:	d5 0a       	sbc	r13, r21
    13da:	32 01       	movw	r6, r4
    13dc:	88 24       	eor	r8, r8
    13de:	99 24       	eor	r9, r9
    13e0:	b2 01       	movw	r22, r4
    13e2:	a1 01       	movw	r20, r2
    13e4:	60 70       	andi	r22, 0x00	; 0
    13e6:	70 70       	andi	r23, 0x00	; 0
    13e8:	29 96       	adiw	r28, 0x09	; 9
    13ea:	4c af       	std	Y+60, r20	; 0x3c
    13ec:	5d af       	std	Y+61, r21	; 0x3d
    13ee:	6e af       	std	Y+62, r22	; 0x3e
    13f0:	7f af       	std	Y+63, r23	; 0x3f
    13f2:	29 97       	sbiw	r28, 0x09	; 9
    13f4:	c6 01       	movw	r24, r12
    13f6:	b5 01       	movw	r22, r10
    13f8:	a4 01       	movw	r20, r8
    13fa:	93 01       	movw	r18, r6
    13fc:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	c6 01       	movw	r24, r12
    1406:	b5 01       	movw	r22, r10
    1408:	a4 01       	movw	r20, r8
    140a:	93 01       	movw	r18, r6
    140c:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1410:	ca 01       	movw	r24, r20
    1412:	b9 01       	movw	r22, r18
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	29 97       	sbiw	r28, 0x09	; 9
    1420:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	87 01       	movw	r16, r14
    142a:	ff 24       	eor	r15, r15
    142c:	ee 24       	eor	r14, r14
    142e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1430:	ba a8       	ldd	r11, Y+50	; 0x32
    1432:	cb a8       	ldd	r12, Y+51	; 0x33
    1434:	dc a8       	ldd	r13, Y+52	; 0x34
    1436:	c6 01       	movw	r24, r12
    1438:	aa 27       	eor	r26, r26
    143a:	bb 27       	eor	r27, r27
    143c:	57 01       	movw	r10, r14
    143e:	68 01       	movw	r12, r16
    1440:	a8 2a       	or	r10, r24
    1442:	b9 2a       	or	r11, r25
    1444:	ca 2a       	or	r12, r26
    1446:	db 2a       	or	r13, r27
    1448:	a2 16       	cp	r10, r18
    144a:	b3 06       	cpc	r11, r19
    144c:	c4 06       	cpc	r12, r20
    144e:	d5 06       	cpc	r13, r21
    1450:	90 f4       	brcc	.+36     	; 0x1476 <__umoddi3+0x5fc>
    1452:	a2 0c       	add	r10, r2
    1454:	b3 1c       	adc	r11, r3
    1456:	c4 1c       	adc	r12, r4
    1458:	d5 1c       	adc	r13, r5
    145a:	a2 14       	cp	r10, r2
    145c:	b3 04       	cpc	r11, r3
    145e:	c4 04       	cpc	r12, r4
    1460:	d5 04       	cpc	r13, r5
    1462:	48 f0       	brcs	.+18     	; 0x1476 <__umoddi3+0x5fc>
    1464:	a2 16       	cp	r10, r18
    1466:	b3 06       	cpc	r11, r19
    1468:	c4 06       	cpc	r12, r20
    146a:	d5 06       	cpc	r13, r21
    146c:	20 f4       	brcc	.+8      	; 0x1476 <__umoddi3+0x5fc>
    146e:	a2 0c       	add	r10, r2
    1470:	b3 1c       	adc	r11, r3
    1472:	c4 1c       	adc	r12, r4
    1474:	d5 1c       	adc	r13, r5
    1476:	a2 1a       	sub	r10, r18
    1478:	b3 0a       	sbc	r11, r19
    147a:	c4 0a       	sbc	r12, r20
    147c:	d5 0a       	sbc	r13, r21
    147e:	c6 01       	movw	r24, r12
    1480:	b5 01       	movw	r22, r10
    1482:	a4 01       	movw	r20, r8
    1484:	93 01       	movw	r18, r6
    1486:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    148a:	7b 01       	movw	r14, r22
    148c:	8c 01       	movw	r16, r24
    148e:	c6 01       	movw	r24, r12
    1490:	b5 01       	movw	r22, r10
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    149a:	ca 01       	movw	r24, r20
    149c:	b9 01       	movw	r22, r18
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	87 01       	movw	r16, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	89 a9       	ldd	r24, Y+49	; 0x31
    14ba:	9a a9       	ldd	r25, Y+50	; 0x32
    14bc:	ab a9       	ldd	r26, Y+51	; 0x33
    14be:	bc a9       	ldd	r27, Y+52	; 0x34
    14c0:	a0 70       	andi	r26, 0x00	; 0
    14c2:	b0 70       	andi	r27, 0x00	; 0
    14c4:	e8 2a       	or	r14, r24
    14c6:	f9 2a       	or	r15, r25
    14c8:	0a 2b       	or	r16, r26
    14ca:	1b 2b       	or	r17, r27
    14cc:	e2 16       	cp	r14, r18
    14ce:	f3 06       	cpc	r15, r19
    14d0:	04 07       	cpc	r16, r20
    14d2:	15 07       	cpc	r17, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x680>
    14d6:	e2 0c       	add	r14, r2
    14d8:	f3 1c       	adc	r15, r3
    14da:	04 1d       	adc	r16, r4
    14dc:	15 1d       	adc	r17, r5
    14de:	e2 14       	cp	r14, r2
    14e0:	f3 04       	cpc	r15, r3
    14e2:	04 05       	cpc	r16, r4
    14e4:	15 05       	cpc	r17, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x680>
    14e8:	e2 16       	cp	r14, r18
    14ea:	f3 06       	cpc	r15, r19
    14ec:	04 07       	cpc	r16, r20
    14ee:	15 07       	cpc	r17, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x680>
    14f2:	e2 0c       	add	r14, r2
    14f4:	f3 1c       	adc	r15, r3
    14f6:	04 1d       	adc	r16, r4
    14f8:	15 1d       	adc	r17, r5
    14fa:	e2 1a       	sub	r14, r18
    14fc:	f3 0a       	sbc	r15, r19
    14fe:	04 0b       	sbc	r16, r20
    1500:	15 0b       	sbc	r17, r21
    1502:	d8 01       	movw	r26, r16
    1504:	c7 01       	movw	r24, r14
    1506:	09 ac       	ldd	r0, Y+57	; 0x39
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__umoddi3+0x698>
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <__umoddi3+0x690>
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	ab 8b       	std	Y+19, r26	; 0x13
    151c:	bc 8b       	std	Y+20, r27	; 0x14
    151e:	1d 8a       	std	Y+21, r1	; 0x15
    1520:	1e 8a       	std	Y+22, r1	; 0x16
    1522:	1f 8a       	std	Y+23, r1	; 0x17
    1524:	18 8e       	std	Y+24, r1	; 0x18
    1526:	28 2f       	mov	r18, r24
    1528:	3a 89       	ldd	r19, Y+18	; 0x12
    152a:	4b 89       	ldd	r20, Y+19	; 0x13
    152c:	5c 89       	ldd	r21, Y+20	; 0x14
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	0c c3       	rjmp	.+1560   	; 0x1b4a <__umoddi3+0xcd0>
    1532:	6a 14       	cp	r6, r10
    1534:	7b 04       	cpc	r7, r11
    1536:	8c 04       	cpc	r8, r12
    1538:	9d 04       	cpc	r9, r13
    153a:	08 f4       	brcc	.+2      	; 0x153e <__umoddi3+0x6c4>
    153c:	09 c3       	rjmp	.+1554   	; 0x1b50 <__umoddi3+0xcd6>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	a0 16       	cp	r10, r16
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	b0 06       	cpc	r11, r16
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	c0 06       	cpc	r12, r16
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	d0 06       	cpc	r13, r16
    154e:	88 f4       	brcc	.+34     	; 0x1572 <__umoddi3+0x6f8>
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	a1 16       	cp	r10, r17
    1554:	b1 04       	cpc	r11, r1
    1556:	c1 04       	cpc	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	39 f0       	breq	.+14     	; 0x156a <__umoddi3+0x6f0>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__umoddi3+0x6f0>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	e2 2e       	mov	r14, r18
    1562:	f1 2c       	mov	r15, r1
    1564:	01 2d       	mov	r16, r1
    1566:	11 2d       	mov	r17, r1
    1568:	18 c0       	rjmp	.+48     	; 0x159a <__umoddi3+0x720>
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	14 c0       	rjmp	.+40     	; 0x159a <__umoddi3+0x720>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	a4 16       	cp	r10, r20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	b4 06       	cpc	r11, r20
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	c4 06       	cpc	r12, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	d4 06       	cpc	r13, r20
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__umoddi3+0x716>
    1584:	98 e1       	ldi	r25, 0x18	; 24
    1586:	e9 2e       	mov	r14, r25
    1588:	f1 2c       	mov	r15, r1
    158a:	01 2d       	mov	r16, r1
    158c:	11 2d       	mov	r17, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__umoddi3+0x720>
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	01 2d       	mov	r16, r1
    1598:	11 2d       	mov	r17, r1
    159a:	d6 01       	movw	r26, r12
    159c:	c5 01       	movw	r24, r10
    159e:	0e 2c       	mov	r0, r14
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__umoddi3+0x730>
    15a2:	b6 95       	lsr	r27
    15a4:	a7 95       	ror	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <__umoddi3+0x728>
    15ae:	82 5f       	subi	r24, 0xF2	; 242
    15b0:	9e 4f       	sbci	r25, 0xFE	; 254
    15b2:	dc 01       	movw	r26, r24
    15b4:	2c 91       	ld	r18, X
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8e 19       	sub	r24, r14
    15c0:	9f 09       	sbc	r25, r15
    15c2:	a0 0b       	sbc	r26, r16
    15c4:	b1 0b       	sbc	r27, r17
    15c6:	82 1b       	sub	r24, r18
    15c8:	91 09       	sbc	r25, r1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	a1 05       	cpc	r26, r1
    15d2:	b1 05       	cpc	r27, r1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__umoddi3+0x75e>
    15d6:	4f c0       	rjmp	.+158    	; 0x1676 <__umoddi3+0x7fc>
    15d8:	a6 14       	cp	r10, r6
    15da:	b7 04       	cpc	r11, r7
    15dc:	c8 04       	cpc	r12, r8
    15de:	d9 04       	cpc	r13, r9
    15e0:	58 f0       	brcs	.+22     	; 0x15f8 <__umoddi3+0x77e>
    15e2:	6c 96       	adiw	r28, 0x1c	; 28
    15e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	6c 97       	sbiw	r28, 0x1c	; 28
    15ee:	e2 14       	cp	r14, r2
    15f0:	f3 04       	cpc	r15, r3
    15f2:	04 05       	cpc	r16, r4
    15f4:	15 05       	cpc	r17, r5
    15f6:	68 f1       	brcs	.+90     	; 0x1652 <__umoddi3+0x7d8>
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	e2 18       	sub	r14, r2
    1606:	f3 08       	sbc	r15, r3
    1608:	04 09       	sbc	r16, r4
    160a:	15 09       	sbc	r17, r5
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	2a 19       	sub	r18, r10
    1612:	3b 09       	sbc	r19, r11
    1614:	4c 09       	sbc	r20, r12
    1616:	5d 09       	sbc	r21, r13
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	65 01       	movw	r12, r10
    161e:	6c 96       	adiw	r28, 0x1c	; 28
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	6c 97       	sbiw	r28, 0x1c	; 28
    162a:	6e 15       	cp	r22, r14
    162c:	7f 05       	cpc	r23, r15
    162e:	80 07       	cpc	r24, r16
    1630:	91 07       	cpc	r25, r17
    1632:	28 f4       	brcc	.+10     	; 0x163e <__umoddi3+0x7c4>
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ab 2e       	mov	r10, r27
    1638:	b1 2c       	mov	r11, r1
    163a:	c1 2c       	mov	r12, r1
    163c:	d1 2c       	mov	r13, r1
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	8a 19       	sub	r24, r10
    1644:	9b 09       	sbc	r25, r11
    1646:	ac 09       	sbc	r26, r12
    1648:	bd 09       	sbc	r27, r13
    164a:	8d ab       	std	Y+53, r24	; 0x35
    164c:	9e ab       	std	Y+54, r25	; 0x36
    164e:	af ab       	std	Y+55, r26	; 0x37
    1650:	b8 af       	std	Y+56, r27	; 0x38
    1652:	e9 8a       	std	Y+17, r14	; 0x11
    1654:	fa 8a       	std	Y+18, r15	; 0x12
    1656:	0b 8b       	std	Y+19, r16	; 0x13
    1658:	1c 8b       	std	Y+20, r17	; 0x14
    165a:	6d a8       	ldd	r6, Y+53	; 0x35
    165c:	7e a8       	ldd	r7, Y+54	; 0x36
    165e:	8f a8       	ldd	r8, Y+55	; 0x37
    1660:	98 ac       	ldd	r9, Y+56	; 0x38
    1662:	6d 8a       	std	Y+21, r6	; 0x15
    1664:	7e 8a       	std	Y+22, r7	; 0x16
    1666:	8f 8a       	std	Y+23, r8	; 0x17
    1668:	98 8e       	std	Y+24, r9	; 0x18
    166a:	2e 2d       	mov	r18, r14
    166c:	3a 89       	ldd	r19, Y+18	; 0x12
    166e:	4b 89       	ldd	r20, Y+19	; 0x13
    1670:	5c 89       	ldd	r21, Y+20	; 0x14
    1672:	6d a9       	ldd	r22, Y+53	; 0x35
    1674:	6a c2       	rjmp	.+1236   	; 0x1b4a <__umoddi3+0xcd0>
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	8f af       	std	Y+63, r24	; 0x3f
    167a:	67 97       	sbiw	r28, 0x17	; 23
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	08 2e       	mov	r0, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__umoddi3+0x812>
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	44 1f       	adc	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__umoddi3+0x80a>
    1690:	a0 e2       	ldi	r26, 0x20	; 32
    1692:	aa 2e       	mov	r10, r26
    1694:	a8 1a       	sub	r10, r24
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	af ae       	std	Y+63, r10	; 0x3f
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	d2 01       	movw	r26, r4
    169e:	c1 01       	movw	r24, r2
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__umoddi3+0x830>
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	aa 94       	dec	r10
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <__umoddi3+0x828>
    16ae:	6c 01       	movw	r12, r24
    16b0:	7d 01       	movw	r14, r26
    16b2:	c2 2a       	or	r12, r18
    16b4:	d3 2a       	or	r13, r19
    16b6:	e4 2a       	or	r14, r20
    16b8:	f5 2a       	or	r15, r21
    16ba:	c9 a6       	std	Y+41, r12	; 0x29
    16bc:	da a6       	std	Y+42, r13	; 0x2a
    16be:	eb a6       	std	Y+43, r14	; 0x2b
    16c0:	fc a6       	std	Y+44, r15	; 0x2c
    16c2:	82 01       	movw	r16, r4
    16c4:	71 01       	movw	r14, r2
    16c6:	67 96       	adiw	r28, 0x17	; 23
    16c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ca:	67 97       	sbiw	r28, 0x17	; 23
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__umoddi3+0x85c>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	0a 94       	dec	r0
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <__umoddi3+0x854>
    16da:	ed a2       	std	Y+37, r14	; 0x25
    16dc:	fe a2       	std	Y+38, r15	; 0x26
    16de:	0f a3       	std	Y+39, r16	; 0x27
    16e0:	18 a7       	std	Y+40, r17	; 0x28
    16e2:	64 01       	movw	r12, r8
    16e4:	53 01       	movw	r10, r6
    16e6:	66 96       	adiw	r28, 0x16	; 22
    16e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ea:	66 97       	sbiw	r28, 0x16	; 22
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__umoddi3+0x87c>
    16ee:	d6 94       	lsr	r13
    16f0:	c7 94       	ror	r12
    16f2:	b7 94       	ror	r11
    16f4:	a7 94       	ror	r10
    16f6:	0a 94       	dec	r0
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__umoddi3+0x874>
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	67 96       	adiw	r28, 0x17	; 23
    1700:	0f ac       	ldd	r0, Y+63	; 0x3f
    1702:	67 97       	sbiw	r28, 0x17	; 23
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__umoddi3+0x894>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	0a 94       	dec	r0
    1710:	d2 f7       	brpl	.-12     	; 0x1706 <__umoddi3+0x88c>
    1712:	6c 96       	adiw	r28, 0x1c	; 28
    1714:	8c ad       	ldd	r24, Y+60	; 0x3c
    1716:	9d ad       	ldd	r25, Y+61	; 0x3d
    1718:	ae ad       	ldd	r26, Y+62	; 0x3e
    171a:	bf ad       	ldd	r27, Y+63	; 0x3f
    171c:	6c 97       	sbiw	r28, 0x1c	; 28
    171e:	66 96       	adiw	r28, 0x16	; 22
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	66 97       	sbiw	r28, 0x16	; 22
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x8b4>
    1726:	b6 95       	lsr	r27
    1728:	a7 95       	ror	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x8ac>
    1732:	3c 01       	movw	r6, r24
    1734:	4d 01       	movw	r8, r26
    1736:	62 2a       	or	r6, r18
    1738:	73 2a       	or	r7, r19
    173a:	84 2a       	or	r8, r20
    173c:	95 2a       	or	r9, r21
    173e:	69 a2       	std	Y+33, r6	; 0x21
    1740:	7a a2       	std	Y+34, r7	; 0x22
    1742:	8b a2       	std	Y+35, r8	; 0x23
    1744:	9c a2       	std	Y+36, r9	; 0x24
    1746:	6c 96       	adiw	r28, 0x1c	; 28
    1748:	ec ac       	ldd	r14, Y+60	; 0x3c
    174a:	fd ac       	ldd	r15, Y+61	; 0x3d
    174c:	0e ad       	ldd	r16, Y+62	; 0x3e
    174e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1750:	6c 97       	sbiw	r28, 0x1c	; 28
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	0f ac       	ldd	r0, Y+63	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__umoddi3+0x8e8>
    175a:	ee 0c       	add	r14, r14
    175c:	ff 1c       	adc	r15, r15
    175e:	00 1f       	adc	r16, r16
    1760:	11 1f       	adc	r17, r17
    1762:	0a 94       	dec	r0
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__umoddi3+0x8e0>
    1766:	ed 8e       	std	Y+29, r14	; 0x1d
    1768:	fe 8e       	std	Y+30, r15	; 0x1e
    176a:	0f 8f       	std	Y+31, r16	; 0x1f
    176c:	18 a3       	std	Y+32, r17	; 0x20
    176e:	49 a5       	ldd	r20, Y+41	; 0x29
    1770:	5a a5       	ldd	r21, Y+42	; 0x2a
    1772:	6b a5       	ldd	r22, Y+43	; 0x2b
    1774:	7c a5       	ldd	r23, Y+44	; 0x2c
    1776:	3b 01       	movw	r6, r22
    1778:	88 24       	eor	r8, r8
    177a:	99 24       	eor	r9, r9
    177c:	60 70       	andi	r22, 0x00	; 0
    177e:	70 70       	andi	r23, 0x00	; 0
    1780:	2d 96       	adiw	r28, 0x0d	; 13
    1782:	4c af       	std	Y+60, r20	; 0x3c
    1784:	5d af       	std	Y+61, r21	; 0x3d
    1786:	6e af       	std	Y+62, r22	; 0x3e
    1788:	7f af       	std	Y+63, r23	; 0x3f
    178a:	2d 97       	sbiw	r28, 0x0d	; 13
    178c:	c6 01       	movw	r24, r12
    178e:	b5 01       	movw	r22, r10
    1790:	a4 01       	movw	r20, r8
    1792:	93 01       	movw	r18, r6
    1794:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	c6 01       	movw	r24, r12
    179e:	b5 01       	movw	r22, r10
    17a0:	a4 01       	movw	r20, r8
    17a2:	93 01       	movw	r18, r6
    17a4:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    17a8:	c9 01       	movw	r24, r18
    17aa:	da 01       	movw	r26, r20
    17ac:	1c 01       	movw	r2, r24
    17ae:	2d 01       	movw	r4, r26
    17b0:	c2 01       	movw	r24, r4
    17b2:	b1 01       	movw	r22, r2
    17b4:	2d 96       	adiw	r28, 0x0d	; 13
    17b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    17b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    17bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    17be:	2d 97       	sbiw	r28, 0x0d	; 13
    17c0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	87 01       	movw	r16, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	ee 24       	eor	r14, r14
    17ce:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d0:	ba a0       	ldd	r11, Y+34	; 0x22
    17d2:	cb a0       	ldd	r12, Y+35	; 0x23
    17d4:	dc a0       	ldd	r13, Y+36	; 0x24
    17d6:	c6 01       	movw	r24, r12
    17d8:	aa 27       	eor	r26, r26
    17da:	bb 27       	eor	r27, r27
    17dc:	57 01       	movw	r10, r14
    17de:	68 01       	movw	r12, r16
    17e0:	a8 2a       	or	r10, r24
    17e2:	b9 2a       	or	r11, r25
    17e4:	ca 2a       	or	r12, r26
    17e6:	db 2a       	or	r13, r27
    17e8:	a2 16       	cp	r10, r18
    17ea:	b3 06       	cpc	r11, r19
    17ec:	c4 06       	cpc	r12, r20
    17ee:	d5 06       	cpc	r13, r21
    17f0:	00 f5       	brcc	.+64     	; 0x1832 <__umoddi3+0x9b8>
    17f2:	08 94       	sec
    17f4:	21 08       	sbc	r2, r1
    17f6:	31 08       	sbc	r3, r1
    17f8:	41 08       	sbc	r4, r1
    17fa:	51 08       	sbc	r5, r1
    17fc:	e9 a4       	ldd	r14, Y+41	; 0x29
    17fe:	fa a4       	ldd	r15, Y+42	; 0x2a
    1800:	0b a5       	ldd	r16, Y+43	; 0x2b
    1802:	1c a5       	ldd	r17, Y+44	; 0x2c
    1804:	ae 0c       	add	r10, r14
    1806:	bf 1c       	adc	r11, r15
    1808:	c0 1e       	adc	r12, r16
    180a:	d1 1e       	adc	r13, r17
    180c:	ae 14       	cp	r10, r14
    180e:	bf 04       	cpc	r11, r15
    1810:	c0 06       	cpc	r12, r16
    1812:	d1 06       	cpc	r13, r17
    1814:	70 f0       	brcs	.+28     	; 0x1832 <__umoddi3+0x9b8>
    1816:	a2 16       	cp	r10, r18
    1818:	b3 06       	cpc	r11, r19
    181a:	c4 06       	cpc	r12, r20
    181c:	d5 06       	cpc	r13, r21
    181e:	48 f4       	brcc	.+18     	; 0x1832 <__umoddi3+0x9b8>
    1820:	08 94       	sec
    1822:	21 08       	sbc	r2, r1
    1824:	31 08       	sbc	r3, r1
    1826:	41 08       	sbc	r4, r1
    1828:	51 08       	sbc	r5, r1
    182a:	ae 0c       	add	r10, r14
    182c:	bf 1c       	adc	r11, r15
    182e:	c0 1e       	adc	r12, r16
    1830:	d1 1e       	adc	r13, r17
    1832:	a2 1a       	sub	r10, r18
    1834:	b3 0a       	sbc	r11, r19
    1836:	c4 0a       	sbc	r12, r20
    1838:	d5 0a       	sbc	r13, r21
    183a:	c6 01       	movw	r24, r12
    183c:	b5 01       	movw	r22, r10
    183e:	a4 01       	movw	r20, r8
    1840:	93 01       	movw	r18, r6
    1842:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	c6 01       	movw	r24, r12
    184c:	b5 01       	movw	r22, r10
    184e:	a4 01       	movw	r20, r8
    1850:	93 01       	movw	r18, r6
    1852:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <__udivmodsi4>
    1856:	c9 01       	movw	r24, r18
    1858:	da 01       	movw	r26, r20
    185a:	3c 01       	movw	r6, r24
    185c:	4d 01       	movw	r8, r26
    185e:	c4 01       	movw	r24, r8
    1860:	b3 01       	movw	r22, r6
    1862:	2d 96       	adiw	r28, 0x0d	; 13
    1864:	2c ad       	ldd	r18, Y+60	; 0x3c
    1866:	3d ad       	ldd	r19, Y+61	; 0x3d
    1868:	4e ad       	ldd	r20, Y+62	; 0x3e
    186a:	5f ad       	ldd	r21, Y+63	; 0x3f
    186c:	2d 97       	sbiw	r28, 0x0d	; 13
    186e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	87 01       	movw	r16, r14
    1878:	ff 24       	eor	r15, r15
    187a:	ee 24       	eor	r14, r14
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	a0 70       	andi	r26, 0x00	; 0
    1886:	b0 70       	andi	r27, 0x00	; 0
    1888:	57 01       	movw	r10, r14
    188a:	68 01       	movw	r12, r16
    188c:	a8 2a       	or	r10, r24
    188e:	b9 2a       	or	r11, r25
    1890:	ca 2a       	or	r12, r26
    1892:	db 2a       	or	r13, r27
    1894:	a2 16       	cp	r10, r18
    1896:	b3 06       	cpc	r11, r19
    1898:	c4 06       	cpc	r12, r20
    189a:	d5 06       	cpc	r13, r21
    189c:	00 f5       	brcc	.+64     	; 0x18de <__umoddi3+0xa64>
    189e:	08 94       	sec
    18a0:	61 08       	sbc	r6, r1
    18a2:	71 08       	sbc	r7, r1
    18a4:	81 08       	sbc	r8, r1
    18a6:	91 08       	sbc	r9, r1
    18a8:	69 a5       	ldd	r22, Y+41	; 0x29
    18aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	a6 0e       	add	r10, r22
    18b2:	b7 1e       	adc	r11, r23
    18b4:	c8 1e       	adc	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	a6 16       	cp	r10, r22
    18ba:	b7 06       	cpc	r11, r23
    18bc:	c8 06       	cpc	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__umoddi3+0xa64>
    18c2:	a2 16       	cp	r10, r18
    18c4:	b3 06       	cpc	r11, r19
    18c6:	c4 06       	cpc	r12, r20
    18c8:	d5 06       	cpc	r13, r21
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__umoddi3+0xa64>
    18cc:	08 94       	sec
    18ce:	61 08       	sbc	r6, r1
    18d0:	71 08       	sbc	r7, r1
    18d2:	81 08       	sbc	r8, r1
    18d4:	91 08       	sbc	r9, r1
    18d6:	a6 0e       	add	r10, r22
    18d8:	b7 1e       	adc	r11, r23
    18da:	c8 1e       	adc	r12, r24
    18dc:	d9 1e       	adc	r13, r25
    18de:	d6 01       	movw	r26, r12
    18e0:	c5 01       	movw	r24, r10
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	a4 0b       	sbc	r26, r20
    18e8:	b5 0b       	sbc	r27, r21
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	d1 01       	movw	r26, r2
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	84 01       	movw	r16, r8
    18fa:	73 01       	movw	r14, r6
    18fc:	e8 2a       	or	r14, r24
    18fe:	f9 2a       	or	r15, r25
    1900:	0a 2b       	or	r16, r26
    1902:	1b 2b       	or	r17, r27
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	a4 2e       	mov	r10, r20
    1908:	4f ef       	ldi	r20, 0xFF	; 255
    190a:	b4 2e       	mov	r11, r20
    190c:	c1 2c       	mov	r12, r1
    190e:	d1 2c       	mov	r13, r1
    1910:	ae 20       	and	r10, r14
    1912:	bf 20       	and	r11, r15
    1914:	c0 22       	and	r12, r16
    1916:	d1 22       	and	r13, r17
    1918:	78 01       	movw	r14, r16
    191a:	00 27       	eor	r16, r16
    191c:	11 27       	eor	r17, r17
    191e:	6d a0       	ldd	r6, Y+37	; 0x25
    1920:	7e a0       	ldd	r7, Y+38	; 0x26
    1922:	8f a0       	ldd	r8, Y+39	; 0x27
    1924:	98 a4       	ldd	r9, Y+40	; 0x28
    1926:	4f ef       	ldi	r20, 0xFF	; 255
    1928:	5f ef       	ldi	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	64 22       	and	r6, r20
    1930:	75 22       	and	r7, r21
    1932:	86 22       	and	r8, r22
    1934:	97 22       	and	r9, r23
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	af a1       	ldd	r26, Y+39	; 0x27
    193c:	b8 a5       	ldd	r27, Y+40	; 0x28
    193e:	bd 01       	movw	r22, r26
    1940:	88 27       	eor	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	65 96       	adiw	r28, 0x15	; 21
    1946:	6c af       	std	Y+60, r22	; 0x3c
    1948:	7d af       	std	Y+61, r23	; 0x3d
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	65 97       	sbiw	r28, 0x15	; 21
    1950:	c6 01       	movw	r24, r12
    1952:	b5 01       	movw	r22, r10
    1954:	a4 01       	movw	r20, r8
    1956:	93 01       	movw	r18, r6
    1958:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	6c af       	std	Y+60, r22	; 0x3c
    1960:	7d af       	std	Y+61, r23	; 0x3d
    1962:	8e af       	std	Y+62, r24	; 0x3e
    1964:	9f af       	std	Y+63, r25	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	c6 01       	movw	r24, r12
    196a:	b5 01       	movw	r22, r10
    196c:	65 96       	adiw	r28, 0x15	; 21
    196e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1970:	3d ad       	ldd	r19, Y+61	; 0x3d
    1972:	4e ad       	ldd	r20, Y+62	; 0x3e
    1974:	5f ad       	ldd	r21, Y+63	; 0x3f
    1976:	65 97       	sbiw	r28, 0x15	; 21
    1978:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    197c:	1b 01       	movw	r2, r22
    197e:	2c 01       	movw	r4, r24
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a4 01       	movw	r20, r8
    1986:	93 01       	movw	r18, r6
    1988:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    198c:	5b 01       	movw	r10, r22
    198e:	6c 01       	movw	r12, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	65 96       	adiw	r28, 0x15	; 21
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	22 0d       	add	r18, r2
    19ae:	33 1d       	adc	r19, r3
    19b0:	44 1d       	adc	r20, r4
    19b2:	55 1d       	adc	r21, r5
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c ac       	ldd	r6, Y+60	; 0x3c
    19b8:	7d ac       	ldd	r7, Y+61	; 0x3d
    19ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    19bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c4 01       	movw	r24, r8
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	4a 1f       	adc	r20, r26
    19cc:	5b 1f       	adc	r21, r27
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <__umoddi3+0xb70>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	ae 2e       	mov	r10, r30
    19e0:	b1 2c       	mov	r11, r1
    19e2:	e8 0c       	add	r14, r8
    19e4:	f9 1c       	adc	r15, r9
    19e6:	0a 1d       	adc	r16, r10
    19e8:	1b 1d       	adc	r17, r11
    19ea:	ca 01       	movw	r24, r20
    19ec:	aa 27       	eor	r26, r26
    19ee:	bb 27       	eor	r27, r27
    19f0:	57 01       	movw	r10, r14
    19f2:	68 01       	movw	r12, r16
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	ca 1e       	adc	r12, r26
    19fa:	db 1e       	adc	r13, r27
    19fc:	a9 01       	movw	r20, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	22 27       	eor	r18, r18
    1a02:	61 96       	adiw	r28, 0x11	; 17
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a08:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0c:	61 97       	sbiw	r28, 0x11	; 17
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	4a 1f       	adc	r20, r26
    1a18:	5b 1f       	adc	r21, r27
    1a1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a20:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a22:	ea 14       	cp	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	0c 05       	cpc	r16, r12
    1a28:	1d 05       	cpc	r17, r13
    1a2a:	70 f0       	brcs	.+28     	; 0x1a48 <__umoddi3+0xbce>
    1a2c:	ae 14       	cp	r10, r14
    1a2e:	bf 04       	cpc	r11, r15
    1a30:	c0 06       	cpc	r12, r16
    1a32:	d1 06       	cpc	r13, r17
    1a34:	69 f5       	brne	.+90     	; 0x1a90 <__umoddi3+0xc16>
    1a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	95 07       	cpc	r25, r21
    1a46:	20 f5       	brcc	.+72     	; 0x1a90 <__umoddi3+0xc16>
    1a48:	da 01       	movw	r26, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	6d a0       	ldd	r6, Y+37	; 0x25
    1a4e:	7e a0       	ldd	r7, Y+38	; 0x26
    1a50:	8f a0       	ldd	r8, Y+39	; 0x27
    1a52:	98 a4       	ldd	r9, Y+40	; 0x28
    1a54:	86 19       	sub	r24, r6
    1a56:	97 09       	sbc	r25, r7
    1a58:	a8 09       	sbc	r26, r8
    1a5a:	b9 09       	sbc	r27, r9
    1a5c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a5e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a60:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a62:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a64:	ae 18       	sub	r10, r14
    1a66:	bf 08       	sbc	r11, r15
    1a68:	c0 0a       	sbc	r12, r16
    1a6a:	d1 0a       	sbc	r13, r17
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	87 01       	movw	r16, r14
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4a 07       	cpc	r20, r26
    1a78:	5b 07       	cpc	r21, r27
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__umoddi3+0xc0c>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	e2 2e       	mov	r14, r18
    1a80:	f1 2c       	mov	r15, r1
    1a82:	01 2d       	mov	r16, r1
    1a84:	11 2d       	mov	r17, r1
    1a86:	ae 18       	sub	r10, r14
    1a88:	bf 08       	sbc	r11, r15
    1a8a:	c0 0a       	sbc	r12, r16
    1a8c:	d1 0a       	sbc	r13, r17
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__umoddi3+0xc1a>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a96:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a98:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a9a:	98 a0       	ldd	r9, Y+32	; 0x20
    1a9c:	68 1a       	sub	r6, r24
    1a9e:	79 0a       	sbc	r7, r25
    1aa0:	8a 0a       	sbc	r8, r26
    1aa2:	9b 0a       	sbc	r9, r27
    1aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    1aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1aa8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1aaa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1aac:	4a 19       	sub	r20, r10
    1aae:	5b 09       	sbc	r21, r11
    1ab0:	6c 09       	sbc	r22, r12
    1ab2:	7d 09       	sbc	r23, r13
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	22 24       	eor	r2, r2
    1aba:	33 24       	eor	r3, r3
    1abc:	21 01       	movw	r4, r2
    1abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	66 15       	cp	r22, r6
    1ac8:	77 05       	cpc	r23, r7
    1aca:	88 05       	cpc	r24, r8
    1acc:	99 05       	cpc	r25, r9
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__umoddi3+0xc60>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	28 2e       	mov	r2, r24
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	41 2c       	mov	r4, r1
    1ad8:	51 2c       	mov	r5, r1
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	e2 18       	sub	r14, r2
    1ae0:	f3 08       	sbc	r15, r3
    1ae2:	04 09       	sbc	r16, r4
    1ae4:	15 09       	sbc	r17, r5
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	97 01       	movw	r18, r14
    1aea:	66 96       	adiw	r28, 0x16	; 22
    1aec:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aee:	66 97       	sbiw	r28, 0x16	; 22
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__umoddi3+0xc80>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	55 1f       	adc	r21, r21
    1afa:	0a 94       	dec	r0
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__umoddi3+0xc78>
    1afe:	d4 01       	movw	r26, r8
    1b00:	c3 01       	movw	r24, r6
    1b02:	67 96       	adiw	r28, 0x17	; 23
    1b04:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b06:	67 97       	sbiw	r28, 0x17	; 23
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <__umoddi3+0xc98>
    1b0a:	b6 95       	lsr	r27
    1b0c:	a7 95       	ror	r26
    1b0e:	97 95       	ror	r25
    1b10:	87 95       	ror	r24
    1b12:	0a 94       	dec	r0
    1b14:	d2 f7       	brpl	.-12     	; 0x1b0a <__umoddi3+0xc90>
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	29 8b       	std	Y+17, r18	; 0x11
    1b20:	3a 8b       	std	Y+18, r19	; 0x12
    1b22:	4b 8b       	std	Y+19, r20	; 0x13
    1b24:	5c 8b       	std	Y+20, r21	; 0x14
    1b26:	67 96       	adiw	r28, 0x17	; 23
    1b28:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b2a:	67 97       	sbiw	r28, 0x17	; 23
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__umoddi3+0xcbc>
    1b2e:	16 95       	lsr	r17
    1b30:	07 95       	ror	r16
    1b32:	f7 94       	ror	r15
    1b34:	e7 94       	ror	r14
    1b36:	0a 94       	dec	r0
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__umoddi3+0xcb4>
    1b3a:	ed 8a       	std	Y+21, r14	; 0x15
    1b3c:	fe 8a       	std	Y+22, r15	; 0x16
    1b3e:	0f 8b       	std	Y+23, r16	; 0x17
    1b40:	18 8f       	std	Y+24, r17	; 0x18
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	6e 2d       	mov	r22, r14
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	c5 5a       	subi	r28, 0xA5	; 165
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__epilogue_restores__>

00001b5a <EEPROM_write>:
#include "../../LIB/BIT_MATH.h"

void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
    1b5a:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
    1b5c:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
    1b5e:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
    1b60:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
    1b62:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(GET_BIT(EECR,EEWE)==1);
    1b64:	e1 99       	sbic	0x1c, 1	; 28
    1b66:	fe cf       	rjmp	.-4      	; 0x1b64 <EEPROM_write+0xa>
	
}
    1b68:	08 95       	ret

00001b6a <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
    1b6a:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
    1b6c:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
    1b6e:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
    1b70:	8d b3       	in	r24, 0x1d	; 29
}
    1b72:	08 95       	ret

00001b74 <DIO_enumSetPinDirection>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	90 f4       	brcc	.+36     	; 0x1b9c <DIO_enumSetPinDirection+0x28>
    1b78:	68 30       	cpi	r22, 0x08	; 8
    1b7a:	80 f4       	brcc	.+32     	; 0x1b9c <DIO_enumSetPinDirection+0x28>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    1b7c:	41 30       	cpi	r20, 0x01	; 1
    1b7e:	81 f0       	breq	.+32     	; 0x1ba0 <DIO_enumSetPinDirection+0x2c>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1b80:	44 23       	and	r20, r20
    1b82:	61 f4       	brne	.+24     	; 0x1b9c <DIO_enumSetPinDirection+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	d9 f1       	breq	.+118    	; 0x1bfe <DIO_enumSetPinDirection+0x8a>
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	00 f1       	brcs	.+64     	; 0x1bcc <DIO_enumSetPinDirection+0x58>
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <DIO_enumSetPinDirection+0x1e>
    1b90:	50 c0       	rjmp	.+160    	; 0x1c32 <DIO_enumSetPinDirection+0xbe>
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <DIO_enumSetPinDirection+0x24>
    1b96:	40 c0       	rjmp	.+128    	; 0x1c18 <DIO_enumSetPinDirection+0xa4>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    1b9a:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <DIO_enumSetPinDirection+0x32>
    1ba4:	53 c0       	rjmp	.+166    	; 0x1c4c <DIO_enumSetPinDirection+0xd8>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	f0 f0       	brcs	.+60     	; 0x1be6 <DIO_enumSetPinDirection+0x72>
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <DIO_enumSetPinDirection+0x3c>
    1bae:	5a c0       	rjmp	.+180    	; 0x1c64 <DIO_enumSetPinDirection+0xf0>
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 f7       	brne	.-28     	; 0x1b98 <DIO_enumSetPinDirection+0x24>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1bb4:	21 b3       	in	r18, 0x11	; 17
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <DIO_enumSetPinDirection+0x4c>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	6a 95       	dec	r22
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <DIO_enumSetPinDirection+0x48>
    1bc4:	28 2b       	or	r18, r24
    1bc6:	21 bb       	out	0x11, r18	; 17
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	08 95       	ret
		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    1bcc:	2a b3       	in	r18, 0x1a	; 26
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <DIO_enumSetPinDirection+0x64>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	6a 95       	dec	r22
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <DIO_enumSetPinDirection+0x60>
    1bdc:	80 95       	com	r24
    1bde:	82 23       	and	r24, r18
    1be0:	8a bb       	out	0x1a, r24	; 26
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	08 95       	ret
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    1be6:	2a b3       	in	r18, 0x1a	; 26
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <DIO_enumSetPinDirection+0x7e>
    1bee:	88 0f       	add	r24, r24
    1bf0:	99 1f       	adc	r25, r25
    1bf2:	6a 95       	dec	r22
    1bf4:	e2 f7       	brpl	.-8      	; 0x1bee <DIO_enumSetPinDirection+0x7a>
    1bf6:	28 2b       	or	r18, r24
    1bf8:	2a bb       	out	0x1a, r18	; 26
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    1bfe:	27 b3       	in	r18, 0x17	; 23
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <DIO_enumSetPinDirection+0x96>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	6a 95       	dec	r22
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <DIO_enumSetPinDirection+0x92>
    1c0e:	80 95       	com	r24
    1c10:	82 23       	and	r24, r18
    1c12:	87 bb       	out	0x17, r24	; 23
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	08 95       	ret
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1c18:	21 b3       	in	r18, 0x11	; 17
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enumSetPinDirection+0xb0>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	6a 95       	dec	r22
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enumSetPinDirection+0xac>
    1c28:	80 95       	com	r24
    1c2a:	82 23       	and	r24, r18
    1c2c:	81 bb       	out	0x11, r24	; 17
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1c32:	24 b3       	in	r18, 0x14	; 20
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_enumSetPinDirection+0xca>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	6a 95       	dec	r22
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_enumSetPinDirection+0xc6>
    1c42:	80 95       	com	r24
    1c44:	82 23       	and	r24, r18
    1c46:	84 bb       	out	0x14, r24	; 20
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1c4c:	27 b3       	in	r18, 0x17	; 23
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <DIO_enumSetPinDirection+0xe4>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	6a 95       	dec	r22
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <DIO_enumSetPinDirection+0xe0>
    1c5c:	28 2b       	or	r18, r24
    1c5e:	27 bb       	out	0x17, r18	; 23
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	08 95       	ret
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1c64:	24 b3       	in	r18, 0x14	; 20
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_enumSetPinDirection+0xfc>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	99 1f       	adc	r25, r25
    1c70:	6a 95       	dec	r22
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_enumSetPinDirection+0xf8>
    1c74:	28 2b       	or	r18, r24
    1c76:	24 bb       	out	0x14, r18	; 20
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	08 95       	ret

00001c7c <DIO_enumSetPinValue>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c7c:	84 30       	cpi	r24, 0x04	; 4
    1c7e:	90 f4       	brcc	.+36     	; 0x1ca4 <DIO_enumSetPinValue+0x28>
    1c80:	68 30       	cpi	r22, 0x08	; 8
    1c82:	80 f4       	brcc	.+32     	; 0x1ca4 <DIO_enumSetPinValue+0x28>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    1c84:	41 30       	cpi	r20, 0x01	; 1
    1c86:	81 f0       	breq	.+32     	; 0x1ca8 <DIO_enumSetPinValue+0x2c>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    1c88:	44 23       	and	r20, r20
    1c8a:	61 f4       	brne	.+24     	; 0x1ca4 <DIO_enumSetPinValue+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	d9 f1       	breq	.+118    	; 0x1d06 <DIO_enumSetPinValue+0x8a>
    1c90:	81 30       	cpi	r24, 0x01	; 1
    1c92:	00 f1       	brcs	.+64     	; 0x1cd4 <DIO_enumSetPinValue+0x58>
    1c94:	82 30       	cpi	r24, 0x02	; 2
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <DIO_enumSetPinValue+0x1e>
    1c98:	50 c0       	rjmp	.+160    	; 0x1d3a <DIO_enumSetPinValue+0xbe>
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <DIO_enumSetPinValue+0x24>
    1c9e:	40 c0       	rjmp	.+128    	; 0x1d20 <DIO_enumSetPinValue+0xa4>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    1ca2:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <DIO_enumSetPinValue+0x32>
    1cac:	53 c0       	rjmp	.+166    	; 0x1d54 <DIO_enumSetPinValue+0xd8>
    1cae:	81 30       	cpi	r24, 0x01	; 1
    1cb0:	f0 f0       	brcs	.+60     	; 0x1cee <DIO_enumSetPinValue+0x72>
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <DIO_enumSetPinValue+0x3c>
    1cb6:	5a c0       	rjmp	.+180    	; 0x1d6c <DIO_enumSetPinValue+0xf0>
    1cb8:	83 30       	cpi	r24, 0x03	; 3
    1cba:	91 f7       	brne	.-28     	; 0x1ca0 <DIO_enumSetPinValue+0x24>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    1cbc:	22 b3       	in	r18, 0x12	; 18
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_enumSetPinValue+0x4c>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	6a 95       	dec	r22
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_enumSetPinValue+0x48>
    1ccc:	28 2b       	or	r18, r24
    1cce:	22 bb       	out	0x12, r18	; 18
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	08 95       	ret
		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    1cd4:	2b b3       	in	r18, 0x1b	; 27
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <DIO_enumSetPinValue+0x64>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	6a 95       	dec	r22
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <DIO_enumSetPinValue+0x60>
    1ce4:	80 95       	com	r24
    1ce6:	82 23       	and	r24, r18
    1ce8:	8b bb       	out	0x1b, r24	; 27
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	08 95       	ret
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    1cee:	2b b3       	in	r18, 0x1b	; 27
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <DIO_enumSetPinValue+0x7e>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	6a 95       	dec	r22
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <DIO_enumSetPinValue+0x7a>
    1cfe:	28 2b       	or	r18, r24
    1d00:	2b bb       	out	0x1b, r18	; 27
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    1d06:	28 b3       	in	r18, 0x18	; 24
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_enumSetPinValue+0x96>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	6a 95       	dec	r22
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_enumSetPinValue+0x92>
    1d16:	80 95       	com	r24
    1d18:	82 23       	and	r24, r18
    1d1a:	88 bb       	out	0x18, r24	; 24
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	08 95       	ret
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    1d20:	22 b3       	in	r18, 0x12	; 18
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_enumSetPinValue+0xb0>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	6a 95       	dec	r22
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_enumSetPinValue+0xac>
    1d30:	80 95       	com	r24
    1d32:	82 23       	and	r24, r18
    1d34:	82 bb       	out	0x12, r24	; 18
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    1d3a:	25 b3       	in	r18, 0x15	; 21
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_enumSetPinValue+0xca>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	6a 95       	dec	r22
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_enumSetPinValue+0xc6>
    1d4a:	80 95       	com	r24
    1d4c:	82 23       	and	r24, r18
    1d4e:	85 bb       	out	0x15, r24	; 21
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    1d54:	28 b3       	in	r18, 0x18	; 24
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_enumSetPinValue+0xe4>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	6a 95       	dec	r22
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_enumSetPinValue+0xe0>
    1d64:	28 2b       	or	r18, r24
    1d66:	28 bb       	out	0x18, r18	; 24
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	08 95       	ret
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    1d6c:	25 b3       	in	r18, 0x15	; 21
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <DIO_enumSetPinValue+0xfc>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	6a 95       	dec	r22
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <DIO_enumSetPinValue+0xf8>
    1d7c:	28 2b       	or	r18, r24
    1d7e:	25 bb       	out	0x15, r18	; 21
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	08 95       	ret

00001d84 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    1d84:	fa 01       	movw	r30, r20

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1d86:	84 30       	cpi	r24, 0x04	; 4
    1d88:	60 f4       	brcc	.+24     	; 0x1da2 <DIO_enumGetPinValue+0x1e>
    1d8a:	68 30       	cpi	r22, 0x08	; 8
    1d8c:	50 f4       	brcc	.+20     	; 0x1da2 <DIO_enumGetPinValue+0x1e>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	f1 f0       	breq	.+60     	; 0x1dce <DIO_enumGetPinValue+0x4a>
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	40 f0       	brcs	.+16     	; 0x1da6 <DIO_enumGetPinValue+0x22>
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	81 f1       	breq	.+96     	; 0x1dfa <DIO_enumGetPinValue+0x76>
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	61 f1       	breq	.+88     	; 0x1df6 <DIO_enumGetPinValue+0x72>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    1da2:	80 e0       	ldi	r24, 0x00	; 0
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    1da4:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    1da6:	29 b3       	in	r18, 0x19	; 25
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	06 2e       	mov	r0, r22
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_enumGetPinValue+0x30>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_enumGetPinValue+0x2c>
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	82 23       	and	r24, r18
    1dbc:	93 23       	and	r25, r19
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_enumGetPinValue+0x40>
    1dc0:	95 95       	asr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	6a 95       	dec	r22
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_enumGetPinValue+0x3c>
    1dc8:	80 83       	st	Z, r24
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	08 95       	ret
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    1dce:	26 b3       	in	r18, 0x16	; 22
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	06 2e       	mov	r0, r22
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_enumGetPinValue+0x58>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <DIO_enumGetPinValue+0x54>
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	82 23       	and	r24, r18
    1de4:	93 23       	and	r25, r19
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_enumGetPinValue+0x68>
    1de8:	95 95       	asr	r25
    1dea:	87 95       	ror	r24
    1dec:	6a 95       	dec	r22
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_enumGetPinValue+0x64>
    1df0:	80 83       	st	Z, r24
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    1df6:	20 b3       	in	r18, 0x10	; 16
    1df8:	eb cf       	rjmp	.-42     	; 0x1dd0 <DIO_enumGetPinValue+0x4c>
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1dfa:	23 b3       	in	r18, 0x13	; 19
    1dfc:	e9 cf       	rjmp	.-46     	; 0x1dd0 <DIO_enumGetPinValue+0x4c>

00001dfe <DIO_enumTogglePinValue>:
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    1dfe:	68 30       	cpi	r22, 0x08	; 8
    1e00:	50 f4       	brcc	.+20     	; 0x1e16 <DIO_enumTogglePinValue+0x18>
	{
		switch (Copy_u8PORT)
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	b1 f0       	breq	.+44     	; 0x1e32 <DIO_enumTogglePinValue+0x34>
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	40 f0       	brcs	.+16     	; 0x1e1a <DIO_enumTogglePinValue+0x1c>
    1e0a:	82 30       	cpi	r24, 0x02	; 2
    1e0c:	51 f1       	breq	.+84     	; 0x1e62 <DIO_enumTogglePinValue+0x64>
    1e0e:	83 30       	cpi	r24, 0x03	; 3
    1e10:	e1 f0       	breq	.+56     	; 0x1e4a <DIO_enumTogglePinValue+0x4c>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    1e1a:	2b b3       	in	r18, 0x1b	; 27
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <DIO_enumTogglePinValue+0x28>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	6a 95       	dec	r22
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <DIO_enumTogglePinValue+0x24>
    1e2a:	28 27       	eor	r18, r24
    1e2c:	2b bb       	out	0x1b, r18	; 27
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	08 95       	ret
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    1e32:	28 b3       	in	r18, 0x18	; 24
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <DIO_enumTogglePinValue+0x40>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	6a 95       	dec	r22
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <DIO_enumTogglePinValue+0x3c>
    1e42:	28 27       	eor	r18, r24
    1e44:	28 bb       	out	0x18, r18	; 24
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	08 95       	ret
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    1e4a:	22 b3       	in	r18, 0x12	; 18
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <DIO_enumTogglePinValue+0x58>
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	6a 95       	dec	r22
    1e58:	e2 f7       	brpl	.-8      	; 0x1e52 <DIO_enumTogglePinValue+0x54>
    1e5a:	28 27       	eor	r18, r24
    1e5c:	22 bb       	out	0x12, r18	; 18
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    1e60:	08 95       	ret
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    1e62:	25 b3       	in	r18, 0x15	; 21
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_enumTogglePinValue+0x70>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	6a 95       	dec	r22
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_enumTogglePinValue+0x6c>
    1e72:	28 27       	eor	r18, r24
    1e74:	25 bb       	out	0x15, r18	; 21
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	08 95       	ret

00001e7a <DIO_enumConnectPullup>:
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e7a:	84 30       	cpi	r24, 0x04	; 4
    1e7c:	60 f4       	brcc	.+24     	; 0x1e96 <DIO_enumConnectPullup+0x1c>
    1e7e:	68 30       	cpi	r22, 0x08	; 8
    1e80:	50 f4       	brcc	.+20     	; 0x1e96 <DIO_enumConnectPullup+0x1c>
	{
		switch(Copy_u8PORT)
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	d1 f0       	breq	.+52     	; 0x1eba <DIO_enumConnectPullup+0x40>
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	40 f0       	brcs	.+16     	; 0x1e9a <DIO_enumConnectPullup+0x20>
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	b1 f1       	breq	.+108    	; 0x1efa <DIO_enumConnectPullup+0x80>
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	21 f1       	breq	.+72     	; 0x1eda <DIO_enumConnectPullup+0x60>
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	08 95       	ret
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
	}

	return LOC_enumState ;


}
    1e98:	08 95       	ret
	{
		switch(Copy_u8PORT)
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1e9a:	41 30       	cpi	r20, 0x01	; 1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <DIO_enumConnectPullup+0x26>
    1e9e:	3c c0       	rjmp	.+120    	; 0x1f18 <DIO_enumConnectPullup+0x9e>
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    1ea0:	2b b3       	in	r18, 0x1b	; 27
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_enumConnectPullup+0x32>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	6a 95       	dec	r22
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_enumConnectPullup+0x2e>
    1eb0:	80 95       	com	r24
    1eb2:	82 23       	and	r24, r18
    1eb4:	8b bb       	out	0x1b, r24	; 27
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	08 95       	ret
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1eba:	41 30       	cpi	r20, 0x01	; 1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <DIO_enumConnectPullup+0x46>
    1ebe:	53 c0       	rjmp	.+166    	; 0x1f66 <DIO_enumConnectPullup+0xec>
				CLR_BIT(DDRB_Register,Copy_u8PIN);
				SET_BIT(PORTB_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    1ec0:	28 b3       	in	r18, 0x18	; 24
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <DIO_enumConnectPullup+0x52>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	6a 95       	dec	r22
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <DIO_enumConnectPullup+0x4e>
    1ed0:	80 95       	com	r24
    1ed2:	82 23       	and	r24, r18
    1ed4:	88 bb       	out	0x18, r24	; 24
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	08 95       	ret
				CLR_BIT(PORTC_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1eda:	41 30       	cpi	r20, 0x01	; 1
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <DIO_enumConnectPullup+0x66>
    1ede:	57 c0       	rjmp	.+174    	; 0x1f8e <DIO_enumConnectPullup+0x114>
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    1ee0:	22 b3       	in	r18, 0x12	; 18
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <DIO_enumConnectPullup+0x72>
    1ee8:	88 0f       	add	r24, r24
    1eea:	99 1f       	adc	r25, r25
    1eec:	6a 95       	dec	r22
    1eee:	e2 f7       	brpl	.-8      	; 0x1ee8 <DIO_enumConnectPullup+0x6e>
    1ef0:	80 95       	com	r24
    1ef2:	82 23       	and	r24, r18
    1ef4:	82 bb       	out	0x12, r24	; 18
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	08 95       	ret
				CLR_BIT(PORTB_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    1efa:	41 30       	cpi	r20, 0x01	; 1
    1efc:	01 f1       	breq	.+64     	; 0x1f3e <DIO_enumConnectPullup+0xc4>
				CLR_BIT(DDRC_Register,Copy_u8PIN);
				SET_BIT(PORTC_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    1efe:	25 b3       	in	r18, 0x15	; 21
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_enumConnectPullup+0x90>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	6a 95       	dec	r22
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_enumConnectPullup+0x8c>
    1f0e:	80 95       	com	r24
    1f10:	82 23       	and	r24, r18
    1f12:	85 bb       	out	0x15, r24	; 21
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	08 95       	ret
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    1f18:	80 b7       	in	r24, 0x30	; 48
    1f1a:	8b 7f       	andi	r24, 0xFB	; 251
    1f1c:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    1f1e:	3a b3       	in	r19, 0x1a	; 26
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_enumConnectPullup+0xb0>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	6a 95       	dec	r22
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_enumConnectPullup+0xac>
    1f2e:	28 2f       	mov	r18, r24
    1f30:	20 95       	com	r18
    1f32:	23 23       	and	r18, r19
    1f34:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA_Register,Copy_u8PIN);
    1f36:	2b b3       	in	r18, 0x1b	; 27
    1f38:	82 2b       	or	r24, r18
    1f3a:	8b bb       	out	0x1b, r24	; 27
    1f3c:	aa cf       	rjmp	.-172    	; 0x1e92 <DIO_enumConnectPullup+0x18>
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    1f3e:	80 b7       	in	r24, 0x30	; 48
    1f40:	8b 7f       	andi	r24, 0xFB	; 251
    1f42:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    1f44:	34 b3       	in	r19, 0x14	; 20
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <DIO_enumConnectPullup+0xd6>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	6a 95       	dec	r22
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <DIO_enumConnectPullup+0xd2>
    1f54:	28 2f       	mov	r18, r24
    1f56:	20 95       	com	r18
    1f58:	23 23       	and	r18, r19
    1f5a:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC_Register,Copy_u8PIN);
    1f5c:	25 b3       	in	r18, 0x15	; 21
    1f5e:	82 2b       	or	r24, r18
    1f60:	85 bb       	out	0x15, r24	; 21
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    1f66:	80 b7       	in	r24, 0x30	; 48
    1f68:	8b 7f       	andi	r24, 0xFB	; 251
    1f6a:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    1f6c:	37 b3       	in	r19, 0x17	; 23
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_enumConnectPullup+0xfe>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	6a 95       	dec	r22
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <DIO_enumConnectPullup+0xfa>
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	20 95       	com	r18
    1f80:	23 23       	and	r18, r19
    1f82:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB_Register,Copy_u8PIN);
    1f84:	28 b3       	in	r18, 0x18	; 24
    1f86:	82 2b       	or	r24, r18
    1f88:	88 bb       	out	0x18, r24	; 24
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    1f8e:	80 b7       	in	r24, 0x30	; 48
    1f90:	8b 7f       	andi	r24, 0xFB	; 251
    1f92:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    1f94:	31 b3       	in	r19, 0x11	; 17
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_enumConnectPullup+0x126>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	6a 95       	dec	r22
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <DIO_enumConnectPullup+0x122>
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	20 95       	com	r18
    1fa8:	23 23       	and	r18, r19
    1faa:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD_Register,Copy_u8PIN);
    1fac:	22 b3       	in	r18, 0x12	; 18
    1fae:	82 2b       	or	r24, r18
    1fb0:	82 bb       	out	0x12, r24	; 18
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	08 95       	ret

00001fb6 <DIO_enumSetPortDirection>:
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) )
    1fb6:	84 30       	cpi	r24, 0x04	; 4
    1fb8:	40 f4       	brcc	.+16     	; 0x1fca <DIO_enumSetPortDirection+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	59 f0       	breq	.+22     	; 0x1fd4 <DIO_enumSetPortDirection+0x1e>
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	30 f0       	brcs	.+12     	; 0x1fce <DIO_enumSetPortDirection+0x18>
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	69 f0       	breq	.+26     	; 0x1fe0 <DIO_enumSetPortDirection+0x2a>
    1fc6:	83 30       	cpi	r24, 0x03	; 3
    1fc8:	41 f0       	breq	.+16     	; 0x1fda <DIO_enumSetPortDirection+0x24>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    1fca:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    1fcc:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    1fce:	6a bb       	out	0x1a, r22	; 26
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	08 95       	ret
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    1fd4:	67 bb       	out	0x17, r22	; 23
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	08 95       	ret
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    1fda:	61 bb       	out	0x11, r22	; 17
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    1fe0:	64 bb       	out	0x14, r22	; 20
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	08 95       	ret

00001fe6 <DIO_enumSetPortValue>:
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    1fe6:	84 30       	cpi	r24, 0x04	; 4
    1fe8:	40 f4       	brcc	.+16     	; 0x1ffa <DIO_enumSetPortValue+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	59 f0       	breq	.+22     	; 0x2004 <DIO_enumSetPortValue+0x1e>
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	30 f0       	brcs	.+12     	; 0x1ffe <DIO_enumSetPortValue+0x18>
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	69 f0       	breq	.+26     	; 0x2010 <DIO_enumSetPortValue+0x2a>
    1ff6:	83 30       	cpi	r24, 0x03	; 3
    1ff8:	41 f0       	breq	.+16     	; 0x200a <DIO_enumSetPortValue+0x24>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    1ffc:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    1ffe:	6b bb       	out	0x1b, r22	; 27
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	08 95       	ret
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    2004:	68 bb       	out	0x18, r22	; 24
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	08 95       	ret
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    200a:	62 bb       	out	0x12, r22	; 18
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    2010:	65 bb       	out	0x15, r22	; 21
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	08 95       	ret

00002016 <DIO_enumTogglePortValue>:
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    2016:	84 30       	cpi	r24, 0x04	; 4
    2018:	50 f4       	brcc	.+20     	; 0x202e <DIO_enumTogglePortValue+0x18>
	{
		switch (Copy_u8PORT)
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	79 f0       	breq	.+30     	; 0x203c <DIO_enumTogglePortValue+0x26>
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	40 f0       	brcs	.+16     	; 0x2032 <DIO_enumTogglePortValue+0x1c>
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	a9 f0       	breq	.+42     	; 0x2050 <DIO_enumTogglePortValue+0x3a>
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	71 f0       	breq	.+28     	; 0x2046 <DIO_enumTogglePortValue+0x30>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    2032:	8b b3       	in	r24, 0x1b	; 27
    2034:	80 95       	com	r24
    2036:	8b bb       	out	0x1b, r24	; 27
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	08 95       	ret
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    203c:	88 b3       	in	r24, 0x18	; 24
    203e:	80 95       	com	r24
    2040:	88 bb       	out	0x18, r24	; 24
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	08 95       	ret
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    2046:	82 b3       	in	r24, 0x12	; 18
    2048:	80 95       	com	r24
    204a:	82 bb       	out	0x12, r24	; 18
    204c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    204e:	08 95       	ret
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    2050:	85 b3       	in	r24, 0x15	; 21
    2052:	80 95       	com	r24
    2054:	85 bb       	out	0x15, r24	; 21
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	08 95       	ret

0000205a <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    205a:	fb 01       	movw	r30, r22

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    205c:	84 30       	cpi	r24, 0x04	; 4
    205e:	40 f4       	brcc	.+16     	; 0x2070 <DIO_enumGetPortValue+0x16>
	{
		switch (Copy_u8PORT)
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	61 f0       	breq	.+24     	; 0x207c <DIO_enumGetPortValue+0x22>
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	30 f0       	brcs	.+12     	; 0x2074 <DIO_enumGetPortValue+0x1a>
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	81 f0       	breq	.+32     	; 0x208c <DIO_enumGetPortValue+0x32>
    206c:	83 30       	cpi	r24, 0x03	; 3
    206e:	51 f0       	breq	.+20     	; 0x2084 <DIO_enumGetPortValue+0x2a>
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
			break ;
    2070:	80 e0       	ldi	r24, 0x00	; 0
	{
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;
}
    2072:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD))
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    2074:	89 b3       	in	r24, 0x19	; 25
    2076:	80 83       	st	Z, r24
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    207c:	86 b3       	in	r24, 0x16	; 22
    207e:	80 83       	st	Z, r24
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	08 95       	ret
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    2084:	80 b3       	in	r24, 0x10	; 16
    2086:	80 83       	st	Z, r24
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    208c:	83 b3       	in	r24, 0x13	; 19
    208e:	80 83       	st	Z, r24
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	08 95       	ret

00002094 <DIO_voidWriteHighNibbles>:
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    2094:	84 30       	cpi	r24, 0x04	; 4
    2096:	60 f4       	brcc	.+24     	; 0x20b0 <DIO_voidWriteHighNibbles+0x1c>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    2098:	62 95       	swap	r22
    209a:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PORT)
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 f0       	breq	.+36     	; 0x20c4 <DIO_voidWriteHighNibbles+0x30>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	40 f0       	brcs	.+16     	; 0x20b4 <DIO_voidWriteHighNibbles+0x20>
    20a4:	82 30       	cpi	r24, 0x02	; 2
    20a6:	f1 f0       	breq	.+60     	; 0x20e4 <DIO_voidWriteHighNibbles+0x50>
    20a8:	83 30       	cpi	r24, 0x03	; 3
    20aa:	a1 f0       	breq	.+40     	; 0x20d4 <DIO_voidWriteHighNibbles+0x40>
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	08 95       	ret
	{
		Copy_u8value = (Copy_u8value<<4) ;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    20b4:	8b b3       	in	r24, 0x1b	; 27
    20b6:	8f 70       	andi	r24, 0x0F	; 15
    20b8:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    20ba:	8b b3       	in	r24, 0x1b	; 27
    20bc:	68 2b       	or	r22, r24
    20be:	6b bb       	out	0x1b, r22	; 27
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    20c4:	88 b3       	in	r24, 0x18	; 24
    20c6:	8f 70       	andi	r24, 0x0F	; 15
    20c8:	88 bb       	out	0x18, r24	; 24
			PORTB_Register|=Copy_u8value;
    20ca:	88 b3       	in	r24, 0x18	; 24
    20cc:	68 2b       	or	r22, r24
    20ce:	68 bb       	out	0x18, r22	; 24
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    20d4:	82 b3       	in	r24, 0x12	; 18
    20d6:	8f 70       	andi	r24, 0x0F	; 15
    20d8:	82 bb       	out	0x12, r24	; 18
			PORTD_Register|=Copy_u8value;
    20da:	82 b3       	in	r24, 0x12	; 18
    20dc:	68 2b       	or	r22, r24
    20de:	62 bb       	out	0x12, r22	; 18
    20e0:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    20e2:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    20e4:	85 b3       	in	r24, 0x15	; 21
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	85 bb       	out	0x15, r24	; 21
			PORTC_Register|=Copy_u8value;
    20ea:	85 b3       	in	r24, 0x15	; 21
    20ec:	68 2b       	or	r22, r24
    20ee:	65 bb       	out	0x15, r22	; 21
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	08 95       	ret

000020f4 <DIO_voidWriteLowNibbles>:
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    20f4:	84 30       	cpi	r24, 0x04	; 4
    20f6:	58 f4       	brcc	.+22     	; 0x210e <DIO_voidWriteLowNibbles+0x1a>
	{
		Copy_u8value&=0x0f;
    20f8:	6f 70       	andi	r22, 0x0F	; 15
		switch(Copy_u8PORT)
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	91 f0       	breq	.+36     	; 0x2122 <DIO_voidWriteLowNibbles+0x2e>
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	40 f0       	brcs	.+16     	; 0x2112 <DIO_voidWriteLowNibbles+0x1e>
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	f1 f0       	breq	.+60     	; 0x2142 <DIO_voidWriteLowNibbles+0x4e>
    2106:	83 30       	cpi	r24, 0x03	; 3
    2108:	a1 f0       	breq	.+40     	; 0x2132 <DIO_voidWriteLowNibbles+0x3e>
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	08 95       	ret
	{
		Copy_u8value&=0x0f;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    2112:	8b b3       	in	r24, 0x1b	; 27
    2114:	80 7f       	andi	r24, 0xF0	; 240
    2116:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= Copy_u8value;
    2118:	8b b3       	in	r24, 0x1b	; 27
    211a:	68 2b       	or	r22, r24
    211c:	6b bb       	out	0x1b, r22	; 27
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    2122:	88 b3       	in	r24, 0x18	; 24
    2124:	80 7f       	andi	r24, 0xF0	; 240
    2126:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= Copy_u8value;
    2128:	88 b3       	in	r24, 0x18	; 24
    212a:	68 2b       	or	r22, r24
    212c:	68 bb       	out	0x18, r22	; 24
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    2132:	82 b3       	in	r24, 0x12	; 18
    2134:	80 7f       	andi	r24, 0xF0	; 240
    2136:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= Copy_u8value;
    2138:	82 b3       	in	r24, 0x12	; 18
    213a:	68 2b       	or	r22, r24
    213c:	62 bb       	out	0x12, r22	; 18
    213e:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    2140:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    2142:	85 b3       	in	r24, 0x15	; 21
    2144:	80 7f       	andi	r24, 0xF0	; 240
    2146:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= Copy_u8value;
    2148:	85 b3       	in	r24, 0x15	; 21
    214a:	68 2b       	or	r22, r24
    214c:	65 bb       	out	0x15, r22	; 21
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	08 95       	ret

00002152 <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/

u8   SW_u8GetPressed ( SW_Type SW_Config ){
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	00 d0       	rcall	.+0      	; 0x2158 <SW_u8GetPressed+0x6>
    2158:	00 d0       	rcall	.+0      	; 0x215a <SW_u8GetPressed+0x8>
    215a:	cd b7       	in	r28, 0x3d	; 61
    215c:	de b7       	in	r29, 0x3e	; 62
    215e:	26 2f       	mov	r18, r22
    2160:	6a 83       	std	Y+2, r22	; 0x02
    2162:	7b 83       	std	Y+3, r23	; 0x03
    2164:	8c 83       	std	Y+4, r24	; 0x04
    2166:	67 2f       	mov	r22, r23
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    2168:	19 82       	std	Y+1, r1	; 0x01
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	00 f1       	brcs	.+64     	; 0x21ae <SW_u8GetPressed+0x5c>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
    216e:	82 30       	cpi	r24, 0x02	; 2
    2170:	49 f0       	breq	.+18     	; 0x2184 <SW_u8GetPressed+0x32>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
		
		if (LOC_u8PinVal==0)
    2172:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
		
	return LOC_u8Result ;
	
}
    2174:	89 2f       	mov	r24, r25
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    2184:	82 2f       	mov	r24, r18
    2186:	ae 01       	movw	r20, r28
    2188:	4f 5f       	subi	r20, 0xFF	; 255
    218a:	5f 4f       	sbci	r21, 0xFF	; 255
    218c:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	88 23       	and	r24, r24
    2194:	71 f3       	breq	.-36     	; 0x2172 <SW_u8GetPressed+0x20>
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	61 f7       	brne	.-40     	; 0x2174 <SW_u8GetPressed+0x22>
    219c:	91 e0       	ldi	r25, 0x01	; 1
		}
	}
		
	return LOC_u8Result ;
	
}
    219e:	89 2f       	mov	r24, r25
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    21ae:	82 2f       	mov	r24, r18
    21b0:	ae 01       	movw	r20, r28
    21b2:	4f 5f       	subi	r20, 0xFF	; 255
    21b4:	5f 4f       	sbci	r21, 0xFF	; 255
    21b6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	88 23       	and	r24, r24
    21c0:	c9 f6       	brne	.-78     	; 0x2174 <SW_u8GetPressed+0x22>
    21c2:	ec cf       	rjmp	.-40     	; 0x219c <SW_u8GetPressed+0x4a>

000021c4 <SW_voidInit>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void 
*/
void SW_voidInit      ( SW_Type SW_Config ){
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <SW_voidInit+0xa>
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	69 83       	std	Y+1, r22	; 0x01
    21d6:	7a 83       	std	Y+2, r23	; 0x02
    21d8:	8b 83       	std	Y+3, r24	; 0x03
    21da:	06 2f       	mov	r16, r22
    21dc:	17 2f       	mov	r17, r23
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
    21de:	86 2f       	mov	r24, r22
    21e0:	67 2f       	mov	r22, r23
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	88 23       	and	r24, r24
    21ec:	29 f4       	brne	.+10     	; 0x21f8 <SW_voidInit+0x34>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
    21ee:	80 2f       	mov	r24, r16
    21f0:	61 2f       	mov	r22, r17
    21f2:	41 e0       	ldi	r20, 0x01	; 1
    21f4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	18 2f       	mov	r17, r24
    220e:	09 2f       	mov	r16, r25

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    2210:	66 23       	and	r22, r22
    2212:	29 f0       	breq	.+10     	; 0x221e <SSD_voidDisable+0x16>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    2214:	61 30       	cpi	r22, 0x01	; 1
    2216:	79 f0       	breq	.+30     	; 0x2236 <SSD_voidDisable+0x2e>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}

}
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	08 95       	ret
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    221e:	69 2f       	mov	r22, r25
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    2226:	81 2f       	mov	r24, r17
    2228:	60 2f       	mov	r22, r16
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}

}
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	08 95       	ret
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    2236:	69 2f       	mov	r22, r25
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    223e:	81 2f       	mov	r24, r17
    2240:	60 2f       	mov	r22, r16
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>

	}

}
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret

0000224e <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
    224e:	0f 93       	push	r16
    2250:	1f 93       	push	r17
    2252:	18 2f       	mov	r17, r24
    2254:	09 2f       	mov	r16, r25

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    2256:	66 23       	and	r22, r22
    2258:	29 f0       	breq	.+10     	; 0x2264 <SSD_voidEnable+0x16>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    225a:	61 30       	cpi	r22, 0x01	; 1
    225c:	79 f0       	breq	.+30     	; 0x227c <SSD_voidEnable+0x2e>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}

}
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    2264:	69 2f       	mov	r22, r25
    2266:	41 e0       	ldi	r20, 0x01	; 1
    2268:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    226c:	81 2f       	mov	r24, r17
    226e:	60 2f       	mov	r22, r16
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}

}
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	08 95       	ret
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    227c:	69 2f       	mov	r22, r25
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    2284:	81 2f       	mov	r24, r17
    2286:	60 2f       	mov	r22, r16
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>

	}

}
    228e:	1f 91       	pop	r17
    2290:	0f 91       	pop	r16
    2292:	08 95       	ret

00002294 <SSD_voidSendNumber>:
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    2294:	66 23       	and	r22, r22
    2296:	19 f0       	breq	.+6      	; 0x229e <SSD_voidSendNumber+0xa>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    2298:	61 30       	cpi	r22, 0x01	; 1
    229a:	51 f0       	breq	.+20     	; 0x22b0 <SSD_voidSendNumber+0x1c>
    229c:	08 95       	ret
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
    229e:	e4 2f       	mov	r30, r20
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	ed 59       	subi	r30, 0x9D	; 157
    22a4:	fd 4f       	sbci	r31, 0xFD	; 253
    22a6:	87 2f       	mov	r24, r23
    22a8:	60 81       	ld	r22, Z
    22aa:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <DIO_enumSetPortValue>
    22ae:	08 95       	ret

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
    22b0:	e4 2f       	mov	r30, r20
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	ed 59       	subi	r30, 0x9D	; 157
    22b6:	fd 4f       	sbci	r31, 0xFD	; 253
    22b8:	60 81       	ld	r22, Z
    22ba:	60 95       	com	r22
    22bc:	87 2f       	mov	r24, r23
    22be:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <DIO_enumSetPortValue>
    22c2:	08 95       	ret

000022c4 <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
    22c4:	87 2f       	mov	r24, r23
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
    22c6:	6f ef       	ldi	r22, 0xFF	; 255
    22c8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_enumSetPortDirection>
}
    22cc:	08 95       	ret

000022ce <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED_Configuration )
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <LED_voidToggle+0x6>
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	96 2f       	mov	r25, r22
    22dc:	69 83       	std	Y+1, r22	; 0x01
    22de:	67 2f       	mov	r22, r23
    22e0:	7a 83       	std	Y+2, r23	; 0x02
    22e2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED_Configuration.Port , LED_Configuration.Pin );
    22e4:	89 2f       	mov	r24, r25
    22e6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <DIO_enumTogglePinValue>
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED_Configuration )
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <LED_voidOff+0x6>
    22fc:	0f 92       	push	r0
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	26 2f       	mov	r18, r22
    2304:	69 83       	std	Y+1, r22	; 0x01
    2306:	7a 83       	std	Y+2, r23	; 0x02
    2308:	8b 83       	std	Y+3, r24	; 0x03
    230a:	67 2f       	mov	r22, r23
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    230c:	81 30       	cpi	r24, 0x01	; 1
    230e:	61 f0       	breq	.+24     	; 0x2328 <LED_voidOff+0x32>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    2310:	88 23       	and	r24, r24
    2312:	21 f4       	brne	.+8      	; 0x231c <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
    2314:	82 2f       	mov	r24, r18
    2316:	41 e0       	ldi	r20, 0x01	; 1
    2318:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		
	}
	
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret
void LED_voidOff ( LED_Type LED_Configuration )
{
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    2328:	82 2f       	mov	r24, r18
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
		
	}
	
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED_Configuration )
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	00 d0       	rcall	.+0      	; 0x2342 <LED_voidOn+0x6>
    2342:	0f 92       	push	r0
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	26 2f       	mov	r18, r22
    234a:	69 83       	std	Y+1, r22	; 0x01
    234c:	7a 83       	std	Y+2, r23	; 0x02
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	67 2f       	mov	r22, r23
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	61 f0       	breq	.+24     	; 0x236e <LED_voidOn+0x32>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    2356:	88 23       	and	r24, r24
    2358:	21 f4       	brne	.+8      	; 0x2362 <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    235a:	82 2f       	mov	r24, r18
    235c:	40 e0       	ldi	r20, 0x00	; 0
    235e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		
	}
	
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret
void LED_voidOn  ( LED_Type LED_Configuration )
{
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    236e:	82 2f       	mov	r24, r18
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
		
	}
	
}
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	cf 91       	pop	r28
    237e:	df 91       	pop	r29
    2380:	08 95       	ret

00002382 <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED_Configuration )
{
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	00 d0       	rcall	.+0      	; 0x2388 <LED_voidInit+0x6>
    2388:	0f 92       	push	r0
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	96 2f       	mov	r25, r22
    2390:	69 83       	std	Y+1, r22	; 0x01
    2392:	67 2f       	mov	r22, r23
    2394:	7a 83       	std	Y+2, r23	; 0x02
    2396:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    2398:	89 2f       	mov	r24, r25
    239a:	41 e0       	ldi	r20, 0x01	; 1
    239c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <KPD_u8GetPressed>:
/*
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8   KPD_u8GetPressed( void ){
    23ac:	9f 92       	push	r9
    23ae:	af 92       	push	r10
    23b0:	bf 92       	push	r11
    23b2:	cf 92       	push	r12
    23b4:	df 92       	push	r13
    23b6:	ef 92       	push	r14
    23b8:	ff 92       	push	r15
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	0f 92       	push	r0
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	99 24       	eor	r9, r9
    23ca:	9a 94       	dec	r9
    23cc:	ee 24       	eor	r14, r14
    23ce:	ff 24       	eor	r15, r15
    23d0:	8e 01       	movw	r16, r28
    23d2:	0f 5f       	subi	r16, 0xFF	; 255
    23d4:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d6:	48 ec       	ldi	r20, 0xC8	; 200
    23d8:	c4 2e       	mov	r12, r20
    23da:	d1 2c       	mov	r13, r1
    23dc:	34 e0       	ldi	r19, 0x04	; 4
    23de:	a3 2e       	mov	r10, r19
    23e0:	ae 0c       	add	r10, r14
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	6a 2d       	mov	r22, r10
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	a8 01       	movw	r20, r16
    23f2:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	88 23       	and	r24, r24
    23fa:	a9 f1       	breq	.+106    	; 0x2466 <KPD_u8GetPressed+0xba>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	61 e0       	ldi	r22, 0x01	; 1
    2400:	a8 01       	movw	r20, r16
    2402:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	88 23       	and	r24, r24
    240a:	09 f4       	brne	.+2      	; 0x240e <KPD_u8GetPressed+0x62>
    240c:	54 c0       	rjmp	.+168    	; 0x24b6 <KPD_u8GetPressed+0x10a>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	62 e0       	ldi	r22, 0x02	; 2
    2412:	a8 01       	movw	r20, r16
    2414:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	88 23       	and	r24, r24
    241c:	09 f4       	brne	.+2      	; 0x2420 <KPD_u8GetPressed+0x74>
    241e:	4e c0       	rjmp	.+156    	; 0x24bc <KPD_u8GetPressed+0x110>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	63 e0       	ldi	r22, 0x03	; 3
    2424:	a8 01       	movw	r20, r16
    2426:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 23       	and	r24, r24
    242e:	09 f4       	brne	.+2      	; 0x2432 <KPD_u8GetPressed+0x86>
    2430:	48 c0       	rjmp	.+144    	; 0x24c2 <KPD_u8GetPressed+0x116>
			}

		}

		// return this column’s pin to high
		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_HIGH );
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	6a 2d       	mov	r22, r10
    2436:	41 e0       	ldi	r20, 0x01	; 1
    2438:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    243c:	08 94       	sec
    243e:	e1 1c       	adc	r14, r1
    2440:	f1 1c       	adc	r15, r1
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
    2442:	84 e0       	ldi	r24, 0x04	; 4
    2444:	e8 16       	cp	r14, r24
    2446:	f1 04       	cpc	r15, r1
    2448:	49 f6       	brne	.-110    	; 0x23dc <KPD_u8GetPressed+0x30>

	}

	return LOC_u8ReturnData ;

}
    244a:	89 2d       	mov	r24, r9
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	08 95       	ret
			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    2466:	bb 24       	eor	r11, r11
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	c6 01       	movw	r24, r12
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <KPD_u8GetPressed+0xc2>
    2472:	2f 5f       	subi	r18, 0xFF	; 255
    2474:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	24 3f       	cpi	r18, 0xF4	; 244
    247a:	38 07       	cpc	r19, r24
    247c:	b9 f7       	brne	.-18     	; 0x246c <KPD_u8GetPressed+0xc0>
			{

				_delay_ms(50);   // delay for bouncing

				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );   // to make sure that the button is pressed & check again
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	6b 2d       	mov	r22, r11
    2482:	a8 01       	movw	r20, r16
    2484:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>

				if( LOC_u8GetPressed == 0 )
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	88 23       	and	r24, r24
    248c:	59 f4       	brne	.+22     	; 0x24a4 <KPD_u8GetPressed+0xf8>
					the button will know by the row and the column (ASCII Code)
					==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
					==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
					*/

					LOC_u8ReturnData = KPD_u8Buttons[ LOC_u8Row - KPD_ROW_INIT ][ LOC_u8Col - KPD_COL_INIT ];
    248e:	eb 2d       	mov	r30, r11
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	ee 0f       	add	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	ee 0d       	add	r30, r14
    249c:	ff 1d       	adc	r31, r15
    249e:	e2 5f       	subi	r30, 0xF2	; 242
    24a0:	fd 4f       	sbci	r31, 0xFD	; 253
    24a2:	90 80       	ld	r9, Z

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
    24a4:	80 e0       	ldi	r24, 0x00	; 0
    24a6:	6b 2d       	mov	r22, r11
    24a8:	a8 01       	movw	r20, r16
    24aa:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <DIO_enumGetPinValue>
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	88 23       	and	r24, r24
    24b2:	c1 f3       	breq	.-16     	; 0x24a4 <KPD_u8GetPressed+0xf8>
    24b4:	be cf       	rjmp	.-132    	; 0x2432 <KPD_u8GetPressed+0x86>
			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    24b6:	bb 24       	eor	r11, r11
    24b8:	b3 94       	inc	r11
    24ba:	d6 cf       	rjmp	.-84     	; 0x2468 <KPD_u8GetPressed+0xbc>
    24bc:	22 e0       	ldi	r18, 0x02	; 2
    24be:	b2 2e       	mov	r11, r18
    24c0:	d3 cf       	rjmp	.-90     	; 0x2468 <KPD_u8GetPressed+0xbc>
    24c2:	93 e0       	ldi	r25, 0x03	; 3
    24c4:	b9 2e       	mov	r11, r25
    24c6:	d0 cf       	rjmp	.-96     	; 0x2468 <KPD_u8GetPressed+0xbc>

000024c8 <KPD_Init>:
 */
void KPD_Init(void){

	/*                    connect pull up for the pins of the rows                             */

	DIO_enumConnectPullup        ( KPD_PORT , KPD_R0 , DIO_PIN_HIGH );
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	60 e0       	ldi	r22, 0x00	; 0
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R1 , DIO_PIN_HIGH );
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R2 , DIO_PIN_HIGH );
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	62 e0       	ldi	r22, 0x02	; 2
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R3 , DIO_PIN_HIGH );
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	63 e0       	ldi	r22, 0x03	; 3
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <DIO_enumConnectPullup>


	/*                 connect the pins of the columns as output pins (HIGH)                    */


	DIO_enumSetPinDirection( KPD_PORT , KPD_C0 , DIO_PIN_OUTPUT );
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	64 e0       	ldi	r22, 0x04	; 4
    24f4:	41 e0       	ldi	r20, 0x01	; 1
    24f6:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C1 , DIO_PIN_OUTPUT );
    24fa:	80 e0       	ldi	r24, 0x00	; 0
    24fc:	65 e0       	ldi	r22, 0x05	; 5
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C2 , DIO_PIN_OUTPUT );
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	66 e0       	ldi	r22, 0x06	; 6
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C3 , DIO_PIN_OUTPUT );
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	67 e0       	ldi	r22, 0x07	; 7
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue    ( KPD_PORT , KPD_C0 , DIO_PIN_HIGH );
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	64 e0       	ldi	r22, 0x04	; 4
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C1 , DIO_PIN_HIGH );
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	65 e0       	ldi	r22, 0x05	; 5
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C2 , DIO_PIN_HIGH );
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	66 e0       	ldi	r22, 0x06	; 6
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C3 , DIO_PIN_HIGH );
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	67 e0       	ldi	r22, 0x07	; 7
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>

}
    2540:	08 95       	ret

00002542 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    2542:	ef 92       	push	r14
    2544:	ff 92       	push	r15
    2546:	1f 93       	push	r17
    2548:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	65 e0       	ldi	r22, 0x05	; 5
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	66 e0       	ldi	r22, 0x06	; 6
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    255e:	61 2f       	mov	r22, r17
    2560:	62 95       	swap	r22
    2562:	6f 70       	andi	r22, 0x0F	; 15
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	67 e0       	ldi	r22, 0x07	; 7
    256e:	41 e0       	ldi	r20, 0x01	; 1
    2570:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2574:	80 ed       	ldi	r24, 0xD0	; 208
    2576:	e8 2e       	mov	r14, r24
    2578:	87 e0       	ldi	r24, 0x07	; 7
    257a:	f8 2e       	mov	r15, r24
    257c:	c7 01       	movw	r24, r14
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <CLCD_voidSendCommand+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	67 e0       	ldi	r22, 0x07	; 7
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    258c:	c7 01       	movw	r24, r14
    258e:	01 97       	sbiw	r24, 0x01	; 1
    2590:	f1 f7       	brne	.-4      	; 0x258e <CLCD_voidSendCommand+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	61 2f       	mov	r22, r17
    2596:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	67 e0       	ldi	r22, 0x07	; 7
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    25a4:	c7 01       	movw	r24, r14
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <CLCD_voidSendCommand+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	67 e0       	ldi	r22, 0x07	; 7
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    25b4:	c7 01       	movw	r24, r14
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <CLCD_voidSendCommand+0x74>
    25ba:	c7 01       	movw	r24, r14
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <CLCD_voidSendCommand+0x7a>

	#endif

	_delay_ms(1);

}
    25c0:	1f 91       	pop	r17
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	08 95       	ret

000025c8 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	1f 93       	push	r17
    25ce:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	65 e0       	ldi	r22, 0x05	; 5
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	66 e0       	ldi	r22, 0x06	; 6
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    25e4:	61 2f       	mov	r22, r17
    25e6:	62 95       	swap	r22
    25e8:	6f 70       	andi	r22, 0x0F	; 15
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	67 e0       	ldi	r22, 0x07	; 7
    25f4:	41 e0       	ldi	r20, 0x01	; 1
    25f6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    25fa:	90 ed       	ldi	r25, 0xD0	; 208
    25fc:	e9 2e       	mov	r14, r25
    25fe:	97 e0       	ldi	r25, 0x07	; 7
    2600:	f9 2e       	mov	r15, r25
    2602:	c7 01       	movw	r24, r14
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <CLCD_voidSendData+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	67 e0       	ldi	r22, 0x07	; 7
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2612:	c7 01       	movw	r24, r14
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	f1 f7       	brne	.-4      	; 0x2614 <CLCD_voidSendData+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2618:	83 e0       	ldi	r24, 0x03	; 3
    261a:	61 2f       	mov	r22, r17
    261c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	67 e0       	ldi	r22, 0x07	; 7
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    262a:	c7 01       	movw	r24, r14
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <CLCD_voidSendData+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	67 e0       	ldi	r22, 0x07	; 7
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    263a:	c7 01       	movw	r24, r14
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <CLCD_voidSendData+0x74>
    2640:	c7 01       	movw	r24, r14
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <CLCD_voidSendData+0x7a>

	#endif

	_delay_ms(1);

}
    2646:	1f 91       	pop	r17
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
    264c:	08 95       	ret

0000264e <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	7c 01       	movw	r14, r24

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    265c:	fc 01       	movw	r30, r24
    265e:	10 81       	ld	r17, Z
    2660:	11 23       	and	r17, r17
    2662:	09 f4       	brne	.+2      	; 0x2666 <CLCD_voidSendString+0x18>
    2664:	42 c0       	rjmp	.+132    	; 0x26ea <CLCD_voidSendString+0x9c>
    2666:	00 e0       	ldi	r16, 0x00	; 0
    2668:	c0 ed       	ldi	r28, 0xD0	; 208
    266a:	d7 e0       	ldi	r29, 0x07	; 7
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	65 e0       	ldi	r22, 0x05	; 5
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	66 e0       	ldi	r22, 0x06	; 6
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2680:	61 2f       	mov	r22, r17
    2682:	62 95       	swap	r22
    2684:	6f 70       	andi	r22, 0x0F	; 15
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	67 e0       	ldi	r22, 0x07	; 7
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2696:	ce 01       	movw	r24, r28
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <CLCD_voidSendString+0x4a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	67 e0       	ldi	r22, 0x07	; 7
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    26a6:	ce 01       	movw	r24, r28
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <CLCD_voidSendString+0x5a>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    26ac:	83 e0       	ldi	r24, 0x03	; 3
    26ae:	61 2f       	mov	r22, r17
    26b0:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	67 e0       	ldi	r22, 0x07	; 7
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    26be:	ce 01       	movw	r24, r28
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <CLCD_voidSendString+0x72>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	67 e0       	ldi	r22, 0x07	; 7
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    26ce:	ce 01       	movw	r24, r28
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <CLCD_voidSendString+0x82>
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <CLCD_voidSendString+0x88>
	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;
    26da:	0f 5f       	subi	r16, 0xFF	; 255
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    26dc:	f7 01       	movw	r30, r14
    26de:	e0 0f       	add	r30, r16
    26e0:	f1 1d       	adc	r31, r1
    26e2:	10 81       	ld	r17, Z
    26e4:	11 23       	and	r17, r17
    26e6:	09 f0       	breq	.+2      	; 0x26ea <CLCD_voidSendString+0x9c>
    26e8:	c1 cf       	rjmp	.-126    	; 0x266c <CLCD_voidSendString+0x1e>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    26ea:	df 91       	pop	r29
    26ec:	cf 91       	pop	r28
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	ff 90       	pop	r15
    26f4:	ef 90       	pop	r14
    26f6:	08 95       	ret

000026f8 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	65 e0       	ldi	r22, 0x05	; 5
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	60 e0       	ldi	r22, 0x00	; 0
    2714:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	67 e0       	ldi	r22, 0x07	; 7
    271c:	41 e0       	ldi	r20, 0x01	; 1
    271e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2722:	00 ed       	ldi	r16, 0xD0	; 208
    2724:	17 e0       	ldi	r17, 0x07	; 7
    2726:	c8 01       	movw	r24, r16
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	f1 f7       	brne	.-4      	; 0x2728 <CLCD_voidClearScreen+0x30>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	67 e0       	ldi	r22, 0x07	; 7
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2736:	c8 01       	movw	r24, r16
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <CLCD_voidClearScreen+0x40>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	67 e0       	ldi	r22, 0x07	; 7
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    274e:	c8 01       	movw	r24, r16
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <CLCD_voidClearScreen+0x58>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	67 e0       	ldi	r22, 0x07	; 7
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    275e:	c8 01       	movw	r24, r16
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	f1 f7       	brne	.-4      	; 0x2760 <CLCD_voidClearScreen+0x68>
    2764:	c8 01       	movw	r24, r16
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <CLCD_voidClearScreen+0x6e>
    276a:	80 e2       	ldi	r24, 0x20	; 32
    276c:	9e e4       	ldi	r25, 0x4E	; 78
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <CLCD_voidClearScreen+0x76>
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
	_delay_ms(10); //wait more than 1.53 ms
}
    2772:	1f 91       	pop	r17
    2774:	0f 91       	pop	r16
    2776:	08 95       	ret

00002778 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    2778:	ff 92       	push	r15
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	98 2f       	mov	r25, r24

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	82 30       	cpi	r24, 0x02	; 2
    2784:	08 f4       	brcc	.+2      	; 0x2788 <CLCD_voidSetPosition+0x10>
    2786:	42 c0       	rjmp	.+132    	; 0x280c <CLCD_voidSetPosition+0x94>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    2788:	20 e8       	ldi	r18, 0x80	; 128
    278a:	f2 2e       	mov	r15, r18
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	65 e0       	ldi	r22, 0x05	; 5
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	66 e0       	ldi	r22, 0x06	; 6
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    27a0:	6f 2d       	mov	r22, r15
    27a2:	62 95       	swap	r22
    27a4:	6f 70       	andi	r22, 0x0F	; 15
    27a6:	83 e0       	ldi	r24, 0x03	; 3
    27a8:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	67 e0       	ldi	r22, 0x07	; 7
    27b0:	41 e0       	ldi	r20, 0x01	; 1
    27b2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    27b6:	00 ed       	ldi	r16, 0xD0	; 208
    27b8:	17 e0       	ldi	r17, 0x07	; 7
    27ba:	c8 01       	movw	r24, r16
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <CLCD_voidSetPosition+0x44>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	67 e0       	ldi	r22, 0x07	; 7
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    27ca:	c8 01       	movw	r24, r16
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <CLCD_voidSetPosition+0x54>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	6f 2d       	mov	r22, r15
    27d4:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	67 e0       	ldi	r22, 0x07	; 7
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    27e2:	c8 01       	movw	r24, r16
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <CLCD_voidSetPosition+0x6c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	67 e0       	ldi	r22, 0x07	; 7
    27ec:	40 e0       	ldi	r20, 0x00	; 0
    27ee:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    27f2:	c8 01       	movw	r24, r16
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <CLCD_voidSetPosition+0x7c>
    27f8:	c8 01       	movw	r24, r16
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <CLCD_voidSetPosition+0x82>
    27fe:	c8 01       	movw	r24, r16
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <CLCD_voidSetPosition+0x88>

	}
	CLCD_voidSendCommand ( LOC_u8data );
	_delay_ms(1);

}
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	ff 90       	pop	r15
    280a:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    280c:	61 31       	cpi	r22, 0x11	; 17
    280e:	08 f0       	brcs	.+2      	; 0x2812 <CLCD_voidSetPosition+0x9a>
    2810:	bb cf       	rjmp	.-138    	; 0x2788 <CLCD_voidSetPosition+0x10>
    2812:	66 23       	and	r22, r22
    2814:	09 f4       	brne	.+2      	; 0x2818 <CLCD_voidSetPosition+0xa0>
    2816:	b8 cf       	rjmp	.-144    	; 0x2788 <CLCD_voidSetPosition+0x10>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    2818:	91 30       	cpi	r25, 0x01	; 1
    281a:	39 f0       	breq	.+14     	; 0x282a <CLCD_voidSetPosition+0xb2>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    281c:	92 30       	cpi	r25, 0x02	; 2
    281e:	09 f0       	breq	.+2      	; 0x2822 <CLCD_voidSetPosition+0xaa>
    2820:	b5 cf       	rjmp	.-150    	; 0x278c <CLCD_voidSetPosition+0x14>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    2822:	3f eb       	ldi	r19, 0xBF	; 191
    2824:	f3 2e       	mov	r15, r19
    2826:	f6 0e       	add	r15, r22
    2828:	b1 cf       	rjmp	.-158    	; 0x278c <CLCD_voidSetPosition+0x14>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	f4 2e       	mov	r15, r20
    282e:	f6 0e       	add	r15, r22
    2830:	ad cf       	rjmp	.-166    	; 0x278c <CLCD_voidSetPosition+0x14>

00002832 <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	48 ec       	ldi	r20, 0xC8	; 200
    283c:	50 e0       	ldi	r21, 0x00	; 0
    283e:	ca 01       	movw	r24, r20
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <CLCD_voidInit+0xe>
    2844:	2f 5f       	subi	r18, 0xFF	; 255
    2846:	3f 4f       	sbci	r19, 0xFF	; 255
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	24 3f       	cpi	r18, 0xF4	; 244
    284c:	38 07       	cpc	r19, r24
    284e:	b9 f7       	brne	.-18     	; 0x283e <CLCD_voidInit+0xc>

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN4,DIO_PIN_OUTPUT);
    2850:	83 e0       	ldi	r24, 0x03	; 3
    2852:	64 e0       	ldi	r22, 0x04	; 4
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN5,DIO_PIN_OUTPUT);
    285a:	83 e0       	ldi	r24, 0x03	; 3
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN6,DIO_PIN_OUTPUT);
    2864:	83 e0       	ldi	r24, 0x03	; 3
    2866:	66 e0       	ldi	r22, 0x06	; 6
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN7,DIO_PIN_OUTPUT);
    286e:	83 e0       	ldi	r24, 0x03	; 3
    2870:	67 e0       	ldi	r22, 0x07	; 7
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	65 e0       	ldi	r22, 0x05	; 5
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	66 e0       	ldi	r22, 0x06	; 6
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	67 e0       	ldi	r22, 0x07	; 7
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <DIO_enumSetPinDirection>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	65 e0       	ldi	r22, 0x05	; 5
    289a:	40 e0       	ldi	r20, 0x00	; 0
    289c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	66 e0       	ldi	r22, 0x06	; 6
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	67 e0       	ldi	r22, 0x07	; 7
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    28bc:	00 ed       	ldi	r16, 0xD0	; 208
    28be:	17 e0       	ldi	r17, 0x07	; 7
    28c0:	c8 01       	movw	r24, r16
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <CLCD_voidInit+0x90>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	67 e0       	ldi	r22, 0x07	; 7
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    28d0:	c8 01       	movw	r24, r16
    28d2:	01 97       	sbiw	r24, 0x01	; 1
    28d4:	f1 f7       	brne	.-4      	; 0x28d2 <CLCD_voidInit+0xa0>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    28d6:	83 e0       	ldi	r24, 0x03	; 3
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	67 e0       	ldi	r22, 0x07	; 7
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    28e8:	c8 01       	movw	r24, r16
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <CLCD_voidInit+0xb8>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	67 e0       	ldi	r22, 0x07	; 7
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    28f8:	c8 01       	movw	r24, r16
    28fa:	01 97       	sbiw	r24, 0x01	; 1
    28fc:	f1 f7       	brne	.-4      	; 0x28fa <CLCD_voidInit+0xc8>
    28fe:	c8 01       	movw	r24, r16
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <CLCD_voidInit+0xce>
    2904:	80 e6       	ldi	r24, 0x60	; 96
    2906:	9a ee       	ldi	r25, 0xEA	; 234
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <CLCD_voidInit+0xd6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	65 e0       	ldi	r22, 0x05	; 5
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	66 e0       	ldi	r22, 0x06	; 6
    291a:	40 e0       	ldi	r20, 0x00	; 0
    291c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2920:	83 e0       	ldi	r24, 0x03	; 3
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	67 e0       	ldi	r22, 0x07	; 7
    292c:	41 e0       	ldi	r20, 0x01	; 1
    292e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2932:	c8 01       	movw	r24, r16
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <CLCD_voidInit+0x102>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	67 e0       	ldi	r22, 0x07	; 7
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2942:	c8 01       	movw	r24, r16
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <CLCD_voidInit+0x112>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	68 e2       	ldi	r22, 0x28	; 40
    294c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	67 e0       	ldi	r22, 0x07	; 7
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    295a:	c8 01       	movw	r24, r16
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <CLCD_voidInit+0x12a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	67 e0       	ldi	r22, 0x07	; 7
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    296a:	c8 01       	movw	r24, r16
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <CLCD_voidInit+0x13a>
    2970:	c8 01       	movw	r24, r16
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <CLCD_voidInit+0x140>
    2976:	c8 01       	movw	r24, r16
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <CLCD_voidInit+0x146>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	65 e0       	ldi	r22, 0x05	; 5
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	66 e0       	ldi	r22, 0x06	; 6
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	67 e0       	ldi	r22, 0x07	; 7
    299c:	41 e0       	ldi	r20, 0x01	; 1
    299e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    29a2:	c8 01       	movw	r24, r16
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <CLCD_voidInit+0x172>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	67 e0       	ldi	r22, 0x07	; 7
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    29b2:	c8 01       	movw	r24, r16
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <CLCD_voidInit+0x182>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	6c e0       	ldi	r22, 0x0C	; 12
    29bc:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	67 e0       	ldi	r22, 0x07	; 7
    29c4:	41 e0       	ldi	r20, 0x01	; 1
    29c6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    29ca:	c8 01       	movw	r24, r16
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <CLCD_voidInit+0x19a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	67 e0       	ldi	r22, 0x07	; 7
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    29da:	c8 01       	movw	r24, r16
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <CLCD_voidInit+0x1aa>
    29e0:	c8 01       	movw	r24, r16
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <CLCD_voidInit+0x1b0>
    29e6:	c8 01       	movw	r24, r16
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <CLCD_voidInit+0x1b6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	65 e0       	ldi	r22, 0x05	; 5
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	66 e0       	ldi	r22, 0x06	; 6
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2a00:	83 e0       	ldi	r24, 0x03	; 3
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	67 e0       	ldi	r22, 0x07	; 7
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a12:	c8 01       	movw	r24, r16
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <CLCD_voidInit+0x1e2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	67 e0       	ldi	r22, 0x07	; 7
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a22:	c8 01       	movw	r24, r16
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <CLCD_voidInit+0x1f2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2a28:	83 e0       	ldi	r24, 0x03	; 3
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	67 e0       	ldi	r22, 0x07	; 7
    2a34:	41 e0       	ldi	r20, 0x01	; 1
    2a36:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <CLCD_voidInit+0x20a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	67 e0       	ldi	r22, 0x07	; 7
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a4a:	c8 01       	movw	r24, r16
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <CLCD_voidInit+0x21a>
    2a50:	c8 01       	movw	r24, r16
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <CLCD_voidInit+0x220>
    2a56:	80 e2       	ldi	r24, 0x20	; 32
    2a58:	9e e4       	ldi	r25, 0x4E	; 78
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <CLCD_voidInit+0x228>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	65 e0       	ldi	r22, 0x05	; 5
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	66 e0       	ldi	r22, 0x06	; 6
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	60 e0       	ldi	r22, 0x00	; 0
    2a76:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	67 e0       	ldi	r22, 0x07	; 7
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a84:	c8 01       	movw	r24, r16
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <CLCD_voidInit+0x254>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	67 e0       	ldi	r22, 0x07	; 7
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2a94:	c8 01       	movw	r24, r16
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <CLCD_voidInit+0x264>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2a9a:	83 e0       	ldi	r24, 0x03	; 3
    2a9c:	66 e0       	ldi	r22, 0x06	; 6
    2a9e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	67 e0       	ldi	r22, 0x07	; 7
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2aac:	c8 01       	movw	r24, r16
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <CLCD_voidInit+0x27c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	67 e0       	ldi	r22, 0x07	; 7
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2abc:	c8 01       	movw	r24, r16
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <CLCD_voidInit+0x28c>
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <CLCD_voidInit+0x292>
    2ac8:	c8 01       	movw	r24, r16
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <CLCD_voidInit+0x298>
	#endif




}
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    2ad4:	2f 92       	push	r2
    2ad6:	3f 92       	push	r3
    2ad8:	4f 92       	push	r4
    2ada:	5f 92       	push	r5
    2adc:	6f 92       	push	r6
    2ade:	7f 92       	push	r7
    2ae0:	8f 92       	push	r8
    2ae2:	9f 92       	push	r9
    2ae4:	af 92       	push	r10
    2ae6:	bf 92       	push	r11
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	2a 97       	sbiw	r28, 0x0a	; 10
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	2b 83       	std	Y+3, r18	; 0x03
    2b0a:	3c 83       	std	Y+4, r19	; 0x04
    2b0c:	4d 83       	std	Y+5, r20	; 0x05
    2b0e:	5e 83       	std	Y+6, r21	; 0x06
    2b10:	6f 83       	std	Y+7, r22	; 0x07
    2b12:	78 87       	std	Y+8, r23	; 0x08
    2b14:	89 87       	std	Y+9, r24	; 0x09
    2b16:	9a 87       	std	Y+10, r25	; 0x0a

	u64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    2b18:	82 2f       	mov	r24, r18
    2b1a:	83 2b       	or	r24, r19
    2b1c:	84 2b       	or	r24, r20
    2b1e:	85 2b       	or	r24, r21
    2b20:	86 2b       	or	r24, r22
    2b22:	87 2b       	or	r24, r23
    2b24:	49 85       	ldd	r20, Y+9	; 0x09
    2b26:	84 2b       	or	r24, r20
    2b28:	89 2b       	or	r24, r25
    2b2a:	09 f4       	brne	.+2      	; 0x2b2e <CLCD_voidSendNumber+0x5a>
    2b2c:	86 c1       	rjmp	.+780    	; 0x2e3a <CLCD_voidSendNumber+0x366>
    2b2e:	99 24       	eor	r9, r9
    2b30:	93 94       	inc	r9
    2b32:	88 24       	eor	r8, r8
    2b34:	55 24       	eor	r5, r5
    2b36:	22 24       	eor	r2, r2
    2b38:	33 24       	eor	r3, r3
    2b3a:	44 24       	eor	r4, r4
    2b3c:	66 24       	eor	r6, r6
    2b3e:	77 24       	eor	r7, r7

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    2b40:	29 2d       	mov	r18, r9
    2b42:	38 2d       	mov	r19, r8
    2b44:	45 2d       	mov	r20, r5
    2b46:	52 2d       	mov	r21, r2
    2b48:	63 2d       	mov	r22, r3
    2b4a:	74 2d       	mov	r23, r4
    2b4c:	c3 01       	movw	r24, r6
    2b4e:	01 e0       	ldi	r16, 0x01	; 1
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2b54:	12 2f       	mov	r17, r18
    2b56:	f3 2e       	mov	r15, r19
    2b58:	e4 2e       	mov	r14, r20
    2b5a:	d5 2e       	mov	r13, r21
    2b5c:	c6 2e       	mov	r12, r22
    2b5e:	b7 2e       	mov	r11, r23
    2b60:	a8 2e       	mov	r10, r24
    2b62:	79 2e       	mov	r7, r25
    2b64:	02 e0       	ldi	r16, 0x02	; 2
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    2b6a:	82 2e       	mov	r8, r18
    2b6c:	81 0e       	add	r8, r17
    2b6e:	e1 e0       	ldi	r30, 0x01	; 1
    2b70:	81 16       	cp	r8, r17
    2b72:	08 f0       	brcs	.+2      	; 0x2b76 <CLCD_voidSendNumber+0xa2>
    2b74:	e0 e0       	ldi	r30, 0x00	; 0
    2b76:	3f 0d       	add	r19, r15
    2b78:	21 e0       	ldi	r18, 0x01	; 1
    2b7a:	3f 15       	cp	r19, r15
    2b7c:	08 f0       	brcs	.+2      	; 0x2b80 <CLCD_voidSendNumber+0xac>
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	6e 2e       	mov	r6, r30
    2b82:	63 0e       	add	r6, r19
    2b84:	e1 e0       	ldi	r30, 0x01	; 1
    2b86:	63 16       	cp	r6, r19
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <CLCD_voidSendNumber+0xb8>
    2b8a:	e0 e0       	ldi	r30, 0x00	; 0
    2b8c:	2e 2b       	or	r18, r30
    2b8e:	4e 0d       	add	r20, r14
    2b90:	31 e0       	ldi	r19, 0x01	; 1
    2b92:	4e 15       	cp	r20, r14
    2b94:	08 f0       	brcs	.+2      	; 0x2b98 <CLCD_voidSendNumber+0xc4>
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	52 2e       	mov	r5, r18
    2b9a:	54 0e       	add	r5, r20
    2b9c:	21 e0       	ldi	r18, 0x01	; 1
    2b9e:	54 16       	cp	r5, r20
    2ba0:	08 f0       	brcs	.+2      	; 0x2ba4 <CLCD_voidSendNumber+0xd0>
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	32 2b       	or	r19, r18
    2ba6:	5d 0d       	add	r21, r13
    2ba8:	21 e0       	ldi	r18, 0x01	; 1
    2baa:	5d 15       	cp	r21, r13
    2bac:	08 f0       	brcs	.+2      	; 0x2bb0 <CLCD_voidSendNumber+0xdc>
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	43 2e       	mov	r4, r19
    2bb2:	45 0e       	add	r4, r21
    2bb4:	31 e0       	ldi	r19, 0x01	; 1
    2bb6:	45 16       	cp	r4, r21
    2bb8:	08 f0       	brcs	.+2      	; 0x2bbc <CLCD_voidSendNumber+0xe8>
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	23 2b       	or	r18, r19
    2bbe:	6c 0d       	add	r22, r12
    2bc0:	31 e0       	ldi	r19, 0x01	; 1
    2bc2:	6c 15       	cp	r22, r12
    2bc4:	08 f0       	brcs	.+2      	; 0x2bc8 <CLCD_voidSendNumber+0xf4>
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	32 2e       	mov	r3, r18
    2bca:	36 0e       	add	r3, r22
    2bcc:	21 e0       	ldi	r18, 0x01	; 1
    2bce:	36 16       	cp	r3, r22
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <CLCD_voidSendNumber+0x100>
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	32 2b       	or	r19, r18
    2bd6:	7b 0d       	add	r23, r11
    2bd8:	21 e0       	ldi	r18, 0x01	; 1
    2bda:	7b 15       	cp	r23, r11
    2bdc:	08 f0       	brcs	.+2      	; 0x2be0 <CLCD_voidSendNumber+0x10c>
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	23 2e       	mov	r2, r19
    2be2:	27 0e       	add	r2, r23
    2be4:	31 e0       	ldi	r19, 0x01	; 1
    2be6:	27 16       	cp	r2, r23
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <CLCD_voidSendNumber+0x118>
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	23 2b       	or	r18, r19
    2bee:	8a 0d       	add	r24, r10
    2bf0:	31 e0       	ldi	r19, 0x01	; 1
    2bf2:	8a 15       	cp	r24, r10
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <CLCD_voidSendNumber+0x124>
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	28 0f       	add	r18, r24
    2bfa:	29 83       	std	Y+1, r18	; 0x01
    2bfc:	21 e0       	ldi	r18, 0x01	; 1
    2bfe:	a9 81       	ldd	r26, Y+1	; 0x01
    2c00:	a8 17       	cp	r26, r24
    2c02:	08 f0       	brcs	.+2      	; 0x2c06 <CLCD_voidSendNumber+0x132>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	93 2e       	mov	r9, r19
    2c08:	92 2a       	or	r9, r18
    2c0a:	97 0d       	add	r25, r7
    2c0c:	99 0e       	add	r9, r25
    2c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c10:	3c 81       	ldd	r19, Y+4	; 0x04
    2c12:	4d 81       	ldd	r20, Y+5	; 0x05
    2c14:	5e 81       	ldd	r21, Y+6	; 0x06
    2c16:	6f 81       	ldd	r22, Y+7	; 0x07
    2c18:	78 85       	ldd	r23, Y+8	; 0x08
    2c1a:	89 85       	ldd	r24, Y+9	; 0x09
    2c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1e:	aa e0       	ldi	r26, 0x0A	; 10
    2c20:	aa 2e       	mov	r10, r26
    2c22:	bb 24       	eor	r11, r11
    2c24:	cc 24       	eor	r12, r12
    2c26:	dd 24       	eor	r13, r13
    2c28:	ee 24       	eor	r14, r14
    2c2a:	ff 24       	eor	r15, r15
    2c2c:	00 e0       	ldi	r16, 0x00	; 0
    2c2e:	10 e0       	ldi	r17, 0x00	; 0
    2c30:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    2c34:	12 2f       	mov	r17, r18
    2c36:	18 0d       	add	r17, r8
    2c38:	f1 e0       	ldi	r31, 0x01	; 1
    2c3a:	12 17       	cp	r17, r18
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <CLCD_voidSendNumber+0x16c>
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	23 2f       	mov	r18, r19
    2c42:	26 0d       	add	r18, r6
    2c44:	e1 e0       	ldi	r30, 0x01	; 1
    2c46:	23 17       	cp	r18, r19
    2c48:	08 f0       	brcs	.+2      	; 0x2c4c <CLCD_voidSendNumber+0x178>
    2c4a:	e0 e0       	ldi	r30, 0x00	; 0
    2c4c:	0f 2f       	mov	r16, r31
    2c4e:	02 0f       	add	r16, r18
    2c50:	31 e0       	ldi	r19, 0x01	; 1
    2c52:	02 17       	cp	r16, r18
    2c54:	08 f0       	brcs	.+2      	; 0x2c58 <CLCD_voidSendNumber+0x184>
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	e3 2b       	or	r30, r19
    2c5a:	24 2f       	mov	r18, r20
    2c5c:	25 0d       	add	r18, r5
    2c5e:	31 e0       	ldi	r19, 0x01	; 1
    2c60:	24 17       	cp	r18, r20
    2c62:	08 f0       	brcs	.+2      	; 0x2c66 <CLCD_voidSendNumber+0x192>
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	fe 2f       	mov	r31, r30
    2c68:	f2 0f       	add	r31, r18
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	f2 17       	cp	r31, r18
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <CLCD_voidSendNumber+0x19e>
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	34 2b       	or	r19, r20
    2c74:	25 2f       	mov	r18, r21
    2c76:	24 0d       	add	r18, r4
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	25 17       	cp	r18, r21
    2c7c:	08 f0       	brcs	.+2      	; 0x2c80 <CLCD_voidSendNumber+0x1ac>
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	e3 2f       	mov	r30, r19
    2c82:	e2 0f       	add	r30, r18
    2c84:	31 e0       	ldi	r19, 0x01	; 1
    2c86:	e2 17       	cp	r30, r18
    2c88:	08 f0       	brcs	.+2      	; 0x2c8c <CLCD_voidSendNumber+0x1b8>
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	43 2b       	or	r20, r19
    2c8e:	26 2f       	mov	r18, r22
    2c90:	23 0d       	add	r18, r3
    2c92:	31 e0       	ldi	r19, 0x01	; 1
    2c94:	26 17       	cp	r18, r22
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <CLCD_voidSendNumber+0x1c6>
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	64 2f       	mov	r22, r20
    2c9c:	62 0f       	add	r22, r18
    2c9e:	41 e0       	ldi	r20, 0x01	; 1
    2ca0:	62 17       	cp	r22, r18
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <CLCD_voidSendNumber+0x1d2>
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	34 2b       	or	r19, r20
    2ca8:	27 2f       	mov	r18, r23
    2caa:	22 0d       	add	r18, r2
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	27 17       	cp	r18, r23
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <CLCD_voidSendNumber+0x1e0>
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	53 2f       	mov	r21, r19
    2cb6:	52 0f       	add	r21, r18
    2cb8:	31 e0       	ldi	r19, 0x01	; 1
    2cba:	52 17       	cp	r21, r18
    2cbc:	08 f0       	brcs	.+2      	; 0x2cc0 <CLCD_voidSendNumber+0x1ec>
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	43 2b       	or	r20, r19
    2cc2:	29 81       	ldd	r18, Y+1	; 0x01
    2cc4:	28 0f       	add	r18, r24
    2cc6:	31 e0       	ldi	r19, 0x01	; 1
    2cc8:	28 17       	cp	r18, r24
    2cca:	08 f0       	brcs	.+2      	; 0x2cce <CLCD_voidSendNumber+0x1fa>
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	42 0f       	add	r20, r18
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	42 17       	cp	r20, r18
    2cd4:	08 f0       	brcs	.+2      	; 0x2cd8 <CLCD_voidSendNumber+0x204>
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	38 2b       	or	r19, r24
    2cda:	99 0e       	add	r9, r25
    2cdc:	b3 2f       	mov	r27, r19
    2cde:	b9 0d       	add	r27, r9
    2ce0:	ba 83       	std	Y+2, r27	; 0x02
    2ce2:	48 01       	movw	r8, r16
    2ce4:	5f 2e       	mov	r5, r31
    2ce6:	2e 2e       	mov	r2, r30
    2ce8:	36 2e       	mov	r3, r22
    2cea:	45 2e       	mov	r4, r21
    2cec:	64 2e       	mov	r6, r20
    2cee:	7b 2e       	mov	r7, r27
			Copy_u64Number /= 10 ;
    2cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf4:	4d 81       	ldd	r20, Y+5	; 0x05
    2cf6:	5e 81       	ldd	r21, Y+6	; 0x06
    2cf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfa:	78 85       	ldd	r23, Y+8	; 0x08
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	fa e0       	ldi	r31, 0x0A	; 10
    2d02:	af 2e       	mov	r10, r31
    2d04:	bb 24       	eor	r11, r11
    2d06:	cc 24       	eor	r12, r12
    2d08:	dd 24       	eor	r13, r13
    2d0a:	ee 24       	eor	r14, r14
    2d0c:	ff 24       	eor	r15, r15
    2d0e:	00 e0       	ldi	r16, 0x00	; 0
    2d10:	10 e0       	ldi	r17, 0x00	; 0
    2d12:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    2d16:	2b 83       	std	Y+3, r18	; 0x03
    2d18:	3c 83       	std	Y+4, r19	; 0x04
    2d1a:	4d 83       	std	Y+5, r20	; 0x05
    2d1c:	5e 83       	std	Y+6, r21	; 0x06
    2d1e:	6f 83       	std	Y+7, r22	; 0x07
    2d20:	78 87       	std	Y+8, r23	; 0x08
    2d22:	89 87       	std	Y+9, r24	; 0x09
    2d24:	9a 87       	std	Y+10, r25	; 0x0a

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    2d26:	82 2f       	mov	r24, r18
    2d28:	83 2b       	or	r24, r19
    2d2a:	84 2b       	or	r24, r20
    2d2c:	85 2b       	or	r24, r21
    2d2e:	86 2b       	or	r24, r22
    2d30:	87 2b       	or	r24, r23
    2d32:	e9 85       	ldd	r30, Y+9	; 0x09
    2d34:	8e 2b       	or	r24, r30
    2d36:	89 2b       	or	r24, r25
    2d38:	09 f0       	breq	.+2      	; 0x2d3c <CLCD_voidSendNumber+0x268>
    2d3a:	02 cf       	rjmp	.-508    	; 0x2b40 <CLCD_voidSendNumber+0x6c>

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    2d3c:	f1 e0       	ldi	r31, 0x01	; 1
    2d3e:	9f 16       	cp	r9, r31
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2d42:	cb c0       	rjmp	.+406    	; 0x2eda <CLCD_voidSendNumber+0x406>

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    2d44:	29 2d       	mov	r18, r9
    2d46:	38 2d       	mov	r19, r8
    2d48:	45 2d       	mov	r20, r5
    2d4a:	52 2d       	mov	r21, r2
    2d4c:	63 2d       	mov	r22, r3
    2d4e:	74 2d       	mov	r23, r4
    2d50:	c3 01       	movw	r24, r6
    2d52:	ea e0       	ldi	r30, 0x0A	; 10
    2d54:	ae 2e       	mov	r10, r30
    2d56:	bb 24       	eor	r11, r11
    2d58:	cc 24       	eor	r12, r12
    2d5a:	dd 24       	eor	r13, r13
    2d5c:	ee 24       	eor	r14, r14
    2d5e:	ff 24       	eor	r15, r15
    2d60:	00 e0       	ldi	r16, 0x00	; 0
    2d62:	10 e0       	ldi	r17, 0x00	; 0
    2d64:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    2d68:	12 2f       	mov	r17, r18
    2d6a:	10 5d       	subi	r17, 0xD0	; 208
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	65 e0       	ldi	r22, 0x05	; 5
    2d70:	41 e0       	ldi	r20, 0x01	; 1
    2d72:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	66 e0       	ldi	r22, 0x06	; 6
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2d80:	61 2f       	mov	r22, r17
    2d82:	62 95       	swap	r22
    2d84:	6f 70       	andi	r22, 0x0F	; 15
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	67 e0       	ldi	r22, 0x07	; 7
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2d96:	80 ed       	ldi	r24, 0xD0	; 208
    2d98:	97 e0       	ldi	r25, 0x07	; 7
    2d9a:	01 97       	sbiw	r24, 0x01	; 1
    2d9c:	f1 f7       	brne	.-4      	; 0x2d9a <CLCD_voidSendNumber+0x2c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	67 e0       	ldi	r22, 0x07	; 7
    2da2:	40 e0       	ldi	r20, 0x00	; 0
    2da4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2da8:	80 ed       	ldi	r24, 0xD0	; 208
    2daa:	97 e0       	ldi	r25, 0x07	; 7
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <CLCD_voidSendNumber+0x2d8>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2db0:	83 e0       	ldi	r24, 0x03	; 3
    2db2:	61 2f       	mov	r22, r17
    2db4:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	67 e0       	ldi	r22, 0x07	; 7
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2dc2:	80 ed       	ldi	r24, 0xD0	; 208
    2dc4:	97 e0       	ldi	r25, 0x07	; 7
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <CLCD_voidSendNumber+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	67 e0       	ldi	r22, 0x07	; 7
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2dd4:	80 ed       	ldi	r24, 0xD0	; 208
    2dd6:	97 e0       	ldi	r25, 0x07	; 7
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	f1 f7       	brne	.-4      	; 0x2dd8 <CLCD_voidSendNumber+0x304>
    2ddc:	80 ed       	ldi	r24, 0xD0	; 208
    2dde:	97 e0       	ldi	r25, 0x07	; 7
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <CLCD_voidSendNumber+0x30c>

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
			LOC_u64Reversed /= 10 ;
    2de4:	29 2d       	mov	r18, r9
    2de6:	38 2d       	mov	r19, r8
    2de8:	45 2d       	mov	r20, r5
    2dea:	52 2d       	mov	r21, r2
    2dec:	63 2d       	mov	r22, r3
    2dee:	74 2d       	mov	r23, r4
    2df0:	c3 01       	movw	r24, r6
    2df2:	10 e0       	ldi	r17, 0x00	; 0
    2df4:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    2df8:	92 2e       	mov	r9, r18
    2dfa:	83 2e       	mov	r8, r19
    2dfc:	54 2e       	mov	r5, r20
    2dfe:	25 2e       	mov	r2, r21
    2e00:	36 2e       	mov	r3, r22
    2e02:	47 2e       	mov	r4, r23
    2e04:	3c 01       	movw	r6, r24

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    2e06:	41 e0       	ldi	r20, 0x01	; 1
    2e08:	94 16       	cp	r9, r20
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <CLCD_voidSendNumber+0x33a>
    2e0c:	9b cf       	rjmp	.-202    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e0e:	88 20       	and	r8, r8
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <CLCD_voidSendNumber+0x340>
    2e12:	98 cf       	rjmp	.-208    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e14:	55 20       	and	r5, r5
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <CLCD_voidSendNumber+0x346>
    2e18:	95 cf       	rjmp	.-214    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e1a:	22 20       	and	r2, r2
    2e1c:	09 f0       	breq	.+2      	; 0x2e20 <CLCD_voidSendNumber+0x34c>
    2e1e:	92 cf       	rjmp	.-220    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e20:	33 20       	and	r3, r3
    2e22:	09 f0       	breq	.+2      	; 0x2e26 <CLCD_voidSendNumber+0x352>
    2e24:	8f cf       	rjmp	.-226    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e26:	44 20       	and	r4, r4
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <CLCD_voidSendNumber+0x358>
    2e2a:	8c cf       	rjmp	.-232    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e2c:	66 20       	and	r6, r6
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <CLCD_voidSendNumber+0x35e>
    2e30:	89 cf       	rjmp	.-238    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e32:	99 23       	and	r25, r25
    2e34:	09 f0       	breq	.+2      	; 0x2e38 <CLCD_voidSendNumber+0x364>
    2e36:	86 cf       	rjmp	.-244    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2e38:	37 c0       	rjmp	.+110    	; 0x2ea8 <CLCD_voidSendNumber+0x3d4>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	65 e0       	ldi	r22, 0x05	; 5
    2e3e:	41 e0       	ldi	r20, 0x01	; 1
    2e40:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	66 e0       	ldi	r22, 0x06	; 6
    2e48:	40 e0       	ldi	r20, 0x00	; 0
    2e4a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	63 e0       	ldi	r22, 0x03	; 3
    2e52:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	67 e0       	ldi	r22, 0x07	; 7
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2e60:	00 ed       	ldi	r16, 0xD0	; 208
    2e62:	17 e0       	ldi	r17, 0x07	; 7
    2e64:	c8 01       	movw	r24, r16
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <CLCD_voidSendNumber+0x392>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	67 e0       	ldi	r22, 0x07	; 7
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2e74:	c8 01       	movw	r24, r16
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <CLCD_voidSendNumber+0x3a2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	60 e3       	ldi	r22, 0x30	; 48
    2e7e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	67 e0       	ldi	r22, 0x07	; 7
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2e8c:	c8 01       	movw	r24, r16
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	f1 f7       	brne	.-4      	; 0x2e8e <CLCD_voidSendNumber+0x3ba>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	67 e0       	ldi	r22, 0x07	; 7
    2e96:	40 e0       	ldi	r20, 0x00	; 0
    2e98:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2e9c:	c8 01       	movw	r24, r16
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <CLCD_voidSendNumber+0x3ca>
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <CLCD_voidSendNumber+0x3d0>

		}

	}

}
    2ea8:	2a 96       	adiw	r28, 0x0a	; 10
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	cf 91       	pop	r28
    2eb6:	df 91       	pop	r29
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	df 90       	pop	r13
    2ec2:	cf 90       	pop	r12
    2ec4:	bf 90       	pop	r11
    2ec6:	af 90       	pop	r10
    2ec8:	9f 90       	pop	r9
    2eca:	8f 90       	pop	r8
    2ecc:	7f 90       	pop	r7
    2ece:	6f 90       	pop	r6
    2ed0:	5f 90       	pop	r5
    2ed2:	4f 90       	pop	r4
    2ed4:	3f 90       	pop	r3
    2ed6:	2f 90       	pop	r2
    2ed8:	08 95       	ret

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    2eda:	88 20       	and	r8, r8
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <CLCD_voidSendNumber+0x40c>
    2ede:	32 cf       	rjmp	.-412    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2ee0:	55 20       	and	r5, r5
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <CLCD_voidSendNumber+0x412>
    2ee4:	2f cf       	rjmp	.-418    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2ee6:	22 20       	and	r2, r2
    2ee8:	09 f0       	breq	.+2      	; 0x2eec <CLCD_voidSendNumber+0x418>
    2eea:	2c cf       	rjmp	.-424    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2eec:	33 20       	and	r3, r3
    2eee:	09 f0       	breq	.+2      	; 0x2ef2 <CLCD_voidSendNumber+0x41e>
    2ef0:	29 cf       	rjmp	.-430    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2ef2:	44 20       	and	r4, r4
    2ef4:	09 f0       	breq	.+2      	; 0x2ef8 <CLCD_voidSendNumber+0x424>
    2ef6:	26 cf       	rjmp	.-436    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2ef8:	66 20       	and	r6, r6
    2efa:	09 f0       	breq	.+2      	; 0x2efe <CLCD_voidSendNumber+0x42a>
    2efc:	23 cf       	rjmp	.-442    	; 0x2d44 <CLCD_voidSendNumber+0x270>
    2efe:	77 20       	and	r7, r7
    2f00:	99 f2       	breq	.-90     	; 0x2ea8 <CLCD_voidSendNumber+0x3d4>
    2f02:	20 cf       	rjmp	.-448    	; 0x2d44 <CLCD_voidSendNumber+0x270>

00002f04 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	cf 93       	push	r28
    2f12:	df 93       	push	r29
    2f14:	d8 2e       	mov	r13, r24
    2f16:	c6 2e       	mov	r12, r22
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	65 e0       	ldi	r22, 0x05	; 5
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	66 e0       	ldi	r22, 0x06	; 6
    2f26:	40 e0       	ldi	r20, 0x00	; 0
    2f28:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	64 e0       	ldi	r22, 0x04	; 4
    2f30:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	67 e0       	ldi	r22, 0x07	; 7
    2f38:	41 e0       	ldi	r20, 0x01	; 1
    2f3a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2f3e:	00 ed       	ldi	r16, 0xD0	; 208
    2f40:	17 e0       	ldi	r17, 0x07	; 7
    2f42:	c8 01       	movw	r24, r16
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <CLCD_voidSendExtraChar+0x40>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	67 e0       	ldi	r22, 0x07	; 7
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2f52:	c8 01       	movw	r24, r16
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <CLCD_voidSendExtraChar+0x50>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2f58:	83 e0       	ldi	r24, 0x03	; 3
    2f5a:	60 e4       	ldi	r22, 0x40	; 64
    2f5c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	67 e0       	ldi	r22, 0x07	; 7
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2f6a:	c8 01       	movw	r24, r16
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <CLCD_voidSendExtraChar+0x68>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	67 e0       	ldi	r22, 0x07	; 7
    2f74:	40 e0       	ldi	r20, 0x00	; 0
    2f76:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2f7a:	c8 01       	movw	r24, r16
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <CLCD_voidSendExtraChar+0x78>
    2f80:	c8 01       	movw	r24, r16
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <CLCD_voidSendExtraChar+0x7e>
    2f86:	ce e1       	ldi	r28, 0x1E	; 30
    2f88:	d2 e0       	ldi	r29, 0x02	; 2
    2f8a:	80 ed       	ldi	r24, 0xD0	; 208
    2f8c:	e8 2e       	mov	r14, r24
    2f8e:	87 e0       	ldi	r24, 0x07	; 7
    2f90:	f8 2e       	mov	r15, r24

	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    2f92:	19 91       	ld	r17, Y+
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	65 e0       	ldi	r22, 0x05	; 5
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	66 e0       	ldi	r22, 0x06	; 6
    2fa2:	40 e0       	ldi	r20, 0x00	; 0
    2fa4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2fa8:	61 2f       	mov	r22, r17
    2faa:	62 95       	swap	r22
    2fac:	6f 70       	andi	r22, 0x0F	; 15
    2fae:	83 e0       	ldi	r24, 0x03	; 3
    2fb0:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	67 e0       	ldi	r22, 0x07	; 7
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2fbe:	c7 01       	movw	r24, r14
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <CLCD_voidSendExtraChar+0xbc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	67 e0       	ldi	r22, 0x07	; 7
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2fce:	c7 01       	movw	r24, r14
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <CLCD_voidSendExtraChar+0xcc>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	61 2f       	mov	r22, r17
    2fd8:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	67 e0       	ldi	r22, 0x07	; 7
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <CLCD_voidSendExtraChar+0xe4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	67 e0       	ldi	r22, 0x07	; 7
    2ff0:	40 e0       	ldi	r20, 0x00	; 0
    2ff2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    2ff6:	c7 01       	movw	r24, r14
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	f1 f7       	brne	.-4      	; 0x2ff8 <CLCD_voidSendExtraChar+0xf4>
    2ffc:	c7 01       	movw	r24, r14
    2ffe:	01 97       	sbiw	r24, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <CLCD_voidSendExtraChar+0xfa>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	ce 35       	cpi	r28, 0x5E	; 94
    3006:	d8 07       	cpc	r29, r24
    3008:	09 f0       	breq	.+2      	; 0x300c <CLCD_voidSendExtraChar+0x108>
    300a:	c3 cf       	rjmp	.-122    	; 0x2f92 <CLCD_voidSendExtraChar+0x8e>
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    300c:	8d 2d       	mov	r24, r13
    300e:	81 50       	subi	r24, 0x01	; 1
    3010:	82 30       	cpi	r24, 0x02	; 2
    3012:	08 f4       	brcc	.+2      	; 0x3016 <CLCD_voidSendExtraChar+0x112>
    3014:	ee c1       	rjmp	.+988    	; 0x33f2 <CLCD_voidSendExtraChar+0x4ee>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    3016:	b0 e8       	ldi	r27, 0x80	; 128
    3018:	fb 2e       	mov	r15, r27
    301a:	18 e0       	ldi	r17, 0x08	; 8
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	65 e0       	ldi	r22, 0x05	; 5
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	66 e0       	ldi	r22, 0x06	; 6
    302a:	40 e0       	ldi	r20, 0x00	; 0
    302c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	61 2f       	mov	r22, r17
    3034:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	67 e0       	ldi	r22, 0x07	; 7
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3042:	00 ed       	ldi	r16, 0xD0	; 208
    3044:	17 e0       	ldi	r17, 0x07	; 7
    3046:	c8 01       	movw	r24, r16
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	f1 f7       	brne	.-4      	; 0x3048 <CLCD_voidSendExtraChar+0x144>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	67 e0       	ldi	r22, 0x07	; 7
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3056:	c8 01       	movw	r24, r16
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	f1 f7       	brne	.-4      	; 0x3058 <CLCD_voidSendExtraChar+0x154>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	6f 2d       	mov	r22, r15
    3060:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	67 e0       	ldi	r22, 0x07	; 7
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    306e:	c8 01       	movw	r24, r16
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <CLCD_voidSendExtraChar+0x16c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	67 e0       	ldi	r22, 0x07	; 7
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    307e:	c8 01       	movw	r24, r16
    3080:	01 97       	sbiw	r24, 0x01	; 1
    3082:	f1 f7       	brne	.-4      	; 0x3080 <CLCD_voidSendExtraChar+0x17c>
    3084:	c8 01       	movw	r24, r16
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <CLCD_voidSendExtraChar+0x182>
    308a:	c8 01       	movw	r24, r16
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <CLCD_voidSendExtraChar+0x188>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	65 e0       	ldi	r22, 0x05	; 5
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	66 e0       	ldi	r22, 0x06	; 6
    309e:	40 e0       	ldi	r20, 0x00	; 0
    30a0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	60 e0       	ldi	r22, 0x00	; 0
    30a8:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	67 e0       	ldi	r22, 0x07	; 7
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    30b6:	c8 01       	movw	r24, r16
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <CLCD_voidSendExtraChar+0x1b4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	67 e0       	ldi	r22, 0x07	; 7
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    30c6:	c8 01       	movw	r24, r16
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <CLCD_voidSendExtraChar+0x1c4>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    30cc:	83 e0       	ldi	r24, 0x03	; 3
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	67 e0       	ldi	r22, 0x07	; 7
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    30de:	c8 01       	movw	r24, r16
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	f1 f7       	brne	.-4      	; 0x30e0 <CLCD_voidSendExtraChar+0x1dc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	67 e0       	ldi	r22, 0x07	; 7
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    30ee:	c8 01       	movw	r24, r16
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <CLCD_voidSendExtraChar+0x1ec>
    30f4:	c8 01       	movw	r24, r16
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <CLCD_voidSendExtraChar+0x1f2>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	65 e0       	ldi	r22, 0x05	; 5
    30fe:	41 e0       	ldi	r20, 0x01	; 1
    3100:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	66 e0       	ldi	r22, 0x06	; 6
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    310e:	83 e0       	ldi	r24, 0x03	; 3
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	67 e0       	ldi	r22, 0x07	; 7
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3120:	c8 01       	movw	r24, r16
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <CLCD_voidSendExtraChar+0x21e>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	67 e0       	ldi	r22, 0x07	; 7
    312a:	40 e0       	ldi	r20, 0x00	; 0
    312c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3130:	c8 01       	movw	r24, r16
    3132:	01 97       	sbiw	r24, 0x01	; 1
    3134:	f1 f7       	brne	.-4      	; 0x3132 <CLCD_voidSendExtraChar+0x22e>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3136:	83 e0       	ldi	r24, 0x03	; 3
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	67 e0       	ldi	r22, 0x07	; 7
    3142:	41 e0       	ldi	r20, 0x01	; 1
    3144:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3148:	c8 01       	movw	r24, r16
    314a:	01 97       	sbiw	r24, 0x01	; 1
    314c:	f1 f7       	brne	.-4      	; 0x314a <CLCD_voidSendExtraChar+0x246>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	67 e0       	ldi	r22, 0x07	; 7
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3158:	c8 01       	movw	r24, r16
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	f1 f7       	brne	.-4      	; 0x315a <CLCD_voidSendExtraChar+0x256>
    315e:	c8 01       	movw	r24, r16
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <CLCD_voidSendExtraChar+0x25c>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3164:	81 e0       	ldi	r24, 0x01	; 1
    3166:	65 e0       	ldi	r22, 0x05	; 5
    3168:	41 e0       	ldi	r20, 0x01	; 1
    316a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	66 e0       	ldi	r22, 0x06	; 6
    3172:	40 e0       	ldi	r20, 0x00	; 0
    3174:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3178:	83 e0       	ldi	r24, 0x03	; 3
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	67 e0       	ldi	r22, 0x07	; 7
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    318a:	c8 01       	movw	r24, r16
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <CLCD_voidSendExtraChar+0x288>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	67 e0       	ldi	r22, 0x07	; 7
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    319a:	c8 01       	movw	r24, r16
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <CLCD_voidSendExtraChar+0x298>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	62 e0       	ldi	r22, 0x02	; 2
    31a4:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	67 e0       	ldi	r22, 0x07	; 7
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    31b2:	c8 01       	movw	r24, r16
    31b4:	01 97       	sbiw	r24, 0x01	; 1
    31b6:	f1 f7       	brne	.-4      	; 0x31b4 <CLCD_voidSendExtraChar+0x2b0>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	67 e0       	ldi	r22, 0x07	; 7
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    31c2:	c8 01       	movw	r24, r16
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <CLCD_voidSendExtraChar+0x2c0>
    31c8:	c8 01       	movw	r24, r16
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <CLCD_voidSendExtraChar+0x2c6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	65 e0       	ldi	r22, 0x05	; 5
    31d2:	41 e0       	ldi	r20, 0x01	; 1
    31d4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	66 e0       	ldi	r22, 0x06	; 6
    31dc:	40 e0       	ldi	r20, 0x00	; 0
    31de:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	67 e0       	ldi	r22, 0x07	; 7
    31ee:	41 e0       	ldi	r20, 0x01	; 1
    31f0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    31f4:	c8 01       	movw	r24, r16
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <CLCD_voidSendExtraChar+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	67 e0       	ldi	r22, 0x07	; 7
    31fe:	40 e0       	ldi	r20, 0x00	; 0
    3200:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3204:	c8 01       	movw	r24, r16
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <CLCD_voidSendExtraChar+0x302>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    320a:	83 e0       	ldi	r24, 0x03	; 3
    320c:	63 e0       	ldi	r22, 0x03	; 3
    320e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	67 e0       	ldi	r22, 0x07	; 7
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    321c:	c8 01       	movw	r24, r16
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <CLCD_voidSendExtraChar+0x31a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	67 e0       	ldi	r22, 0x07	; 7
    3226:	40 e0       	ldi	r20, 0x00	; 0
    3228:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    322c:	c8 01       	movw	r24, r16
    322e:	01 97       	sbiw	r24, 0x01	; 1
    3230:	f1 f7       	brne	.-4      	; 0x322e <CLCD_voidSendExtraChar+0x32a>
    3232:	c8 01       	movw	r24, r16
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <CLCD_voidSendExtraChar+0x330>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	65 e0       	ldi	r22, 0x05	; 5
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3242:	81 e0       	ldi	r24, 0x01	; 1
    3244:	66 e0       	ldi	r22, 0x06	; 6
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	67 e0       	ldi	r22, 0x07	; 7
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    325e:	c8 01       	movw	r24, r16
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <CLCD_voidSendExtraChar+0x35c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	67 e0       	ldi	r22, 0x07	; 7
    3268:	40 e0       	ldi	r20, 0x00	; 0
    326a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    326e:	c8 01       	movw	r24, r16
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <CLCD_voidSendExtraChar+0x36c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3274:	83 e0       	ldi	r24, 0x03	; 3
    3276:	64 e0       	ldi	r22, 0x04	; 4
    3278:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	67 e0       	ldi	r22, 0x07	; 7
    3280:	41 e0       	ldi	r20, 0x01	; 1
    3282:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3286:	c8 01       	movw	r24, r16
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <CLCD_voidSendExtraChar+0x384>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	67 e0       	ldi	r22, 0x07	; 7
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3296:	c8 01       	movw	r24, r16
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	f1 f7       	brne	.-4      	; 0x3298 <CLCD_voidSendExtraChar+0x394>
    329c:	c8 01       	movw	r24, r16
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <CLCD_voidSendExtraChar+0x39a>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	65 e0       	ldi	r22, 0x05	; 5
    32a6:	41 e0       	ldi	r20, 0x01	; 1
    32a8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	66 e0       	ldi	r22, 0x06	; 6
    32b0:	40 e0       	ldi	r20, 0x00	; 0
    32b2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    32b6:	83 e0       	ldi	r24, 0x03	; 3
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	67 e0       	ldi	r22, 0x07	; 7
    32c2:	41 e0       	ldi	r20, 0x01	; 1
    32c4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    32c8:	c8 01       	movw	r24, r16
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <CLCD_voidSendExtraChar+0x3c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	67 e0       	ldi	r22, 0x07	; 7
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    32d8:	c8 01       	movw	r24, r16
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <CLCD_voidSendExtraChar+0x3d6>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    32de:	83 e0       	ldi	r24, 0x03	; 3
    32e0:	65 e0       	ldi	r22, 0x05	; 5
    32e2:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	67 e0       	ldi	r22, 0x07	; 7
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    32f0:	c8 01       	movw	r24, r16
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	f1 f7       	brne	.-4      	; 0x32f2 <CLCD_voidSendExtraChar+0x3ee>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	67 e0       	ldi	r22, 0x07	; 7
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3300:	c8 01       	movw	r24, r16
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <CLCD_voidSendExtraChar+0x3fe>
    3306:	c8 01       	movw	r24, r16
    3308:	01 97       	sbiw	r24, 0x01	; 1
    330a:	f1 f7       	brne	.-4      	; 0x3308 <CLCD_voidSendExtraChar+0x404>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	65 e0       	ldi	r22, 0x05	; 5
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	66 e0       	ldi	r22, 0x06	; 6
    331a:	40 e0       	ldi	r20, 0x00	; 0
    331c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3320:	83 e0       	ldi	r24, 0x03	; 3
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	67 e0       	ldi	r22, 0x07	; 7
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3332:	c8 01       	movw	r24, r16
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	f1 f7       	brne	.-4      	; 0x3334 <CLCD_voidSendExtraChar+0x430>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3338:	81 e0       	ldi	r24, 0x01	; 1
    333a:	67 e0       	ldi	r22, 0x07	; 7
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    3342:	c8 01       	movw	r24, r16
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <CLCD_voidSendExtraChar+0x440>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3348:	83 e0       	ldi	r24, 0x03	; 3
    334a:	66 e0       	ldi	r22, 0x06	; 6
    334c:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	67 e0       	ldi	r22, 0x07	; 7
    3354:	41 e0       	ldi	r20, 0x01	; 1
    3356:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    335a:	c8 01       	movw	r24, r16
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <CLCD_voidSendExtraChar+0x458>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	67 e0       	ldi	r22, 0x07	; 7
    3364:	40 e0       	ldi	r20, 0x00	; 0
    3366:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    336a:	c8 01       	movw	r24, r16
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <CLCD_voidSendExtraChar+0x468>
    3370:	c8 01       	movw	r24, r16
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <CLCD_voidSendExtraChar+0x46e>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	65 e0       	ldi	r22, 0x05	; 5
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	66 e0       	ldi	r22, 0x06	; 6
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    338a:	83 e0       	ldi	r24, 0x03	; 3
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	67 e0       	ldi	r22, 0x07	; 7
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    339c:	c8 01       	movw	r24, r16
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <CLCD_voidSendExtraChar+0x49a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	67 e0       	ldi	r22, 0x07	; 7
    33a6:	40 e0       	ldi	r20, 0x00	; 0
    33a8:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    33ac:	c8 01       	movw	r24, r16
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <CLCD_voidSendExtraChar+0x4aa>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	67 e0       	ldi	r22, 0x07	; 7
    33b6:	0e 94 4a 10 	call	0x2094	; 0x2094 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	67 e0       	ldi	r22, 0x07	; 7
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    33c4:	c8 01       	movw	r24, r16
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <CLCD_voidSendExtraChar+0x4c2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	67 e0       	ldi	r22, 0x07	; 7
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <DIO_enumSetPinValue>
    33d4:	c8 01       	movw	r24, r16
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <CLCD_voidSendExtraChar+0x4d2>
    33da:	c8 01       	movw	r24, r16
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <CLCD_voidSendExtraChar+0x4d8>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	ff 90       	pop	r15
    33ea:	ef 90       	pop	r14
    33ec:	df 90       	pop	r13
    33ee:	cf 90       	pop	r12
    33f0:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    33f2:	80 e1       	ldi	r24, 0x10	; 16
    33f4:	8c 15       	cp	r24, r12
    33f6:	08 f4       	brcc	.+2      	; 0x33fa <CLCD_voidSendExtraChar+0x4f6>
    33f8:	0e ce       	rjmp	.-996    	; 0x3016 <CLCD_voidSendExtraChar+0x112>
    33fa:	cc 20       	and	r12, r12
    33fc:	09 f4       	brne	.+2      	; 0x3400 <CLCD_voidSendExtraChar+0x4fc>
    33fe:	0b ce       	rjmp	.-1002   	; 0x3016 <CLCD_voidSendExtraChar+0x112>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	d8 16       	cp	r13, r24
    3404:	31 f0       	breq	.+12     	; 0x3412 <CLCD_voidSendExtraChar+0x50e>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	d8 16       	cp	r13, r24
    340a:	41 f0       	breq	.+16     	; 0x341c <CLCD_voidSendExtraChar+0x518>
    340c:	ff 24       	eor	r15, r15
    340e:	10 e0       	ldi	r17, 0x00	; 0
    3410:	05 ce       	rjmp	.-1014   	; 0x301c <CLCD_voidSendExtraChar+0x118>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    3412:	0f e7       	ldi	r16, 0x7F	; 127
    3414:	f0 2e       	mov	r15, r16
    3416:	fc 0c       	add	r15, r12
    3418:	18 e0       	ldi	r17, 0x08	; 8
    341a:	00 ce       	rjmp	.-1024   	; 0x301c <CLCD_voidSendExtraChar+0x118>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    341c:	1f eb       	ldi	r17, 0xBF	; 191
    341e:	f1 2e       	mov	r15, r17
    3420:	fc 0c       	add	r15, r12
    3422:	1c e0       	ldi	r17, 0x0C	; 12
    3424:	fb cd       	rjmp	.-1034   	; 0x301c <CLCD_voidSendExtraChar+0x118>

00003426 <APP_voidInitPW>:
/*********************    Helper Functions   ******************************/
/**************************************************************************/

static void APP_voidInitPW(void)
{
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	61 e0       	ldi	r22, 0x01	; 1
    342a:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendString((u8*)"Set P.W: ");
    342e:	80 e6       	ldi	r24, 0x60	; 96
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
	do
	{
		KPD_Return=KPD_u8GetPressed();
    3436:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    343a:	80 93 62 02 	sts	0x0262, r24
	} while (KPD_Return==NOTPRESSED);
    343e:	8f 3f       	cpi	r24, 0xFF	; 255
    3440:	d1 f3       	breq	.-12     	; 0x3436 <APP_voidInitPW+0x10>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_10);
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	6a e0       	ldi	r22, 0x0A	; 10
    3446:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendData(KPD_Return);
    344a:	80 91 62 02 	lds	r24, 0x0262
    344e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	48 ec       	ldi	r20, 0xC8	; 200
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	ca 01       	movw	r24, r20
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <APP_voidInitPW+0x36>
    3460:	2f 5f       	subi	r18, 0xFF	; 255
    3462:	3f 4f       	sbci	r19, 0xFF	; 255
    3464:	83 e1       	ldi	r24, 0x13	; 19
    3466:	28 38       	cpi	r18, 0x88	; 136
    3468:	38 07       	cpc	r19, r24
    346a:	b9 f7       	brne	.-18     	; 0x345a <APP_voidInitPW+0x34>
	_delay_ms(500);
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_10);
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	6a e0       	ldi	r22, 0x0A	; 10
    3470:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendData('*');
    3474:	8a e2       	ldi	r24, 0x2A	; 42
    3476:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	48 ec       	ldi	r20, 0xC8	; 200
    3480:	50 e0       	ldi	r21, 0x00	; 0
    3482:	ca 01       	movw	r24, r20
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <APP_voidInitPW+0x5e>
    3488:	2f 5f       	subi	r18, 0xFF	; 255
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	83 e1       	ldi	r24, 0x13	; 19
    348e:	28 38       	cpi	r18, 0x88	; 136
    3490:	38 07       	cpc	r19, r24
    3492:	b9 f7       	brne	.-18     	; 0x3482 <APP_voidInitPW+0x5c>
	_delay_ms(500);
	EEPROM_write(EEPROM_PASSWORD_LOCATION1,KPD_Return);
    3494:	81 e2       	ldi	r24, 0x21	; 33
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	60 91 62 02 	lds	r22, 0x0262
    349c:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <EEPROM_write>
	KPD_Return=NOTPRESSED;
    34a0:	8f ef       	ldi	r24, 0xFF	; 255
    34a2:	80 93 62 02 	sts	0x0262, r24

	do
	{
		KPD_Return=KPD_u8GetPressed();
    34a6:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    34aa:	80 93 62 02 	sts	0x0262, r24
	} while (KPD_Return==NOTPRESSED);
    34ae:	8f 3f       	cpi	r24, 0xFF	; 255
    34b0:	d1 f3       	breq	.-12     	; 0x34a6 <APP_voidInitPW+0x80>
	CLCD_voidSendData(KPD_Return);
    34b2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	48 ec       	ldi	r20, 0xC8	; 200
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	ca 01       	movw	r24, r20
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	f1 f7       	brne	.-4      	; 0x34c0 <APP_voidInitPW+0x9a>
    34c4:	2f 5f       	subi	r18, 0xFF	; 255
    34c6:	3f 4f       	sbci	r19, 0xFF	; 255
    34c8:	83 e1       	ldi	r24, 0x13	; 19
    34ca:	28 38       	cpi	r18, 0x88	; 136
    34cc:	38 07       	cpc	r19, r24
    34ce:	b9 f7       	brne	.-18     	; 0x34be <APP_voidInitPW+0x98>
	_delay_ms(500);
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_11);
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	6b e0       	ldi	r22, 0x0B	; 11
    34d4:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendData('*');
    34d8:	8a e2       	ldi	r24, 0x2A	; 42
    34da:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	48 ec       	ldi	r20, 0xC8	; 200
    34e4:	50 e0       	ldi	r21, 0x00	; 0
    34e6:	ca 01       	movw	r24, r20
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	f1 f7       	brne	.-4      	; 0x34e8 <APP_voidInitPW+0xc2>
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	83 e1       	ldi	r24, 0x13	; 19
    34f2:	28 38       	cpi	r18, 0x88	; 136
    34f4:	38 07       	cpc	r19, r24
    34f6:	b9 f7       	brne	.-18     	; 0x34e6 <APP_voidInitPW+0xc0>
	_delay_ms(500);
	EEPROM_write(EEPROM_PASSWORD_LOCATION2,KPD_Return);
    34f8:	82 e2       	ldi	r24, 0x22	; 34
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	60 91 62 02 	lds	r22, 0x0262
    3500:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <EEPROM_write>
	KPD_Return=NOTPRESSED;
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	80 93 62 02 	sts	0x0262, r24

	do
	{
		KPD_Return=KPD_u8GetPressed();
    350a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    350e:	80 93 62 02 	sts	0x0262, r24
	} while (KPD_Return==NOTPRESSED);
    3512:	8f 3f       	cpi	r24, 0xFF	; 255
    3514:	d1 f3       	breq	.-12     	; 0x350a <APP_voidInitPW+0xe4>
	CLCD_voidSendData(KPD_Return);
    3516:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	48 ec       	ldi	r20, 0xC8	; 200
    3520:	50 e0       	ldi	r21, 0x00	; 0
    3522:	ca 01       	movw	r24, r20
    3524:	01 97       	sbiw	r24, 0x01	; 1
    3526:	f1 f7       	brne	.-4      	; 0x3524 <APP_voidInitPW+0xfe>
    3528:	2f 5f       	subi	r18, 0xFF	; 255
    352a:	3f 4f       	sbci	r19, 0xFF	; 255
    352c:	83 e1       	ldi	r24, 0x13	; 19
    352e:	28 38       	cpi	r18, 0x88	; 136
    3530:	38 07       	cpc	r19, r24
    3532:	b9 f7       	brne	.-18     	; 0x3522 <APP_voidInitPW+0xfc>
	_delay_ms(500);
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_12);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	6c e0       	ldi	r22, 0x0C	; 12
    3538:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendData('*');
    353c:	8a e2       	ldi	r24, 0x2A	; 42
    353e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	48 ec       	ldi	r20, 0xC8	; 200
    3548:	50 e0       	ldi	r21, 0x00	; 0
    354a:	ca 01       	movw	r24, r20
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	f1 f7       	brne	.-4      	; 0x354c <APP_voidInitPW+0x126>
    3550:	2f 5f       	subi	r18, 0xFF	; 255
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	83 e1       	ldi	r24, 0x13	; 19
    3556:	28 38       	cpi	r18, 0x88	; 136
    3558:	38 07       	cpc	r19, r24
    355a:	b9 f7       	brne	.-18     	; 0x354a <APP_voidInitPW+0x124>
	_delay_ms(500);
	EEPROM_write(EEPROM_PASSWORD_LOCATION3,KPD_Return);
    355c:	83 e2       	ldi	r24, 0x23	; 35
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	60 91 62 02 	lds	r22, 0x0262
    3564:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <EEPROM_write>
	KPD_Return=NOTPRESSED;
    3568:	8f ef       	ldi	r24, 0xFF	; 255
    356a:	80 93 62 02 	sts	0x0262, r24

	do
	{
		KPD_Return=KPD_u8GetPressed();
    356e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    3572:	80 93 62 02 	sts	0x0262, r24
	} while (KPD_Return==NOTPRESSED);
    3576:	8f 3f       	cpi	r24, 0xFF	; 255
    3578:	d1 f3       	breq	.-12     	; 0x356e <APP_voidInitPW+0x148>
	CLCD_voidSendData(KPD_Return);
    357a:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	48 ec       	ldi	r20, 0xC8	; 200
    3584:	50 e0       	ldi	r21, 0x00	; 0
    3586:	ca 01       	movw	r24, r20
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <APP_voidInitPW+0x162>
    358c:	2f 5f       	subi	r18, 0xFF	; 255
    358e:	3f 4f       	sbci	r19, 0xFF	; 255
    3590:	83 e1       	ldi	r24, 0x13	; 19
    3592:	28 38       	cpi	r18, 0x88	; 136
    3594:	38 07       	cpc	r19, r24
    3596:	b9 f7       	brne	.-18     	; 0x3586 <APP_voidInitPW+0x160>
	_delay_ms(500);
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_13);
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	6d e0       	ldi	r22, 0x0D	; 13
    359c:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
	CLCD_voidSendData('*');
    35a0:	8a e2       	ldi	r24, 0x2A	; 42
    35a2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	48 ec       	ldi	r20, 0xC8	; 200
    35ac:	50 e0       	ldi	r21, 0x00	; 0
    35ae:	ca 01       	movw	r24, r20
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <APP_voidInitPW+0x18a>
    35b4:	2f 5f       	subi	r18, 0xFF	; 255
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	83 e1       	ldi	r24, 0x13	; 19
    35ba:	28 38       	cpi	r18, 0x88	; 136
    35bc:	38 07       	cpc	r19, r24
    35be:	b9 f7       	brne	.-18     	; 0x35ae <APP_voidInitPW+0x188>
	_delay_ms(500);
	EEPROM_write(EEPROM_PASSWORD_LOCATION4,KPD_Return);
    35c0:	84 e2       	ldi	r24, 0x24	; 36
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	60 91 62 02 	lds	r22, 0x0262
    35c8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <EEPROM_write>
	KPD_Return=NOTPRESSED;
    35cc:	8f ef       	ldi	r24, 0xFF	; 255
    35ce:	80 93 62 02 	sts	0x0262, r24

	EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
    35d2:	80 e2       	ldi	r24, 0x20	; 32
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <EEPROM_write>

}
    35dc:	08 95       	ret

000035de <APP_voidInit>:
}

/*all Initials I need */
void APP_voidInit(void)
{
	SSD_voidInitialDataPort(SSD);
    35de:	60 91 5e 02 	lds	r22, 0x025E
    35e2:	70 91 5f 02 	lds	r23, 0x025F
    35e6:	80 91 60 02 	lds	r24, 0x0260
    35ea:	90 91 61 02 	lds	r25, 0x0261
    35ee:	0e 94 62 11 	call	0x22c4	; 0x22c4 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD);
    35f2:	60 91 5e 02 	lds	r22, 0x025E
    35f6:	70 91 5f 02 	lds	r23, 0x025F
    35fa:	80 91 60 02 	lds	r24, 0x0260
    35fe:	90 91 61 02 	lds	r25, 0x0261
    3602:	0e 94 27 11 	call	0x224e	; 0x224e <SSD_voidEnable>
	CLCD_voidInit();
    3606:	0e 94 19 14 	call	0x2832	; 0x2832 <CLCD_voidInit>
	KPD_Init();
    360a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <KPD_Init>
	/***************/
	CLCD_voidSendString((u8*)"Welcome .....         ");
    360e:	8a e6       	ldi	r24, 0x6A	; 106
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	48 ec       	ldi	r20, 0xC8	; 200
    361c:	50 e0       	ldi	r21, 0x00	; 0
    361e:	ca 01       	movw	r24, r20
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <APP_voidInit+0x42>
    3624:	2f 5f       	subi	r18, 0xFF	; 255
    3626:	3f 4f       	sbci	r19, 0xFF	; 255
    3628:	8e e4       	ldi	r24, 0x4E	; 78
    362a:	20 32       	cpi	r18, 0x20	; 32
    362c:	38 07       	cpc	r19, r24
    362e:	b9 f7       	brne	.-18     	; 0x361e <APP_voidInit+0x40>
	_delay_ms(2000);
	CLCD_voidClearScreen();
    3630:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	61 e0       	ldi	r22, 0x01	; 1
    3638:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>

	/* Set P.W ---> EEPROM */
	if(EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3644:	8f 3f       	cpi	r24, 0xFF	; 255
    3646:	09 f0       	breq	.+2      	; 0x364a <APP_voidInit+0x6c>
    3648:	08 95       	ret
	{
		APP_voidInitPW();
    364a:	0e 94 13 1a 	call	0x3426	; 0x3426 <APP_voidInitPW>
    364e:	08 95       	ret

00003650 <APP_voidAppLoop>:
/**************************************************************************/


/*All application logic*/
void APP_voidAppLoop (void)
{
    3650:	0f 93       	push	r16
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	80 91 6e 02 	lds	r24, 0x026E
    365c:	c8 ec       	ldi	r28, 0xC8	; 200
    365e:	d0 e0       	ldi	r29, 0x00	; 0
static void APP_voidEnterPW(void)
{
	u8 tries=MAX_TRIES;
	while(My_Flag==0)
	{
		My_PW_Arr[0] = My_PW_Arr[1] = My_PW_Arr[2] = My_PW_Arr[3] = NOTPRESSED;
    3660:	0f ef       	ldi	r16, 0xFF	; 255

/*All application logic*/
void APP_voidAppLoop (void)
{

	while(My_Flag==0)
    3662:	88 23       	and	r24, r24
    3664:	09 f0       	breq	.+2      	; 0x3668 <APP_voidAppLoop+0x18>
    3666:	8a c2       	rjmp	.+1300   	; 0x3b7c <APP_voidAppLoop+0x52c>
	{
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	61 e0       	ldi	r22, 0x01	; 1
    366c:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8*)"Enter Num (1,2) :");
    3670:	81 e8       	ldi	r24, 0x81	; 129
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
		CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	61 e0       	ldi	r22, 0x01	; 1
    367c:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8*)"Open , Change PW");
    3680:	83 e9       	ldi	r24, 0x93	; 147
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
		do
		{
			KPD_Return=KPD_u8GetPressed();
    3688:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    368c:	80 93 62 02 	sts	0x0262, r24
		} while (KPD_Return == NOTPRESSED );
    3690:	8f 3f       	cpi	r24, 0xFF	; 255
    3692:	d1 f3       	breq	.-12     	; 0x3688 <APP_voidAppLoop+0x38>

		switch(KPD_Return)
    3694:	81 33       	cpi	r24, 0x31	; 49
    3696:	09 f4       	brne	.+2      	; 0x369a <APP_voidAppLoop+0x4a>
    3698:	4e c1       	rjmp	.+668    	; 0x3936 <APP_voidAppLoop+0x2e6>
    369a:	82 33       	cpi	r24, 0x32	; 50
    369c:	91 f0       	breq	.+36     	; 0x36c2 <APP_voidAppLoop+0x72>
			CLCD_voidSendString((u8*)"Done ... ");
			_delay_ms(2000);
			break;

		default:
			CLCD_voidSendString((u8*)"Not Valid");
    369e:	84 e0       	ldi	r24, 0x04	; 4
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	ce 01       	movw	r24, r28
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <APP_voidAppLoop+0x5c>
    36b0:	2f 5f       	subi	r18, 0xFF	; 255
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	8e e4       	ldi	r24, 0x4E	; 78
    36b6:	20 32       	cpi	r18, 0x20	; 32
    36b8:	38 07       	cpc	r19, r24
    36ba:	b9 f7       	brne	.-18     	; 0x36aa <APP_voidAppLoop+0x5a>
    36bc:	80 91 6e 02 	lds	r24, 0x026E
    36c0:	d0 cf       	rjmp	.-96     	; 0x3662 <APP_voidAppLoop+0x12>
			CLCD_voidClearScreen();
			APP_voidEnterPW();
			break;

		case '2':
			My_Flag=0;
    36c2:	10 92 6e 02 	sts	0x026E, r1
			CLCD_voidClearScreen();
    36c6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
    36ca:	13 e0       	ldi	r17, 0x03	; 3
    36cc:	80 91 6e 02 	lds	r24, 0x026E

}
static void APP_voidSetPW(void)
{
	u8 tries=MAX_TRIES;
	while(My_Flag==0)
    36d0:	88 23       	and	r24, r24
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <APP_voidAppLoop+0x86>
    36d4:	e3 c0       	rjmp	.+454    	; 0x389c <APP_voidAppLoop+0x24c>
	{
		My_PW_Arr[0] = My_PW_Arr[1] = My_PW_Arr[2] = My_PW_Arr[3] = NOTPRESSED;
    36d6:	00 93 72 02 	sts	0x0272, r16
    36da:	00 93 71 02 	sts	0x0271, r16
    36de:	00 93 70 02 	sts	0x0270, r16
    36e2:	00 93 6f 02 	sts	0x026F, r16
		CLCD_voidClearScreen();
    36e6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	61 e0       	ldi	r22, 0x01	; 1
    36ee:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8*)"Enter PW : ");
    36f2:	84 ea       	ldi	r24, 0xA4	; 164
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
		do
		{
			My_PW_Arr[0]=KPD_u8GetPressed();
    36fa:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    36fe:	80 93 6f 02 	sts	0x026F, r24
		} while (My_PW_Arr[0]==NOTPRESSED);
    3702:	8f 3f       	cpi	r24, 0xFF	; 255
    3704:	d1 f3       	breq	.-12     	; 0x36fa <APP_voidAppLoop+0xaa>
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_12);
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	6c e0       	ldi	r22, 0x0C	; 12
    370a:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData(My_PW_Arr[0]);
    370e:	80 91 6f 02 	lds	r24, 0x026F
    3712:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	ce 01       	movw	r24, r28
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <APP_voidAppLoop+0xcc>
    3720:	2f 5f       	subi	r18, 0xFF	; 255
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	83 e1       	ldi	r24, 0x13	; 19
    3726:	28 38       	cpi	r18, 0x88	; 136
    3728:	38 07       	cpc	r19, r24
    372a:	b9 f7       	brne	.-18     	; 0x371a <APP_voidAppLoop+0xca>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_12);
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	6c e0       	ldi	r22, 0x0C	; 12
    3730:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    3734:	8a e2       	ldi	r24, 0x2A	; 42
    3736:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	ce 01       	movw	r24, r28
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	f1 f7       	brne	.-4      	; 0x3740 <APP_voidAppLoop+0xf0>
    3744:	2f 5f       	subi	r18, 0xFF	; 255
    3746:	3f 4f       	sbci	r19, 0xFF	; 255
    3748:	83 e1       	ldi	r24, 0x13	; 19
    374a:	28 38       	cpi	r18, 0x88	; 136
    374c:	38 07       	cpc	r19, r24
    374e:	b9 f7       	brne	.-18     	; 0x373e <APP_voidAppLoop+0xee>
		_delay_ms(500);

		do
		{
			My_PW_Arr[1]=KPD_u8GetPressed();
    3750:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    3754:	80 93 70 02 	sts	0x0270, r24
		} while (My_PW_Arr[1]==NOTPRESSED);
    3758:	8f 3f       	cpi	r24, 0xFF	; 255
    375a:	d1 f3       	breq	.-12     	; 0x3750 <APP_voidAppLoop+0x100>
		CLCD_voidSendData(My_PW_Arr[1]);
    375c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	ce 01       	movw	r24, r28
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	f1 f7       	brne	.-4      	; 0x3766 <APP_voidAppLoop+0x116>
    376a:	2f 5f       	subi	r18, 0xFF	; 255
    376c:	3f 4f       	sbci	r19, 0xFF	; 255
    376e:	83 e1       	ldi	r24, 0x13	; 19
    3770:	28 38       	cpi	r18, 0x88	; 136
    3772:	38 07       	cpc	r19, r24
    3774:	b9 f7       	brne	.-18     	; 0x3764 <APP_voidAppLoop+0x114>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_13);
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	6d e0       	ldi	r22, 0x0D	; 13
    377a:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    377e:	8a e2       	ldi	r24, 0x2A	; 42
    3780:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	ce 01       	movw	r24, r28
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <APP_voidAppLoop+0x13a>
    378e:	2f 5f       	subi	r18, 0xFF	; 255
    3790:	3f 4f       	sbci	r19, 0xFF	; 255
    3792:	83 e1       	ldi	r24, 0x13	; 19
    3794:	28 38       	cpi	r18, 0x88	; 136
    3796:	38 07       	cpc	r19, r24
    3798:	b9 f7       	brne	.-18     	; 0x3788 <APP_voidAppLoop+0x138>
		_delay_ms(500);

		do
		{
			My_PW_Arr[2]=KPD_u8GetPressed();
    379a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    379e:	80 93 71 02 	sts	0x0271, r24
		} while (My_PW_Arr[2]==NOTPRESSED);
    37a2:	8f 3f       	cpi	r24, 0xFF	; 255
    37a4:	d1 f3       	breq	.-12     	; 0x379a <APP_voidAppLoop+0x14a>
		CLCD_voidSendData(My_PW_Arr[2]);
    37a6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	ce 01       	movw	r24, r28
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <APP_voidAppLoop+0x160>
    37b4:	2f 5f       	subi	r18, 0xFF	; 255
    37b6:	3f 4f       	sbci	r19, 0xFF	; 255
    37b8:	83 e1       	ldi	r24, 0x13	; 19
    37ba:	28 38       	cpi	r18, 0x88	; 136
    37bc:	38 07       	cpc	r19, r24
    37be:	b9 f7       	brne	.-18     	; 0x37ae <APP_voidAppLoop+0x15e>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_14);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	6e e0       	ldi	r22, 0x0E	; 14
    37c4:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    37c8:	8a e2       	ldi	r24, 0x2A	; 42
    37ca:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	ce 01       	movw	r24, r28
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <APP_voidAppLoop+0x184>
    37d8:	2f 5f       	subi	r18, 0xFF	; 255
    37da:	3f 4f       	sbci	r19, 0xFF	; 255
    37dc:	83 e1       	ldi	r24, 0x13	; 19
    37de:	28 38       	cpi	r18, 0x88	; 136
    37e0:	38 07       	cpc	r19, r24
    37e2:	b9 f7       	brne	.-18     	; 0x37d2 <APP_voidAppLoop+0x182>
		_delay_ms(500);
		do
		{
			My_PW_Arr[3]=KPD_u8GetPressed();
    37e4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    37e8:	80 93 72 02 	sts	0x0272, r24
		} while (My_PW_Arr[3]==NOTPRESSED);
    37ec:	8f 3f       	cpi	r24, 0xFF	; 255
    37ee:	d1 f3       	breq	.-12     	; 0x37e4 <APP_voidAppLoop+0x194>
		CLCD_voidSendData(My_PW_Arr[3]);
    37f0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    37f4:	20 e0       	ldi	r18, 0x00	; 0
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	ce 01       	movw	r24, r28
    37fa:	01 97       	sbiw	r24, 0x01	; 1
    37fc:	f1 f7       	brne	.-4      	; 0x37fa <APP_voidAppLoop+0x1aa>
    37fe:	2f 5f       	subi	r18, 0xFF	; 255
    3800:	3f 4f       	sbci	r19, 0xFF	; 255
    3802:	83 e1       	ldi	r24, 0x13	; 19
    3804:	28 38       	cpi	r18, 0x88	; 136
    3806:	38 07       	cpc	r19, r24
    3808:	b9 f7       	brne	.-18     	; 0x37f8 <APP_voidAppLoop+0x1a8>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_15);
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	6f e0       	ldi	r22, 0x0F	; 15
    380e:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    3812:	8a e2       	ldi	r24, 0x2A	; 42
    3814:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	ce 01       	movw	r24, r28
    381e:	01 97       	sbiw	r24, 0x01	; 1
    3820:	f1 f7       	brne	.-4      	; 0x381e <APP_voidAppLoop+0x1ce>
    3822:	2f 5f       	subi	r18, 0xFF	; 255
    3824:	3f 4f       	sbci	r19, 0xFF	; 255
    3826:	83 e1       	ldi	r24, 0x13	; 19
    3828:	28 38       	cpi	r18, 0x88	; 136
    382a:	38 07       	cpc	r19, r24
    382c:	b9 f7       	brne	.-18     	; 0x381c <APP_voidAppLoop+0x1cc>
		_delay_ms(500);
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==My_PW_Arr[0] &&  EEPROM_read(EEPROM_PASSWORD_LOCATION2)==My_PW_Arr[1] && EEPROM_read(EEPROM_PASSWORD_LOCATION3)==My_PW_Arr[2] && EEPROM_read(EEPROM_PASSWORD_LOCATION4)==My_PW_Arr[3])
    382e:	81 e2       	ldi	r24, 0x21	; 33
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3836:	90 91 6f 02 	lds	r25, 0x026F
    383a:	89 17       	cp	r24, r25
    383c:	09 f4       	brne	.+2      	; 0x3840 <APP_voidAppLoop+0x1f0>
    383e:	44 c0       	rjmp	.+136    	; 0x38c8 <APP_voidAppLoop+0x278>
			APP_voidInitPW();
			My_Flag=1;
		}
		else
		{
			tries=tries-1;
    3840:	11 50       	subi	r17, 0x01	; 1
			if (tries>0)
    3842:	09 f4       	brne	.+2      	; 0x3846 <APP_voidAppLoop+0x1f6>
    3844:	a0 c1       	rjmp	.+832    	; 0x3b86 <APP_voidAppLoop+0x536>
			{
				CLCD_voidClearScreen();
    3846:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"Wrong Password");
    384a:	8f ec       	ldi	r24, 0xCF	; 207
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	ce 01       	movw	r24, r28
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <APP_voidAppLoop+0x208>
    385c:	2f 5f       	subi	r18, 0xFF	; 255
    385e:	3f 4f       	sbci	r19, 0xFF	; 255
    3860:	87 e2       	ldi	r24, 0x27	; 39
    3862:	20 31       	cpi	r18, 0x10	; 16
    3864:	38 07       	cpc	r19, r24
    3866:	b9 f7       	brne	.-18     	; 0x3856 <APP_voidAppLoop+0x206>
				_delay_ms(1000);
				CLCD_voidClearScreen();
    3868:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"tries left:");
    386c:	8e ed       	ldi	r24, 0xDE	; 222
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
				CLCD_voidSendData(tries+48);
    3874:	81 2f       	mov	r24, r17
    3876:	80 5d       	subi	r24, 0xD0	; 208
    3878:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	ce 01       	movw	r24, r28
    3882:	01 97       	sbiw	r24, 0x01	; 1
    3884:	f1 f7       	brne	.-4      	; 0x3882 <APP_voidAppLoop+0x232>
    3886:	2f 5f       	subi	r18, 0xFF	; 255
    3888:	3f 4f       	sbci	r19, 0xFF	; 255
    388a:	87 e2       	ldi	r24, 0x27	; 39
    388c:	20 31       	cpi	r18, 0x10	; 16
    388e:	38 07       	cpc	r19, r24
    3890:	b9 f7       	brne	.-18     	; 0x3880 <APP_voidAppLoop+0x230>
    3892:	80 91 6e 02 	lds	r24, 0x026E

}
static void APP_voidSetPW(void)
{
	u8 tries=MAX_TRIES;
	while(My_Flag==0)
    3896:	88 23       	and	r24, r24
    3898:	09 f4       	brne	.+2      	; 0x389c <APP_voidAppLoop+0x24c>
    389a:	1d cf       	rjmp	.-454    	; 0x36d6 <APP_voidAppLoop+0x86>

		case '2':
			My_Flag=0;
			CLCD_voidClearScreen();
			APP_voidSetPW();
			CLCD_voidClearScreen();
    389c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
			CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	61 e0       	ldi	r22, 0x01	; 1
    38a4:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8*)"Done ... ");
    38a8:	8a ef       	ldi	r24, 0xFA	; 250
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	ce 01       	movw	r24, r28
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <APP_voidAppLoop+0x266>
    38ba:	2f 5f       	subi	r18, 0xFF	; 255
    38bc:	3f 4f       	sbci	r19, 0xFF	; 255
    38be:	8e e4       	ldi	r24, 0x4E	; 78
    38c0:	20 32       	cpi	r18, 0x20	; 32
    38c2:	38 07       	cpc	r19, r24
    38c4:	b9 f7       	brne	.-18     	; 0x38b4 <APP_voidAppLoop+0x264>
    38c6:	fa ce       	rjmp	.-524    	; 0x36bc <APP_voidAppLoop+0x6c>
		CLCD_voidSendData(My_PW_Arr[3]);
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_15);
		CLCD_voidSendData('*');
		_delay_ms(500);
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==My_PW_Arr[0] &&  EEPROM_read(EEPROM_PASSWORD_LOCATION2)==My_PW_Arr[1] && EEPROM_read(EEPROM_PASSWORD_LOCATION3)==My_PW_Arr[2] && EEPROM_read(EEPROM_PASSWORD_LOCATION4)==My_PW_Arr[3])
    38c8:	82 e2       	ldi	r24, 0x22	; 34
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    38d0:	90 91 70 02 	lds	r25, 0x0270
    38d4:	89 17       	cp	r24, r25
    38d6:	09 f0       	breq	.+2      	; 0x38da <APP_voidAppLoop+0x28a>
    38d8:	b3 cf       	rjmp	.-154    	; 0x3840 <APP_voidAppLoop+0x1f0>
    38da:	83 e2       	ldi	r24, 0x23	; 35
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    38e2:	90 91 71 02 	lds	r25, 0x0271
    38e6:	89 17       	cp	r24, r25
    38e8:	09 f0       	breq	.+2      	; 0x38ec <APP_voidAppLoop+0x29c>
    38ea:	aa cf       	rjmp	.-172    	; 0x3840 <APP_voidAppLoop+0x1f0>
    38ec:	84 e2       	ldi	r24, 0x24	; 36
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    38f4:	90 91 72 02 	lds	r25, 0x0272
    38f8:	89 17       	cp	r24, r25
    38fa:	09 f0       	breq	.+2      	; 0x38fe <APP_voidAppLoop+0x2ae>
    38fc:	a1 cf       	rjmp	.-190    	; 0x3840 <APP_voidAppLoop+0x1f0>
		{
			CLCD_voidClearScreen();
    38fe:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8*)"Right Password");
    3902:	80 eb       	ldi	r24, 0xB0	; 176
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	fe 01       	movw	r30, r28
    3910:	31 97       	sbiw	r30, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <APP_voidAppLoop+0x2c0>
    3914:	01 96       	adiw	r24, 0x01	; 1
    3916:	27 e2       	ldi	r18, 0x27	; 39
    3918:	80 31       	cpi	r24, 0x10	; 16
    391a:	92 07       	cpc	r25, r18
    391c:	c1 f7       	brne	.-16     	; 0x390e <APP_voidAppLoop+0x2be>
			_delay_ms(1000);
			CLCD_voidClearScreen();
    391e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
			CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	61 e0       	ldi	r22, 0x01	; 1
    3926:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
			APP_voidInitPW();
    392a:	0e 94 13 1a 	call	0x3426	; 0x3426 <APP_voidInitPW>
			My_Flag=1;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	80 93 6e 02 	sts	0x026E, r24
    3934:	cd ce       	rjmp	.-614    	; 0x36d0 <APP_voidAppLoop+0x80>
		} while (KPD_Return == NOTPRESSED );

		switch(KPD_Return)
		{
		case '1':
			CLCD_voidClearScreen();
    3936:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
    393a:	13 e0       	ldi	r17, 0x03	; 3
    393c:	80 91 6e 02 	lds	r24, 0x026E

/************/
static void APP_voidEnterPW(void)
{
	u8 tries=MAX_TRIES;
	while(My_Flag==0)
    3940:	88 23       	and	r24, r24
    3942:	09 f0       	breq	.+2      	; 0x3946 <APP_voidAppLoop+0x2f6>
    3944:	8e ce       	rjmp	.-740    	; 0x3662 <APP_voidAppLoop+0x12>
	{
		My_PW_Arr[0] = My_PW_Arr[1] = My_PW_Arr[2] = My_PW_Arr[3] = NOTPRESSED;
    3946:	00 93 72 02 	sts	0x0272, r16
    394a:	00 93 71 02 	sts	0x0271, r16
    394e:	00 93 70 02 	sts	0x0270, r16
    3952:	00 93 6f 02 	sts	0x026F, r16
		CLCD_voidClearScreen();
    3956:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	61 e0       	ldi	r22, 0x01	; 1
    395e:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendString((u8*)"Enter PW : ");
    3962:	84 ea       	ldi	r24, 0xA4	; 164
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
		do
		{
			My_PW_Arr[0]=KPD_u8GetPressed();
    396a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    396e:	80 93 6f 02 	sts	0x026F, r24
		} while (My_PW_Arr[0]==NOTPRESSED);
    3972:	8f 3f       	cpi	r24, 0xFF	; 255
    3974:	d1 f3       	breq	.-12     	; 0x396a <APP_voidAppLoop+0x31a>
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_12);
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	6c e0       	ldi	r22, 0x0C	; 12
    397a:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData(My_PW_Arr[0]);
    397e:	80 91 6f 02 	lds	r24, 0x026F
    3982:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	30 e0       	ldi	r19, 0x00	; 0
    398a:	ce 01       	movw	r24, r28
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	f1 f7       	brne	.-4      	; 0x398c <APP_voidAppLoop+0x33c>
    3990:	2f 5f       	subi	r18, 0xFF	; 255
    3992:	3f 4f       	sbci	r19, 0xFF	; 255
    3994:	83 e1       	ldi	r24, 0x13	; 19
    3996:	28 38       	cpi	r18, 0x88	; 136
    3998:	38 07       	cpc	r19, r24
    399a:	b9 f7       	brne	.-18     	; 0x398a <APP_voidAppLoop+0x33a>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_12);
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	6c e0       	ldi	r22, 0x0C	; 12
    39a0:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    39a4:	8a e2       	ldi	r24, 0x2A	; 42
    39a6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	ce 01       	movw	r24, r28
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <APP_voidAppLoop+0x360>
    39b4:	2f 5f       	subi	r18, 0xFF	; 255
    39b6:	3f 4f       	sbci	r19, 0xFF	; 255
    39b8:	83 e1       	ldi	r24, 0x13	; 19
    39ba:	28 38       	cpi	r18, 0x88	; 136
    39bc:	38 07       	cpc	r19, r24
    39be:	b9 f7       	brne	.-18     	; 0x39ae <APP_voidAppLoop+0x35e>
		_delay_ms(500);

		do
		{
			My_PW_Arr[1]=KPD_u8GetPressed();
    39c0:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    39c4:	80 93 70 02 	sts	0x0270, r24
		} while (My_PW_Arr[1]==NOTPRESSED);
    39c8:	8f 3f       	cpi	r24, 0xFF	; 255
    39ca:	d1 f3       	breq	.-12     	; 0x39c0 <APP_voidAppLoop+0x370>
		CLCD_voidSendData(My_PW_Arr[1]);
    39cc:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	ce 01       	movw	r24, r28
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <APP_voidAppLoop+0x386>
    39da:	2f 5f       	subi	r18, 0xFF	; 255
    39dc:	3f 4f       	sbci	r19, 0xFF	; 255
    39de:	83 e1       	ldi	r24, 0x13	; 19
    39e0:	28 38       	cpi	r18, 0x88	; 136
    39e2:	38 07       	cpc	r19, r24
    39e4:	b9 f7       	brne	.-18     	; 0x39d4 <APP_voidAppLoop+0x384>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_13);
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	6d e0       	ldi	r22, 0x0D	; 13
    39ea:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    39ee:	8a e2       	ldi	r24, 0x2A	; 42
    39f0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	ce 01       	movw	r24, r28
    39fa:	01 97       	sbiw	r24, 0x01	; 1
    39fc:	f1 f7       	brne	.-4      	; 0x39fa <APP_voidAppLoop+0x3aa>
    39fe:	2f 5f       	subi	r18, 0xFF	; 255
    3a00:	3f 4f       	sbci	r19, 0xFF	; 255
    3a02:	83 e1       	ldi	r24, 0x13	; 19
    3a04:	28 38       	cpi	r18, 0x88	; 136
    3a06:	38 07       	cpc	r19, r24
    3a08:	b9 f7       	brne	.-18     	; 0x39f8 <APP_voidAppLoop+0x3a8>
		_delay_ms(500);

		do
		{
			My_PW_Arr[2]=KPD_u8GetPressed();
    3a0a:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    3a0e:	80 93 71 02 	sts	0x0271, r24
		} while (My_PW_Arr[2]==NOTPRESSED);
    3a12:	8f 3f       	cpi	r24, 0xFF	; 255
    3a14:	d1 f3       	breq	.-12     	; 0x3a0a <APP_voidAppLoop+0x3ba>
		CLCD_voidSendData(My_PW_Arr[2]);
    3a16:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3a1a:	20 e0       	ldi	r18, 0x00	; 0
    3a1c:	30 e0       	ldi	r19, 0x00	; 0
    3a1e:	ce 01       	movw	r24, r28
    3a20:	01 97       	sbiw	r24, 0x01	; 1
    3a22:	f1 f7       	brne	.-4      	; 0x3a20 <APP_voidAppLoop+0x3d0>
    3a24:	2f 5f       	subi	r18, 0xFF	; 255
    3a26:	3f 4f       	sbci	r19, 0xFF	; 255
    3a28:	83 e1       	ldi	r24, 0x13	; 19
    3a2a:	28 38       	cpi	r18, 0x88	; 136
    3a2c:	38 07       	cpc	r19, r24
    3a2e:	b9 f7       	brne	.-18     	; 0x3a1e <APP_voidAppLoop+0x3ce>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_14);
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	6e e0       	ldi	r22, 0x0E	; 14
    3a34:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    3a38:	8a e2       	ldi	r24, 0x2A	; 42
    3a3a:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	ce 01       	movw	r24, r28
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	f1 f7       	brne	.-4      	; 0x3a44 <APP_voidAppLoop+0x3f4>
    3a48:	2f 5f       	subi	r18, 0xFF	; 255
    3a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a4c:	83 e1       	ldi	r24, 0x13	; 19
    3a4e:	28 38       	cpi	r18, 0x88	; 136
    3a50:	38 07       	cpc	r19, r24
    3a52:	b9 f7       	brne	.-18     	; 0x3a42 <APP_voidAppLoop+0x3f2>
		_delay_ms(500);
		do
		{
			My_PW_Arr[3]=KPD_u8GetPressed();
    3a54:	0e 94 d6 11 	call	0x23ac	; 0x23ac <KPD_u8GetPressed>
    3a58:	80 93 72 02 	sts	0x0272, r24
		} while (My_PW_Arr[3]==NOTPRESSED);
    3a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a5e:	d1 f3       	breq	.-12     	; 0x3a54 <APP_voidAppLoop+0x404>
		CLCD_voidSendData(My_PW_Arr[3]);
    3a60:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	ce 01       	movw	r24, r28
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <APP_voidAppLoop+0x41a>
    3a6e:	2f 5f       	subi	r18, 0xFF	; 255
    3a70:	3f 4f       	sbci	r19, 0xFF	; 255
    3a72:	83 e1       	ldi	r24, 0x13	; 19
    3a74:	28 38       	cpi	r18, 0x88	; 136
    3a76:	38 07       	cpc	r19, r24
    3a78:	b9 f7       	brne	.-18     	; 0x3a68 <APP_voidAppLoop+0x418>
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_15);
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	6f e0       	ldi	r22, 0x0F	; 15
    3a7e:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
		CLCD_voidSendData('*');
    3a82:	8a e2       	ldi	r24, 0x2A	; 42
    3a84:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	ce 01       	movw	r24, r28
    3a8e:	01 97       	sbiw	r24, 0x01	; 1
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <APP_voidAppLoop+0x43e>
    3a92:	2f 5f       	subi	r18, 0xFF	; 255
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	83 e1       	ldi	r24, 0x13	; 19
    3a98:	28 38       	cpi	r18, 0x88	; 136
    3a9a:	38 07       	cpc	r19, r24
    3a9c:	b9 f7       	brne	.-18     	; 0x3a8c <APP_voidAppLoop+0x43c>
		_delay_ms(500);
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==My_PW_Arr[0] &&  EEPROM_read(EEPROM_PASSWORD_LOCATION2)==My_PW_Arr[1] && EEPROM_read(EEPROM_PASSWORD_LOCATION3)==My_PW_Arr[2] && EEPROM_read(EEPROM_PASSWORD_LOCATION4)==My_PW_Arr[3])
    3a9e:	81 e2       	ldi	r24, 0x21	; 33
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3aa6:	90 91 6f 02 	lds	r25, 0x026F
    3aaa:	89 17       	cp	r24, r25
    3aac:	61 f1       	breq	.+88     	; 0x3b06 <APP_voidAppLoop+0x4b6>
			CLCD_voidSendString((u8*)"The Safe Opened");
			My_Flag=1;
		}
		else
		{
			tries=tries-1;
    3aae:	11 50       	subi	r17, 0x01	; 1
			if (tries>0)
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <APP_voidAppLoop+0x464>
    3ab2:	55 c0       	rjmp	.+170    	; 0x3b5e <APP_voidAppLoop+0x50e>
			{
				CLCD_voidClearScreen();
    3ab4:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"Wrong Password");
    3ab8:	8f ec       	ldi	r24, 0xCF	; 207
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	ce 01       	movw	r24, r28
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <APP_voidAppLoop+0x476>
    3aca:	2f 5f       	subi	r18, 0xFF	; 255
    3acc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ace:	87 e2       	ldi	r24, 0x27	; 39
    3ad0:	20 31       	cpi	r18, 0x10	; 16
    3ad2:	38 07       	cpc	r19, r24
    3ad4:	b9 f7       	brne	.-18     	; 0x3ac4 <APP_voidAppLoop+0x474>
				_delay_ms(1000);
				CLCD_voidClearScreen();
    3ad6:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"tries left:");
    3ada:	8e ed       	ldi	r24, 0xDE	; 222
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
				CLCD_voidSendData(tries+48);
    3ae2:	81 2f       	mov	r24, r17
    3ae4:	80 5d       	subi	r24, 0xD0	; 208
    3ae6:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <CLCD_voidSendData>
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	ce 01       	movw	r24, r28
    3af0:	01 97       	sbiw	r24, 0x01	; 1
    3af2:	f1 f7       	brne	.-4      	; 0x3af0 <APP_voidAppLoop+0x4a0>
    3af4:	2f 5f       	subi	r18, 0xFF	; 255
    3af6:	3f 4f       	sbci	r19, 0xFF	; 255
    3af8:	87 e2       	ldi	r24, 0x27	; 39
    3afa:	20 31       	cpi	r18, 0x10	; 16
    3afc:	38 07       	cpc	r19, r24
    3afe:	b9 f7       	brne	.-18     	; 0x3aee <APP_voidAppLoop+0x49e>
    3b00:	80 91 6e 02 	lds	r24, 0x026E
    3b04:	1d cf       	rjmp	.-454    	; 0x3940 <APP_voidAppLoop+0x2f0>
		CLCD_voidSendData(My_PW_Arr[3]);
		_delay_ms(500);
		CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_15);
		CLCD_voidSendData('*');
		_delay_ms(500);
		if(EEPROM_read(EEPROM_PASSWORD_LOCATION1)==My_PW_Arr[0] &&  EEPROM_read(EEPROM_PASSWORD_LOCATION2)==My_PW_Arr[1] && EEPROM_read(EEPROM_PASSWORD_LOCATION3)==My_PW_Arr[2] && EEPROM_read(EEPROM_PASSWORD_LOCATION4)==My_PW_Arr[3])
    3b06:	82 e2       	ldi	r24, 0x22	; 34
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3b0e:	90 91 70 02 	lds	r25, 0x0270
    3b12:	89 17       	cp	r24, r25
    3b14:	61 f6       	brne	.-104    	; 0x3aae <APP_voidAppLoop+0x45e>
    3b16:	83 e2       	ldi	r24, 0x23	; 35
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3b1e:	90 91 71 02 	lds	r25, 0x0271
    3b22:	89 17       	cp	r24, r25
    3b24:	09 f0       	breq	.+2      	; 0x3b28 <APP_voidAppLoop+0x4d8>
    3b26:	c3 cf       	rjmp	.-122    	; 0x3aae <APP_voidAppLoop+0x45e>
    3b28:	84 e2       	ldi	r24, 0x24	; 36
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <EEPROM_read>
    3b30:	90 91 72 02 	lds	r25, 0x0272
    3b34:	89 17       	cp	r24, r25
    3b36:	09 f0       	breq	.+2      	; 0x3b3a <APP_voidAppLoop+0x4ea>
    3b38:	ba cf       	rjmp	.-140    	; 0x3aae <APP_voidAppLoop+0x45e>
		{
			CLCD_voidClearScreen();
    3b3a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8*)"Right Password");
    3b3e:	80 eb       	ldi	r24, 0xB0	; 176
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    3b46:	82 e0       	ldi	r24, 0x02	; 2
    3b48:	61 e0       	ldi	r22, 0x01	; 1
    3b4a:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8*)"The Safe Opened");
    3b4e:	8f eb       	ldi	r24, 0xBF	; 191
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
			My_Flag=1;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	80 93 6e 02 	sts	0x026E, r24
    3b5c:	f1 ce       	rjmp	.-542    	; 0x3940 <APP_voidAppLoop+0x2f0>
				_delay_ms(1000);

			}
			else
			{
				CLCD_voidClearScreen();
    3b5e:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"Wrong Password");
    3b62:	8f ec       	ldi	r24, 0xCF	; 207
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    3b6a:	82 e0       	ldi	r24, 0x02	; 2
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"The Safe Closed");
    3b72:	8a ee       	ldi	r24, 0xEA	; 234
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    3b7a:	ff cf       	rjmp	.-2      	; 0x3b7a <APP_voidAppLoop+0x52a>
			_delay_ms(2000);
			break;
		}
	}

}
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	1f 91       	pop	r17
    3b82:	0f 91       	pop	r16
    3b84:	08 95       	ret
				_delay_ms(1000);

			}
			else
			{
				CLCD_voidClearScreen();
    3b86:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <CLCD_voidClearScreen>
				CLCD_voidSendString((u8*)"Wrong Password");
    3b8a:	8f ec       	ldi	r24, 0xCF	; 207
    3b8c:	90 e0       	ldi	r25, 0x00	; 0
    3b8e:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	61 e0       	ldi	r22, 0x01	; 1
    3b96:	0e 94 bc 13 	call	0x2778	; 0x2778 <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"The Safe Closed");
    3b9a:	8a ee       	ldi	r24, 0xEA	; 234
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 27 13 	call	0x264e	; 0x264e <CLCD_voidSendString>
    3ba2:	ff cf       	rjmp	.-2      	; 0x3ba2 <APP_voidAppLoop+0x552>

00003ba4 <main>:

#include "APP/APP_interface.h"

int main ()
{
	APP_voidInit();
    3ba4:	0e 94 ef 1a 	call	0x35de	; 0x35de <APP_voidInit>
	APP_voidAppLoop();
    3ba8:	0e 94 28 1b 	call	0x3650	; 0x3650 <APP_voidAppLoop>
    3bac:	ff cf       	rjmp	.-2      	; 0x3bac <main+0x8>

00003bae <__mulsi3>:
    3bae:	62 9f       	mul	r22, r18
    3bb0:	d0 01       	movw	r26, r0
    3bb2:	73 9f       	mul	r23, r19
    3bb4:	f0 01       	movw	r30, r0
    3bb6:	82 9f       	mul	r24, r18
    3bb8:	e0 0d       	add	r30, r0
    3bba:	f1 1d       	adc	r31, r1
    3bbc:	64 9f       	mul	r22, r20
    3bbe:	e0 0d       	add	r30, r0
    3bc0:	f1 1d       	adc	r31, r1
    3bc2:	92 9f       	mul	r25, r18
    3bc4:	f0 0d       	add	r31, r0
    3bc6:	83 9f       	mul	r24, r19
    3bc8:	f0 0d       	add	r31, r0
    3bca:	74 9f       	mul	r23, r20
    3bcc:	f0 0d       	add	r31, r0
    3bce:	65 9f       	mul	r22, r21
    3bd0:	f0 0d       	add	r31, r0
    3bd2:	99 27       	eor	r25, r25
    3bd4:	72 9f       	mul	r23, r18
    3bd6:	b0 0d       	add	r27, r0
    3bd8:	e1 1d       	adc	r30, r1
    3bda:	f9 1f       	adc	r31, r25
    3bdc:	63 9f       	mul	r22, r19
    3bde:	b0 0d       	add	r27, r0
    3be0:	e1 1d       	adc	r30, r1
    3be2:	f9 1f       	adc	r31, r25
    3be4:	bd 01       	movw	r22, r26
    3be6:	cf 01       	movw	r24, r30
    3be8:	11 24       	eor	r1, r1
    3bea:	08 95       	ret

00003bec <__udivmodsi4>:
    3bec:	a1 e2       	ldi	r26, 0x21	; 33
    3bee:	1a 2e       	mov	r1, r26
    3bf0:	aa 1b       	sub	r26, r26
    3bf2:	bb 1b       	sub	r27, r27
    3bf4:	fd 01       	movw	r30, r26
    3bf6:	0d c0       	rjmp	.+26     	; 0x3c12 <__udivmodsi4_ep>

00003bf8 <__udivmodsi4_loop>:
    3bf8:	aa 1f       	adc	r26, r26
    3bfa:	bb 1f       	adc	r27, r27
    3bfc:	ee 1f       	adc	r30, r30
    3bfe:	ff 1f       	adc	r31, r31
    3c00:	a2 17       	cp	r26, r18
    3c02:	b3 07       	cpc	r27, r19
    3c04:	e4 07       	cpc	r30, r20
    3c06:	f5 07       	cpc	r31, r21
    3c08:	20 f0       	brcs	.+8      	; 0x3c12 <__udivmodsi4_ep>
    3c0a:	a2 1b       	sub	r26, r18
    3c0c:	b3 0b       	sbc	r27, r19
    3c0e:	e4 0b       	sbc	r30, r20
    3c10:	f5 0b       	sbc	r31, r21

00003c12 <__udivmodsi4_ep>:
    3c12:	66 1f       	adc	r22, r22
    3c14:	77 1f       	adc	r23, r23
    3c16:	88 1f       	adc	r24, r24
    3c18:	99 1f       	adc	r25, r25
    3c1a:	1a 94       	dec	r1
    3c1c:	69 f7       	brne	.-38     	; 0x3bf8 <__udivmodsi4_loop>
    3c1e:	60 95       	com	r22
    3c20:	70 95       	com	r23
    3c22:	80 95       	com	r24
    3c24:	90 95       	com	r25
    3c26:	9b 01       	movw	r18, r22
    3c28:	ac 01       	movw	r20, r24
    3c2a:	bd 01       	movw	r22, r26
    3c2c:	cf 01       	movw	r24, r30
    3c2e:	08 95       	ret

00003c30 <__prologue_saves__>:
    3c30:	2f 92       	push	r2
    3c32:	3f 92       	push	r3
    3c34:	4f 92       	push	r4
    3c36:	5f 92       	push	r5
    3c38:	6f 92       	push	r6
    3c3a:	7f 92       	push	r7
    3c3c:	8f 92       	push	r8
    3c3e:	9f 92       	push	r9
    3c40:	af 92       	push	r10
    3c42:	bf 92       	push	r11
    3c44:	cf 92       	push	r12
    3c46:	df 92       	push	r13
    3c48:	ef 92       	push	r14
    3c4a:	ff 92       	push	r15
    3c4c:	0f 93       	push	r16
    3c4e:	1f 93       	push	r17
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	ca 1b       	sub	r28, r26
    3c5a:	db 0b       	sbc	r29, r27
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	09 94       	ijmp

00003c68 <__epilogue_restores__>:
    3c68:	2a 88       	ldd	r2, Y+18	; 0x12
    3c6a:	39 88       	ldd	r3, Y+17	; 0x11
    3c6c:	48 88       	ldd	r4, Y+16	; 0x10
    3c6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3c7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3c7e:	df 80       	ldd	r13, Y+7	; 0x07
    3c80:	ee 80       	ldd	r14, Y+6	; 0x06
    3c82:	fd 80       	ldd	r15, Y+5	; 0x05
    3c84:	0c 81       	ldd	r16, Y+4	; 0x04
    3c86:	1b 81       	ldd	r17, Y+3	; 0x03
    3c88:	aa 81       	ldd	r26, Y+2	; 0x02
    3c8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3c8c:	ce 0f       	add	r28, r30
    3c8e:	d1 1d       	adc	r29, r1
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	ed 01       	movw	r28, r26
    3c9c:	08 95       	ret

00003c9e <_exit>:
    3c9e:	f8 94       	cli

00003ca0 <__stop_program>:
    3ca0:	ff cf       	rjmp	.-2      	; 0x3ca0 <__stop_program>
